/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 23:47:46 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Arguments;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Callable;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.JavaMembers;
import com.google.javascript.rhino.head.LazilyLoadedCtor;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaConstructor;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeMath;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ScriptableObject_ESTest extends ScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = Context.enter();
      nativeIterator_StopIteration0.getIds();
      nativeIterator_StopIteration0.checkPropertyChange("error reporter", importerTopLevel0, importerTopLevel0);
      // Undeclared exception!
      try { 
        context0.compileFunction(importerTopLevel0, "C|qy", "language version", 8, nativeIterator_StopIteration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // securityDomain should be null if setSecurityController() was never called
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1500L);
      String string0 = null;
      Class<Float> class0 = Float.class;
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      // Undeclared exception!
      try { 
        nativeBoolean0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      Context context0 = new Context();
      Context context1 = Context.enter(context0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1);
      importerTopLevel0.findPrototypeId("setIm");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1056L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Context.getCurrentContext();
      nativeBoolean0.defineConst("error reporter", nativeArray0);
      nativeArray0.isEmpty();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = Context.getCurrentContext();
      int int0 = FunctionObject.JAVA_OBJECT_TYPE;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) "error reporter", (-380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Context.enter(context0, contextFactory0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Context context1 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1, false);
      scriptableObject0.setAttributes("error reporter", 13);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      importerTopLevel1.findPrototypeId("language version");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Byte byte0 = new Byte((byte)52);
      nativeObject0.entrySet();
      NativeArray nativeArray0 = new NativeArray(8);
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.defineClass((Scriptable) nativeObject0, class0);
      NativeArray nativeArray1 = new NativeArray(0L);
      nativeArray1.toArray();
      Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      NativeString nativeString0 = new NativeString("error reporter");
      ScriptableObject.putProperty((Scriptable) nativeObject0, 0, (Object) class0);
      // Undeclared exception!
      try { 
        nativeArray0.getInstanceIdName(100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 100
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1056L);
      Context.getContext();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context.getCurrentContext();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Method[] methodArray0 = new Method[5];
      Context context0 = Context.getContext();
      context0.instructionThreshold = 4;
      NativeObject nativeObject1 = (NativeObject)context0.initStandardObjects();
      nativeObject0.put((-887), (Scriptable) nativeObject1, (Object) nativeObject1);
      java.util.function.Function<NativeJSON, BaseFunction> function0 = (java.util.function.Function<NativeJSON, BaseFunction>) mock(java.util.function.Function.class, new ViolatedAssumptionAnswer());
      LazilyLoadedCtor lazilyLoadedCtor0 = new LazilyLoadedCtor(nativeObject1, "ev8&JA@uNhCDLA1Gs", "get", false, false);
      nativeObject0.getIds(true);
      // Undeclared exception!
      try { 
        nativeObject1.addLazilyInitializedValue("error reporter", 4081, lazilyLoadedCtor0, 180);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // error reporter
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.getClassName();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      nativeNumber0.toString();
      Class<NativeJSON> class0 = NativeJSON.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeNumber0, class0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeJSON\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader1);
      NativeArray nativeArray0 = new NativeArray((-7054365918152680535L));
      Object[] objectArray0 = Context.emptyArgs;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      ScriptableObject.isFalse((Object) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      ContextFactory.getGlobal();
      Context context0 = new Context();
      context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Delegator delegator0 = new Delegator();
      String string0 = null;
      boolean boolean0 = false;
      NativeWith nativeWith0 = new NativeWith((Scriptable) null, nativeJavaTopPackage0);
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getAttributes(3, (Scriptable) nativeWith0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 3 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeString nativeString0 = new NativeString("language version");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "language version";
      stringArray0[1] = "language version";
      stringArray0[2] = "error reporter";
      NativeWith nativeWith0 = new NativeWith(importerTopLevel0, nativeString0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        nativeWith0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.makeContext();
      Context context0 = Context.enter((Context) null, contextFactory0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      NativeString nativeString0 = new NativeString("error reporter");
      Delegator delegator0 = new Delegator();
      Class<Arguments> class0 = Arguments.class;
      // Undeclared exception!
      try { 
        ScriptableObject.buildClassCtor((Scriptable) scriptableObject0, class0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.Arguments\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Delegator delegator0 = new Delegator();
      nativeJavaTopPackage0.getGetterOrSetter((String) null, (-1), false);
      NativeArray nativeArray0 = new NativeArray(4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeIterator_StopIteration0, importerTopLevel0, 13);
      importerTopLevel0.getClassName();
      scriptableObject0.put("JavaImporter", (Scriptable) importerTopLevel0, (Object) "JavaImporter");
      importerTopLevel0.isConst("JavaImporter");
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.buildClassCtor((Scriptable) nativeIterator_StopIteration0, class0, false, false);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.get((Object) "jsGet_getTypeOf");
      // Undeclared exception!
      try { 
        nativeBoolean0.initPrototypeId(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.head.NativeBoolean", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Byte byte0 = new Byte((byte)52);
      java.util.function.Function<NativeJSON, BaseFunction> function0 = (java.util.function.Function<NativeJSON, BaseFunction>) mock(java.util.function.Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(com.google.javascript.rhino.head.NativeJSON.class));
      nativeObject0.computeIfAbsent(byte0, function0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)nativeObject0.entrySet();
      NativeArray nativeArray0 = new NativeArray(8);
      // Undeclared exception!
      try { 
        nativeObject0.put((Object) set0, (Object) "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      TopLevel topLevel0 = new TopLevel();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader1);
      nativeObject0.put("toString", (Scriptable) topLevel0, (Object) nativeJavaTopPackage0);
      ScriptableObject.putConstProperty(nativeJavaTopPackage0, "toString", classLoader1);
      nativeJavaTopPackage0.equivalentValues(classLoader0);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      // Undeclared exception!
      try { 
        nativeObject0.put(0, (Scriptable) baseFunction0, (Object) importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: 0.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object[] objectArray0 = new Object[5];
      Object object0 = ScriptableObject.getProperty((Scriptable) importerTopLevel0, 1);
      objectArray0[3] = object0;
      objectArray0[1] = (Object) importerTopLevel0;
      String string0 = "6B)\"&L";
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod((Scriptable) importerTopLevel0, "6B)\"&L", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000004 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Context context1 = Context.enter((Context) null, contextFactory0);
      ScriptableObject scriptableObject0 = context1.initStandardObjects();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1, true);
      ScriptableObject.ensureScriptable(importerTopLevel0);
      scriptableObject0.put(2, (Scriptable) importerTopLevel0, (Object) importerTopLevel0);
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, false);
      ImporterTopLevel importerTopLevel2 = null;
      try {
        importerTopLevel2 = new ImporterTopLevel((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      String[] stringArray0 = new String[9];
      stringArray0[5] = "getClassNam";
      Class<NativeJavaPackage> class0 = NativeJavaPackage.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.defineFunctionProperties(stringArray0, class0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      String string0 = "";
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.getApplicationClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, "", (ClassLoader) null);
      int int0 = 0;
      nativeJavaPackage0.setAttributes("no message resource found for message property ", 0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.defineConst("6.q/R||%n,I(tF:", nativeJavaPackage0);
      Class<NativeMath> class0 = NativeMath.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeJavaPackage0, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeMath\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test22()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(1814.28);
      nativeNumber0.toString();
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ScriptableObject.defineClass((Scriptable) nativeNumber0, class0, true, true);
      nativeNumber0.getAllIds();
      Context context0 = Context.enter();
      Context.enter(context0);
      // Undeclared exception!
      try { 
        Context.checkOptimizationLevel(2145386496);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Optimization level outside [-1..9]: 2145386496
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Byte byte0 = new Byte((byte)52);
      java.util.function.Function<NativeJSON, BaseFunction> function0 = (java.util.function.Function<NativeJSON, BaseFunction>) mock(java.util.function.Function.class, new ViolatedAssumptionAnswer());
      doReturn((BaseFunction) null).when(function0).apply(any(com.google.javascript.rhino.head.NativeJSON.class));
      nativeObject0.computeIfAbsent(byte0, function0);
      nativeObject0.entrySet();
      NativeArray nativeArray0 = new NativeArray(8);
      ContextFactory contextFactory0 = new ContextFactory();
      contextFactory0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      nativeJavaTopPackage0.getGetterOrSetter("", 0, false);
      Delegator delegator0 = new Delegator();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeArray nativeArray0 = new NativeArray(1934L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        nativeArray0.getOwnPropertyDescriptor(context0, nativeObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.enter((Context) null, contextFactory0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      // Undeclared exception!
      try { 
        scriptableObject0.setAttributes(",jDO@.ct", 676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 676
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeIterator_StopIteration0, importerTopLevel0, 13);
      importerTopLevel0.getClassName();
      scriptableObject0.put("JavaImporter", (Scriptable) importerTopLevel0, (Object) "JavaImporter");
      importerTopLevel0.isConst("JavaImporter");
      Delegator delegator0 = new Delegator();
      Context.getContext();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContextFactory.getGlobal();
      Context context0 = new Context();
      context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Delegator delegator0 = new Delegator();
      context0.addActivationName("");
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.putConst("jsFunction_getFunctionName", delegator0, "jsFunction_getFunctionName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeString nativeString0 = new NativeString("language version");
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      // Undeclared exception!
      try { 
        ScriptableObject.getTypedProperty((Scriptable) nativeString0, 0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot convert l to com.google.javascript.rhino.head.ImporterTopLevel
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(importerTopLevel1, "%^%,@,ZEn6jh", 225);
      importerTopLevel0.getClassName();
      Delegator delegator0 = new Delegator();
      Delegator delegator1 = new Delegator();
      Class<Object> class0 = Object.class;
      ScriptableObject.getTypedProperty((Scriptable) scriptableObject0, "JK4x$U_)", class0);
      Context.getCurrentContext();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.getClassName();
      importerTopLevel0.isConst("JavaImporter");
      Delegator delegator0 = new Delegator();
      Context.getCurrentContext();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.delete((String) null);
      nativeBoolean0.applyDescriptorToAttributeBitset(4908, importerTopLevel0);
      nativeBoolean0.size();
      nativeBoolean0.getAllIds();
      Delegator delegator0 = new Delegator();
      Delegator delegator1 = new Delegator();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0, importerTopLevel0);
      NativeString nativeString0 = new NativeString("Ia`dI6vc");
      Context context0 = Context.enter();
      Context.enter(context0);
      importerTopLevel0.sameValue(delegator0, "Ia`dI6vc");
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(0L);
      BaseFunction baseFunction0 = new BaseFunction(nativeArray0, nativeArray0);
      nativeArray0.isAccessorDescriptor(baseFunction0);
      nativeArray0.isEmpty();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\",]}b4RP|qn#k8[-yR";
      objectArray0[1] = (Object) delegator0;
      // Undeclared exception!
      try { 
        importerTopLevel0.importPackage(context0, nativeArray0, (Object[]) null, delegator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ScriptableObject.getClassPrototype(nativeBoolean0, "~D?UdQ");
      // Undeclared exception!
      try { 
        nativeBoolean0.setAttributes((-2504), (Scriptable) null, (-2504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2504
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2629.523752008);
      nativeNumber0.getClassName();
      NativeString nativeString0 = new NativeString("Number");
      TopLevel topLevel0 = new TopLevel();
      topLevel0.cacheBuiltins();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test36()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeArray nativeArray0 = new NativeArray(2014L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.delete("%K49lv");
      nativeBoolean0.defineConst("\",]}b4RP|qn#k8[-yR", nativeObject0);
      NativeArray nativeArray1 = new NativeArray(2014L);
      nativeArray1.isEmpty();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.defineConst("\",]}b4RP|qn#k8[-yR", nativeArray1);
      Class<FunctionObject> class0 = FunctionObject.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeObject0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.FunctionObject\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test37()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      Class<LazilyLoadedCtor> class0 = LazilyLoadedCtor.class;
      Class<Arguments> class1 = Arguments.class;
      JavaMembers javaMembers0 = JavaMembers.lookupClass(nativeObject0, class0, class1, false);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      nativeObject0.isGenericDescriptor(nativeJavaMethod0);
      Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, false);
      importerTopLevel0.findPrototypeId("error reporter");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      String string0 = " =*q=H-&z4tH";
      Synchronizer synchronizer0 = new Synchronizer(nativeObject0, nativeObject0);
      synchronizer0.put(8, (Scriptable) nativeObject0, (Object) nativeObject0);
      Class<BaseFunction> class0 = BaseFunction.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) synchronizer0, class0, true);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.delete((String) null);
      nativeBoolean0.applyDescriptorToAttributeBitset(4908, importerTopLevel0);
      nativeBoolean0.getAllIds();
      nativeBoolean0.getPrototype();
      Context context0 = new Context();
      IdFunctionObject idFunctionObject0 = null;
      try {
        idFunctionObject0 = new IdFunctionObject(nativeBoolean0, nativeBoolean0, 5, "`!(<", 0, (Scriptable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Context.enter(context0, contextFactory0);
      Delegator delegator0 = new Delegator();
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getGetterOrSetter("language version", (-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // language version
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test41()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptable(contextFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type com.google.javascript.rhino.head.ContextFactory
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test42()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1056L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Context context0 = Context.getContext();
      nativeArray0.getOwnPropertyDescriptor(context0, (Object) null);
      nativeBoolean0.defineConst("language version", nativeArray0);
      nativeArray0.isEmpty();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context.getCurrentContext();
      importerTopLevel0.findPrototypeId("error reporter");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      TopLevel topLevel0 = new TopLevel();
      nativeIterator_StopIteration0.put("{&m#cQo9k*E?HaL48g", (Scriptable) topLevel0, (Object) topLevel0);
      ScriptableObject.getPropertyIds(topLevel0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0, importerTopLevel0);
      ScriptableObject.deleteProperty((Scriptable) delegator0, 1);
      NativeString nativeString0 = new NativeString("Ia`dI6vc");
      Context context0 = Context.enter();
      Context.enter(context0);
      NativeArray nativeArray0 = new NativeArray(5);
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Context.getCurrentContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      // Undeclared exception!
      try { 
        importerTopLevel1.setGetterOrSetter("language version", 11, synchronizer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // language version
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      nativeNumber0.toString();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      ScriptableObject.ensureScriptableObject(importerTopLevel0);
      nativeNumber0.getAllIds();
      Context context1 = Context.enter();
      Context context2 = Context.enter(context1);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context2, (Scriptable) nativeNumber0, "error reporter", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000369 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      Context context1 = Context.enter((Context) null, contextFactory0);
      context1.initStandardObjects();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context1, true);
      NativeString nativeString0 = new NativeString("error reporter");
      Delegator delegator0 = new Delegator();
      context0.initStandardObjects((ScriptableObject) importerTopLevel0, false);
      // Undeclared exception!
      try { 
        nativeString0.setAttributes("W#7]FfQ5.rd", (Scriptable) delegator0, 568);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 568
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test47()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("+_");
      nativeJavaPackage0.setParentScope(importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.defineConst("finishInit", delegator0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) importerTopLevel0;
      objectArray0[1] = (Object) nativeObject0;
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      ScriptableObject.checkValidAttributes(13);
      nativeArray0.isEmpty();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Context context0 = Context.getCurrentContext();
      importerTopLevel0.findPrototypeId("Ia`dI6vN");
      InterpreterData interpreterData0 = new InterpreterData((-2984), "Ia`dI6vN", "jsGet_getClassName", false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject.buildDataDescriptor(nativeBoolean0, (Object) null, (-466));
      // Undeclared exception!
      try { 
        InterpretedFunction.createFunction(context0, importerTopLevel0, interpreterData0, nativeJavaTopPackage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1500L);
      IdFunctionObject idFunctionObject0 = null;
      try {
        idFunctionObject0 = new IdFunctionObject(nativeArray0, nativeArray0, 4, (String) null, 0, nativeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test49()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Byte byte0 = new Byte((byte)52);
      nativeObject0.entrySet();
      NativeArray nativeArray0 = new NativeArray(8);
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.defineClass((Scriptable) nativeObject0, class0);
      nativeArray0.has("jsStaticFunction_getClassName", (Scriptable) nativeArray0);
      ContextFactory contextFactory0 = new ContextFactory();
      Long long0 = new Long(4);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test50()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("+_");
      nativeJavaPackage0.setParentScope(importerTopLevel0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.checkPropertyChange("init", nativeJavaPackage0, nativeJavaPackage0);
      Integer integer0 = new Integer(2);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Context context1 = Context.enter(context0);
      // Undeclared exception!
      try { 
        context1.compileFunction(importerTopLevel0, "msg.change.getter.with.configurable.false", "roJ9`:<csdDB,", 36, contextFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // securityDomain should be null if setSecurityController() was never called
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test51()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("+_");
      nativeJavaPackage0.setParentScope(importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      nativeJavaPackage0.isGetterOrSetter("Ia`dI6vN", 2, false);
      Delegator delegator1 = new Delegator();
      Delegator delegator2 = new Delegator();
      StringBuffer stringBuffer0 = new StringBuffer();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test52()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      TopLevel topLevel0 = new TopLevel();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader1);
      nativeJavaTopPackage0.putConst("toString", topLevel0, classLoader0);
      nativeObject0.put("toString", (Scriptable) topLevel0, (Object) nativeJavaTopPackage0);
      nativeJavaTopPackage0.equivalentValues(classLoader0);
      nativeObject0.put("{&m#cQo9k*E?HaL48g", (Scriptable) topLevel0, (Object) topLevel0);
      ScriptableObject.getPropertyIds(topLevel0);
      NativeArray nativeArray0 = new NativeArray(2);
      Class<NativeContinuation> class0 = NativeContinuation.class;
      ScriptableObject.defineClass((Scriptable) nativeObject0, class0);
      nativeArray0.toArray();
      Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      Delegator delegator1 = new Delegator();
      ScriptableObject.getClassPrototype(nativeArray0, "toString");
      nativeObject0.defineConst("toString", topLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test53()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      TopLevel topLevel0 = new TopLevel();
      nativeObject0.setAttributes("toString", 13);
      nativeObject0.isGenericDescriptor(topLevel0);
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, true);
      importerTopLevel1.findPrototypeId("com.google.javascript.rhino.head.ast.SwitchCase");
      ScriptableObject.hasProperty((Scriptable) importerTopLevel1, 2);
      Class<String> class0 = String.class;
      JavaMembers javaMembers0 = new JavaMembers(nativeObject0, class0);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      nativeJavaMethod0.defineProperty("error reporter", class0, 3);
      NativeArray.setMaximumInitialCapacity((-1588406278));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader1);
      String string0 = "V c";
      // Undeclared exception!
      try { 
        JavaAdapter.createAdapterWrapper(nativeJavaTopPackage0, "V c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test55()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeArray nativeArray0 = new NativeArray(4);
      Object[] objectArray0 = Context.emptyArgs;
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      ScriptableObject.isFalse(baseFunction0);
      nativeArray0.defineOwnProperty(context0, (Object) importerTopLevel0, (ScriptableObject) importerTopLevel0, true);
      InterpreterData interpreterData0 = new InterpreterData(2, "language version", "", true);
      InterpreterData interpreterData1 = new InterpreterData(interpreterData0);
      // Undeclared exception!
      try { 
        InterpretedFunction.createFunction(context0, nativeObject0, interpreterData1, interpreterData1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test56()  throws Throwable  {
      ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeString nativeString0 = new NativeString("language version");
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      Scriptable scriptable0 = importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.getPropertyIds(importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(558L);
      Class<String> class0 = String.class;
      importerTopLevel0.getDefaultValue(class0);
      int int0 = FunctionObject.JAVA_OBJECT_TYPE;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, scriptable0, (Object) nativeArray0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1056L);
      nativeArray0.setAttributes(2, (Scriptable) null, 2);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Context context0 = Context.getContext();
      Short short0 = new Short((short)1);
      nativeArray0.getOwnPropertyDescriptor(context0, short0);
      nativeBoolean0.defineConst("!&IVOX", (Scriptable) null);
      Object[] objectArray0 = Context.emptyArgs;
      NativeArray nativeArray1 = new NativeArray(2);
      Delegator delegator0 = new Delegator();
      Delegator delegator1 = new Delegator();
      Context.getContext();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test58()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("+_");
      nativeJavaPackage0.setParentScope(importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      importerTopLevel0.applyDescriptorToAttributeBitset(3925, nativeJavaPackage0);
      Object[] objectArray0 = ScriptableObject.getPropertyIds(delegator0);
      NativeArray nativeArray0 = new NativeArray(objectArray0);
      LinkedHashSet<NativeNumber> linkedHashSet0 = new LinkedHashSet<NativeNumber>();
      // Undeclared exception!
      try { 
        nativeArray0.retainAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test59()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1056L);
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      Context.getCurrentContext();
      nativeBoolean0.defineConst("error reporter", nativeArray0);
      nativeArray0.isEmpty();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context.getCurrentContext();
      Class<NativeIterator.StopIteration> class0 = NativeIterator.StopIteration.class;
      // Undeclared exception!
      try { 
        importerTopLevel0.getDefaultValue(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid JavaScript value of type class com.google.javascript.rhino.head.NativeIterator$StopIteration
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Context context0 = null;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context1 = contextFactory0.makeContext();
      Context context2 = Context.enter((Context) null, contextFactory0);
      ScriptableObject scriptableObject0 = context2.initStandardObjects();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) scriptableObject0, class0, true, true);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context2, true);
      // Undeclared exception!
      try { 
        ScriptableObject.putProperty((Scriptable) baseFunction0, "error reporter", (Object) context1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: error reporter.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test61()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      ContextFactory contextFactory1 = ContextFactory.getGlobal();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeArray nativeArray0 = new NativeArray((-2168L));
      Object[] objectArray0 = Context.emptyArgs;
      Context context0 = contextFactory1.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeArray0, importerTopLevel0, (-6552), 247);
      ScriptableObject.getArrayPrototype(nativeArray0);
      ScriptableObject.isFalse(idFunctionObject0);
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test62()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        baseFunction0.getAttributes("I9`zOSIAsO[Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property I9`zOSIAsO[Q not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ScriptableObject.putConstProperty(nativeJavaTopPackage0, "toString", classLoader0);
      nativeJavaTopPackage0.equivalentValues(classLoader0);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.get((Object) nativeJavaTopPackage0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0, importerTopLevel0);
      NativeString nativeString0 = new NativeString("Ia`dI6vc");
      Context context0 = Context.enter();
      Context.enter(context0);
      NativeNumber nativeNumber0 = new NativeNumber(8);
      nativeNumber0.putConst("'8):wy}", importerTopLevel0, "'8):wy}");
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      baseFunction0.preventExtensions();
      nativeBoolean0.findInstanceIdInfo((String) null);
      nativeBoolean0.setParentScope(baseFunction0);
      // Undeclared exception!
      try { 
        nativeBoolean0.initPrototypeId(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 13
         //
         verifyException("com.google.javascript.rhino.head.NativeBoolean", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test66()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeIterator_StopIteration0, importerTopLevel0, 13);
      importerTopLevel0.getClassName();
      importerTopLevel0.fillConstructorProperties((IdFunctionObject) null);
      scriptableObject0.put("JavaImporter", (Scriptable) importerTopLevel0, (Object) "JavaImporter");
      importerTopLevel0.isConst("JavaImporter");
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.defineConst("'zVl`A$ F", nativeIterator_StopIteration0);
      NativeArray nativeArray0 = new NativeArray(2);
      nativeArray0.isEmpty();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel(context0);
      importerTopLevel2.findPrototypeId("error reporter");
      // Undeclared exception!
      try { 
        importerTopLevel0.getAttributes("jsConstructor", (Scriptable) scriptableObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property jsConstructor not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test67()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      classLoader0.setPackageAssertionStatus("getTypeOf", false);
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ScriptableObject.getTypedProperty((Scriptable) nativeJavaTopPackage0, 4, class0);
      NativeArray nativeArray0 = new NativeArray((-1));
      nativeArray0.toArray();
      nativeArray0.toArray();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        NativeArray.init((Scriptable) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify a property of a sealed object: Array.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0, importerTopLevel0);
      delegator0.hasInstance(synchronizer0);
      String string0 = "Ia`dI6vc";
      // Undeclared exception!
      try { 
        synchronizer0.newInstance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.Synchronizer
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context();
      context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Context.enter(context0, contextFactory0);
      Context.getCurrentContext();
      NativeCall nativeCall0 = new NativeCall();
      nativeJavaTopPackage0.associateValue(context0, nativeCall0);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.isAccessorDescriptor(nativeJavaTopPackage0);
      importerTopLevel0.findPrototypeId("getFunction");
      System.setCurrentTimeMillis((-2599L));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeObject0, importerTopLevel0, 13);
      importerTopLevel0.getClassName();
      scriptableObject0.put("JavaImporter", (Scriptable) importerTopLevel0, (Object) "JavaImporter");
      Delegator delegator0 = new Delegator();
      ScriptableObject.getPropertyIds(scriptableObject0);
      NativeArray nativeArray0 = new NativeArray((-983L));
      nativeArray0.toArray();
      Delegator delegator1 = new Delegator();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context();
      context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      Context.enter(context0, contextFactory0);
      Delegator delegator0 = new Delegator();
      String string0 = null;
      // Undeclared exception!
      try { 
        nativeJavaTopPackage0.getAttributes(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property 4 not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test72()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      TopLevel topLevel0 = new TopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeObject0, topLevel0, 15);
      topLevel0.getClassName();
      scriptableObject0.put("global", (Scriptable) topLevel0, (Object) "global");
      Class<NativeMath> class0 = NativeMath.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeObject0, class0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeMath\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test73()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeArray nativeArray0 = new NativeArray(5);
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      nativeArray0.isEmpty();
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeJavaConstructor0, true);
      nativeArray0.setAttributes("jR0y", (Scriptable) scriptableObject0, 13);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      nativeNumber0.getAllIds();
      Context context0 = Context.enter();
      Context context1 = Context.enter(context0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context1, (Scriptable) nativeNumber0, "error reporter", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000004 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test75()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeArray nativeArray0 = new NativeArray(5);
      NativeJavaConstructor nativeJavaConstructor0 = new NativeJavaConstructor((MemberBox) null);
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      ClassLoader.getSystemClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("language version");
      NativeJavaPackage nativeJavaPackage1 = new NativeJavaPackage(false, "error reporter", classLoader0);
      nativeArray0.isEmpty();
      ScriptableObject scriptableObject0 = context0.initStandardObjects((ScriptableObject) nativeJavaConstructor0, true);
      nativeArray0.setAttributes("L!jR0y", (Scriptable) scriptableObject0, 13);
      nativeJavaConstructor0.put((-1003958423), (Scriptable) nativeArray0, (Object) nativeArray0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test76()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      NativeArray nativeArray0 = new NativeArray((-8L));
      Object[] objectArray0 = Context.emptyArgs;
      Context context0 = contextFactory0.makeContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      ScriptableObject.isFalse(baseFunction0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test77()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      TopLevel topLevel0 = new TopLevel();
      Class<NativeMath> class0 = NativeMath.class;
      nativeObject0.put("{&m#cQo9k*E?HaL48g", (Scriptable) topLevel0, (Object) topLevel0);
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) nativeObject0, class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot load class \"com.google.javascript.rhino.head.NativeMath\" which has no zero-parameter constructor.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test78()  throws Throwable  {
      ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeString nativeString0 = new NativeString("language version");
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      NativeObject nativeObject0 = new NativeObject();
      ScriptableObject.getPropertyIds(importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(558L);
      nativeArray0.toArray();
      Delegator delegator0 = new Delegator();
      LinkedHashSet<NativeNumber> linkedHashSet0 = new LinkedHashSet<NativeNumber>();
      // Undeclared exception!
      try { 
        nativeArray0.retainAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(nativeObject0, importerTopLevel0, 13);
      importerTopLevel0.getClassName();
      Delegator delegator0 = new Delegator();
      Delegator delegator1 = new Delegator();
      Class<Object> class0 = Object.class;
      ScriptableObject.getTypedProperty((Scriptable) scriptableObject0, "JavaImporter", class0);
      Context.getCurrentContext();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ContextFactory.getGlobal();
      Context context0 = new Context();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Delegator delegator0 = new Delegator();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      nativeIterator_StopIteration0.isGenericDescriptor(nativeJavaTopPackage0);
      Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.findPrototypeId("K^=yb'!'kdPzvMQ&n&");
      ScriptableObject.hasProperty((Scriptable) nativeIterator_StopIteration0, 150);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage((ClassLoader) null);
      ScriptableObject.defineConstProperty(nativeJavaTopPackage0, "com.google.javascript.rhino.head.ScriptableObject$RelinkedSlot");
      Context.enter(context0, contextFactory0);
      Delegator delegator0 = new Delegator();
      Object object0 = new Object();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test82()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject.buildDataDescriptor(nativeIterator_StopIteration0, importerTopLevel0, 13);
      Delegator delegator0 = new Delegator();
      Context.getContext();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = Context.enter((Context) null, contextFactory0);
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      scriptableObject0.put(2, (Scriptable) importerTopLevel0, (Object) importerTopLevel0);
      ImporterTopLevel importerTopLevel1 = null;
      try {
        importerTopLevel1 = new ImporterTopLevel((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ImporterTopLevel", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test84()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      NativeObject nativeObject0 = (NativeObject)context0.initStandardObjects();
      Class<LazilyLoadedCtor> class0 = LazilyLoadedCtor.class;
      Class<Arguments> class1 = Arguments.class;
      JavaMembers javaMembers0 = JavaMembers.lookupClass(nativeObject0, class0, class1, false);
      NativeJavaMethod nativeJavaMethod0 = javaMembers0.ctors;
      nativeObject0.setAttributes("language version", 2);
      nativeObject0.isGenericDescriptor(nativeJavaMethod0);
      Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel(context0, false);
      importerTopLevel0.findPrototypeId("error reporter");
      ScriptableObject.hasProperty((Scriptable) nativeJavaMethod0, 4);
      nativeJavaMethod0.defineProperty("language version", class1, 4);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      importerTopLevel0.delete((String) null);
      nativeBoolean0.size();
      Object[] objectArray0 = nativeBoolean0.getAllIds();
      NativeArray nativeArray0 = new NativeArray(13);
      nativeArray0.toArray();
      Context context0 = Context.getCurrentContext();
      Delegator delegator0 = new Delegator();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeArray0, delegator0, nativeArray0, objectArray0);
      Synchronizer synchronizer0 = new Synchronizer(nativeBoolean0, boundFunction0);
      // Undeclared exception!
      try { 
        nativeArray0.subList(0, 10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test86()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context();
      context0.getApplicationClassLoader();
      Context context1 = Context.getContext();
      NativeArray nativeArray0 = new NativeArray((-1208L));
      Context context2 = Context.enter(context1, contextFactory0);
      nativeArray0.getOwnPropertyDescriptor(context2, contextFactory0);
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      nativeBoolean0.defineConst((String) null, (Scriptable) null);
      nativeArray0.isEmpty();
      nativeArray0.toArray();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context.getCurrentContext();
      importerTopLevel0.findPrototypeId("error reporter");
  }

  @Test(timeout = 4000)
  @Ignore
  public void test87()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      Synchronizer synchronizer0 = new Synchronizer(delegator0, importerTopLevel0);
      ScriptableObject.deleteProperty((Scriptable) delegator0, 1);
      NativeString nativeString0 = new NativeString("Ia`dI6vc");
      Delegator delegator1 = new Delegator();
      Delegator delegator2 = new Delegator();
      Context.getContext();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      nativeNumber0.toString();
      nativeNumber0.getAllIds();
      Context context0 = Context.enter();
      ScriptableObject.redefineProperty(nativeNumber0, "error reporter", false);
      Context context1 = Context.enter(context0);
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context1, (Scriptable) nativeNumber0, "error reporter", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000013 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      Class<TopLevel> class0 = TopLevel.class;
      ScriptableObject.buildClassCtor((Scriptable) nativeObject0, class0, true, false);
      java.util.function.Function<NativeJSON, BaseFunction> function0 = (java.util.function.Function<NativeJSON, BaseFunction>) mock(java.util.function.Function.class, new ViolatedAssumptionAnswer());
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)nativeObject0.entrySet();
      NativeArray nativeArray0 = new NativeArray(8);
      // Undeclared exception!
      try { 
        nativeArray0.retainAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test90()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("+_");
      nativeJavaPackage0.setParentScope(importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      importerTopLevel0.applyDescriptorToAttributeBitset(3938, nativeJavaPackage0);
      ScriptableObject.getPropertyIds((Scriptable) null);
      NativeArray nativeArray0 = new NativeArray(0L);
      Delegator delegator1 = new Delegator();
      Delegator delegator2 = new Delegator();
      Context.getContext();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test91()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Delegator delegator0 = new Delegator(importerTopLevel0);
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("+_");
      nativeJavaPackage0.setParentScope(importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      importerTopLevel0.applyDescriptorToAttributeBitset(3938, nativeJavaPackage0);
      nativeJavaPackage0.isGetterOrSetter("Ia`dI6vN", 2, false);
      Delegator delegator1 = new Delegator();
      Delegator delegator2 = new Delegator();
      StringBuffer stringBuffer0 = new StringBuffer();
      Context context0 = Context.enter();
      Context.enter(context0);
      ScriptableObject.getTopScopeValue(delegator0, "error reporter");
      nativeObject0.keySet();
  }

  @Test(timeout = 4000)
  @Ignore
  public void test92()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      ContextFactory.getGlobal();
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      NativeBoolean nativeBoolean0 = (NativeBoolean)importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "language version";
      stringArray0[1] = "language version";
      stringArray0[2] = "language version";
      Class<NativeNumber> class0 = NativeNumber.class;
      // Undeclared exception!
      try { 
        nativeBoolean0.defineFunctionProperties(stringArray0, class0, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"language version\" not found in \"com.google.javascript.rhino.head.NativeNumber\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      NativeNumber nativeNumber0 = new NativeNumber(4);
      Context context0 = Context.enter();
      Object[] objectArray0 = nativeObject0.getIds();
      BoundFunction boundFunction0 = new BoundFunction(context0, nativeNumber0, (Callable) null, nativeObject0, objectArray0);
      ScriptableObject.putConstProperty(nativeObject0, "C|qy", boundFunction0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader1);
      nativeJavaTopPackage0.equivalentValues((Object) null);
      Class<BaseFunction> class0 = BaseFunction.class;
      ScriptableObject.buildClassCtor((Scriptable) nativeObject0, class0, true, false);
      ContextFactory contextFactory0 = new ContextFactory();
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      nativeBoolean0.get((Object) contextFactory0);
      // Undeclared exception!
      try { 
        nativeBoolean0.initPrototypeId(1447);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1447
         //
         verifyException("com.google.javascript.rhino.head.NativeBoolean", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test94()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeObject0);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = Context.getCurrentContext();
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(context0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(importerTopLevel0);
      
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.Boolean;
      NativeBoolean nativeBoolean0 = (NativeBoolean)importerTopLevel0.getBuiltinPrototype(topLevel_Builtins0);
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeBoolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "language version";
      stringArray0[1] = "language version";
      boolean boolean0 = nativeObject0.isGenericDescriptor(importerTopLevel0);
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean0);
      
      Context context1 = Context.getCurrentContext();
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertNotNull(context1);
      assertSame(context1, context0);
      
      ImporterTopLevel importerTopLevel1 = new ImporterTopLevel();
      assertFalse(importerTopLevel1.avoidObjectDetection());
      assertTrue(importerTopLevel1.isExtensible());
      assertEquals("JavaImporter", importerTopLevel1.getClassName());
      assertFalse(importerTopLevel1.hasPrototypeMap());
      assertFalse(importerTopLevel1.isSealed());
      assertEquals("object", importerTopLevel1.getTypeOf());
      assertTrue(importerTopLevel1.isEmpty());
      assertFalse(importerTopLevel1.equals((Object)importerTopLevel0));
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(importerTopLevel1);
      
      ImporterTopLevel importerTopLevel2 = new ImporterTopLevel(context1, false);
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertFalse(context1.isGeneratingDebug());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(importerTopLevel2.hasPrototypeMap());
      assertFalse(importerTopLevel2.isEmpty());
      assertFalse(importerTopLevel2.avoidObjectDetection());
      assertTrue(importerTopLevel2.isExtensible());
      assertFalse(importerTopLevel2.isSealed());
      assertEquals("global", importerTopLevel2.getClassName());
      assertEquals("object", importerTopLevel2.getTypeOf());
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel0));
      assertFalse(importerTopLevel2.equals((Object)importerTopLevel1));
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context1.generateObserverCount);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(importerTopLevel2);
      
      int int0 = importerTopLevel0.findPrototypeId("language version");
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertFalse(importerTopLevel0.equals((Object)importerTopLevel1));
      assertFalse(importerTopLevel0.equals((Object)importerTopLevel2));
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertSame(context0, context1);
      assertNotSame(importerTopLevel0, importerTopLevel1);
      assertNotSame(importerTopLevel0, importerTopLevel2);
      assertEquals(0, int0);
      
      JavaAdapter.runScript((Script) null);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Context context0 = Context.enter();
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertNotNull(context0);
      
      Context context1 = Context.enter(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context1.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertTrue(context1.isGeneratingSource());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getOptimizationLevel());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context1.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertNotNull(context1);
      assertSame(context0, context1);
      assertSame(context1, context0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeBoolean0);
      
      Delegator delegator0 = new Delegator();
      assertNotNull(delegator0);
      
      Object object0 = nativeBoolean0.get((Object) delegator0);
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        nativeBoolean0.initPrototypeId(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9
         //
         verifyException("com.google.javascript.rhino.head.NativeBoolean", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.makeContext();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertNotNull(context0);
      
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertNotNull(classLoader0);
      
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNotNull(nativeJavaTopPackage0);
      
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      ImporterTopLevel importerTopLevel0 = ScriptableObject.getTypedProperty((Scriptable) nativeJavaTopPackage0, 4, class0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertNull(importerTopLevel0);
      
      NativeArray nativeArray0 = new NativeArray((-1));
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals((-1L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1L), nativeArray0.getLength());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(nativeArray0);
      
      Object[] objectArray0 = nativeArray0.toArray();
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals((-1L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1L), nativeArray0.getLength());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Object[] objectArray1 = nativeArray0.toArray();
      assertFalse(nativeArray0.hasPrototypeMap());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals((-1L), nativeArray0.jsGet_length());
      assertTrue(nativeArray0.isEmpty());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isSealed());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals((-1L), nativeArray0.getLength());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      
      ScriptableObject.redefineProperty(nativeJavaTopPackage0, "error reporter", false);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(nativeJavaTopPackage0.isEmpty());
      assertFalse(nativeJavaTopPackage0.isSealed());
      assertFalse(nativeJavaTopPackage0.avoidObjectDetection());
      assertEquals("JavaPackage", nativeJavaTopPackage0.getClassName());
      assertTrue(nativeJavaTopPackage0.isExtensible());
      assertEquals("object", nativeJavaTopPackage0.getTypeOf());
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      // Undeclared exception!
      try { 
        ScriptableObject.callMethod(context0, (Scriptable) nativeArray0, "error reporter", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: java.lang.String@0000000006 is not a function, it is object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      // Undeclared exception!
      try { 
        ScriptableObject.ensureScriptableObject((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Expected argument of type object, but instead had type object
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      NativeObject nativeObject0 = new NativeObject();
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.isSealed());
      assertTrue(nativeObject0.isExtensible());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertTrue(nativeObject0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertNotNull(nativeObject0);
      
      TopLevel topLevel0 = new TopLevel();
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(topLevel0);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) topLevel0, class0, true, true);
      assertFalse(topLevel0.hasPrototypeMap());
      assertEquals("object", topLevel0.getTypeOf());
      assertTrue(topLevel0.isExtensible());
      assertFalse(topLevel0.avoidObjectDetection());
      assertEquals("global", topLevel0.getClassName());
      assertTrue(topLevel0.isEmpty());
      assertFalse(topLevel0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("Function", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getLength());
      assertTrue(functionObject0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertNotNull(functionObject0);
      
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertNotNull(nativeBoolean0);
      
      // Undeclared exception!
      try { 
        nativeBoolean0.initPrototypeId(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8
         //
         verifyException("com.google.javascript.rhino.head.NativeBoolean", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.makeContext();
      ScriptableObject scriptableObject0 = context0.initStandardObjects();
      Class<LazilyLoadedCtor> class0 = LazilyLoadedCtor.class;
      Class<Arguments> class1 = Arguments.class;
      JavaMembers.lookupClass(scriptableObject0, class0, class1, false);
      Class<ImporterTopLevel> class2 = ImporterTopLevel.class;
      ScriptableObject.getTypedProperty((Scriptable) scriptableObject0, 95, class2);
      NativeArray nativeArray0 = new NativeArray(0);
      nativeArray0.toArray();
      nativeArray0.toArray();
      // Undeclared exception!
      try { 
        ScriptableObject.redefineProperty((Scriptable) null, "getFunction", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptableObject", e);
      }
  }
}

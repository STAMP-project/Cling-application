/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 23:57:09 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.debug.DebuggableScript;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class InterpretedFunction_ESTest extends InterpretedFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArray nativeArray0 = new NativeArray(12);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      InterpreterData interpreterData0 = new InterpreterData(100, "language version", "language version", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeWith0, interpreterData0, (Object) null);
      // Undeclared exception!
      try { 
        interpretedFunction0.exec(context0, nativeWith0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test1()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(12);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      InterpreterData interpreterData0 = new InterpreterData(100, "language version", "language version", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeWith0, interpreterData0, (Object) null);
      InterpreterData interpreterData1 = interpretedFunction0.idata;
      interpreterData1.itsFunctionType = 12;
      // Undeclared exception!
      try { 
        interpretedFunction0.exec(context0, nativeArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test2()  throws Throwable  {
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createScript((InterpreterData) null, (Object) null);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      // Undeclared exception!
      try { 
        interpretedFunction0.call(context0, (Scriptable) null, (Scriptable) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test3()  throws Throwable  {
      Context context0 = new Context();
      NativeArray nativeArray0 = new NativeArray(12);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      InterpreterData interpreterData0 = new InterpreterData(100, "language version", "language version", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeWith0, interpreterData0, (Object) null);
      String string0 = interpretedFunction0.getFunctionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test4()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = null;
      try {
        nativeArray0 = new NativeArray(context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.NativeArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArray nativeArray0 = new NativeArray(12);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      InterpreterData interpreterData0 = new InterpreterData(100, "language version", "language version", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeWith0, interpreterData0, (Object) null);
      // Undeclared exception!
      try { 
        interpretedFunction0.getParamOrVarConst(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      NativeArray nativeArray0 = new NativeArray(12);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      InterpreterData interpreterData0 = new InterpreterData(100, "language version", "language version", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeWith0, interpreterData0, (Object) null);
      DebuggableScript debuggableScript0 = interpretedFunction0.getDebuggableView();
      assertEquals("language version", debuggableScript0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      NativeArray nativeArray0 = new NativeArray(12);
      NativeWith nativeWith0 = new NativeWith(nativeArray0, nativeArray0);
      InterpreterData interpreterData0 = new InterpreterData(100, "language version", "language version", true);
      InterpretedFunction interpretedFunction0 = InterpretedFunction.createFunction(context0, nativeWith0, interpreterData0, (Object) null);
      Context context1 = contextFactory0.makeContext();
      // Undeclared exception!
      try { 
        interpretedFunction0.exec(context1, nativeWith0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.InterpretedFunction", e);
      }
  }
}

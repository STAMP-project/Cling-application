/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:01:01 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.format.FormatUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FormatUtils_ESTest extends FormatUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("gr*4sBMU(", 3858);
      assertNotNull(string0);
      assertEquals("Invalid format: \"gr*4sBMU(\" is too short", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("", 0);
      assertNotNull(string0);
      assertEquals("Invalid format: \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FormatUtils.createErrorMessage("c2u+:<(", 3);
      assertNotNull(string0);
      assertEquals("Invalid format: \"c2u+:<(\" is malformed at \"+:<(\"", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.createErrorMessage("c2u+:<(", (-1970));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(2338L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(547L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-8));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-34));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount((-9223372036854775808L));
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = FormatUtils.calculateDigitCount(9223372036854775785L);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(713);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-9223372036854775808L));
      assertEquals("-9223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 18L);
      assertEquals("18", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, 0);
      assertEquals("0", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, Integer.MIN_VALUE);
      assertEquals("-2147483648", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writeUnpaddedInteger((Writer) stringWriter0, (-2132253266));
      assertEquals("-2132253266", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(23);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 10000L);
      assertEquals(5, stringBuffer0.length());
      assertEquals("10000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendUnpaddedInteger((StringBuffer) null, (-9223372036854775767L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("Hu`Ax%QUMROvOf6/g`l");
      assertNotNull(stringBuffer0);
      assertEquals("Hu`Ax%QUMROvOf6/g`l", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 0);
      assertEquals("Hu`Ax%QUMROvOf6/g`l0", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1819);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, Integer.MIN_VALUE);
      assertEquals("-2147483648", stringBuffer0.toString());
      assertEquals(11, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, (-1509));
      assertEquals(5, stringBuffer0.length());
      assertEquals("-1509", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendUnpaddedInteger(stringBuffer0, 11);
      assertEquals("11", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(23);
      //  // Unstable assertion: assertNotNull(stringWriter0);
      //  // Unstable assertion: assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775744L), 23);
      //  // Unstable assertion: assertEquals("-00009223372036854775808", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 9223372036854775781L, 33);
      assertEquals("000000000000009223372036854775781", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-9223372036854775744L), (-6));
      assertEquals("-9223372036854775744", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2147483655L), 126);
      assertEquals("-000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002147483655", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 13421772, 13421772);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(713);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 713, 0);
      assertEquals("713", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(23);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 23, 23);
      assertEquals("00000000000000000000023", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) 4, 4);
      assertEquals("0004", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (long) (-14), (-14));
      assertEquals("-14", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, (-2147483648L), 126);
      assertEquals("-000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002147483648", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(10);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      FormatUtils.writePaddedInteger((Writer) stringWriter0, 1000L, 126);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2147483655L), 584);
      assertEqualsstringBuffer0.toString());
      assertEquals(585, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FormatUtils.appendPaddedInteger(stringBuffer0, 9223372036854775802L, 5053);
      assertEquals(5053, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.appendPaddedInteger((StringBuffer) null, (-9223372036854775792L), (-1691));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-9223372036854775808L), 584);
      assertEquals(585, stringBuffer0.length());
      assertEqualsstringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (-2828L), 0);
      assertEquals("-2828", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 10000, 10000);
      assertEquals(10000, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 23, 23);
      assertEquals(23, stringBuffer0.length());
      assertEquals("00000000000000000000023", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 9, 9);
      assertEquals(9, stringBuffer0.length());
      assertEquals("000000009", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) Integer.MIN_VALUE, 10000);
      assertEquals(10001, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      FormatUtils.appendPaddedInteger(stringBuffer0, (long) 126, 23);
      assertEquals(23, stringBuffer0.length());
      assertEquals("00000000000000000000126", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FormatUtils.parseTwoDigits("VJu0oy&j`AE.DGGU_", 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}

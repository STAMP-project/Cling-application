/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 22:17:30 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MonthDay_ESTest extends MonthDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      String string0 = monthDay0.toString((String) null, (Locale) null);
      assertEquals("--02-14", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.KOREAN;
      try { 
        monthDay0.toString("!O", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      String string0 = monthDay0.toString((String) null);
      assertEquals("--02-14", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        monthDay0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = new Period(0L);
      MonthDay monthDay1 = monthDay0.withPeriodAdded(period0, 5);
      assertNotSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = new Period();
      MonthDay monthDay1 = monthDay0.withPeriodAdded(period0, 0);
      assertSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      MonthDay monthDay1 = monthDay0.withFieldAdded(durationFieldType0, 0);
      assertSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      monthDay0.plusDays(86400);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      MonthDay monthDay1 = monthDay0.withField(dateTimeFieldType0, 1);
      assertSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      // Undeclared exception!
      try { 
        monthDay0.withField(dateTimeFieldType0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields((Chronology) null);
      assertSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        monthDay0.getField(3292);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 3292
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MonthDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      assertEquals(2, monthDay0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      monthDay0.getFieldTypes();
      assertEquals(10, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      assertEquals(1, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MonthDay monthDay1 = new MonthDay(monthDay0, julianChronology0);
      assertEquals(2, monthDay1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        monthDay0.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,29]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) copticChronology0);
      assertEquals(23, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Minutes minutes0 = Minutes.ONE;
      MonthDay monthDay1 = monthDay0.minus(minutes0);
      assertEquals(2, monthDay1.getMonthOfYear());
      assertNotSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("j8?1DbReCAYr_}:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"j8?1DbReCAYr_}:\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay monthDay1 = monthDay0.plusMonths(1);
      assertEquals(3, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      // Undeclared exception!
      try { 
        monthDay0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfYear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(copticChronology0);
      assertNotSame(monthDay1, monthDay0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay monthDay1 = monthDay0.plus((ReadablePeriod) null);
      assertEquals(2, monthDay1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertEquals(2, monthDay0.getMonthOfYear());
      
      monthDay0.toLocalDate(0);
      assertEquals(14, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(14, monthDay0.getDayOfMonth());
      
      MonthDay monthDay1 = monthDay0.minusDays(1);
      assertEquals(13, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      assertEquals(14, monthDay0.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = new MonthDay(monthDay0);
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(2, monthDay0.getMonthOfYear());
      
      MonthDay monthDay1 = monthDay0.minusMonths(0);
      assertSame(monthDay1, monthDay0);
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay0, 0);
      MonthDay monthDay1 = monthDay_Property0.setCopy(1);
      assertEquals(1, monthDay1.getMonthOfYear());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay_Property0.get());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay monthDay1 = monthDay_Property0.addToCopy(1);
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      String string0 = monthDay_Property0.getAsText();
      assertEquals("14", string0);
      assertEquals(2, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      assertEquals(2, monthDay0.size());
      
      MonthDay monthDay1 = monthDay_Property0.addWrapFieldToCopy(1);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(15, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MonthDay monthDay1 = monthDay_Property0.getMonthDay();
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay_Property0.get());
      assertEquals(14, monthDay1.getDayOfMonth());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      MonthDay.Property monthDay_Property0 = new MonthDay.Property(monthDay0, 1);
      // Undeclared exception!
      try { 
        monthDay_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:48:54 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ", ");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, (List<JSType>) immutableList0);
      functionType0.hasAnyTemplateInternal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      errorFunctionType0.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(allType0, jSTypeArray0);
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      functionType2.toDebugHashCodeString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.RegularImmutableList");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      errorFunctionType0.resolveInternal((ErrorReporter) null, objectType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.testForEquality(voidType0);
      noResolvedType0.hasCachedValues();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtc,}#sAg", (Node) null);
      functionType0.toDebugHashCodeString();
      functionType0.hasCachedValues();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.clearCachedValues();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, false);
      instanceObjectType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      // Undeclared exception!
      try { 
        noType0.setPrototypeBasedOn(instanceObjectType0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newString("]q=3t8_AX|fx7cA$u-");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.setSource(node0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      instanceObjectType0.getPropertyNode("5B{h;+k;.[u*AkIy");
      noResolvedType0.setSource(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "hrb+w-O)7x");
      errorFunctionType0.setPrototypeBasedOn(functionType0);
      errorFunctionType0.setSource((Node) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newString("]q=3t8_AX|fx7cA$u-");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, false);
      instanceObjectType0.getPropertyNode("5B{h;+k;.[u*AkIy");
      noResolvedType0.setSource(node0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      noObjectType0.getTypeOfThis();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ", ");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) templateType0, (List<JSType>) immutableList0);
      functionType0.clearCachedValues();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "f`dsn");
      JSType jSType0 = errorFunctionType0.getPropertyType("bind");
      jSType0.isSubtype(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      ObjectType[] objectTypeArray0 = new ObjectType[2];
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "at index ");
      objectTypeArray0[0] = (ObjectType) errorFunctionType0;
      functionType0.isSubtype(objectTypeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtc,}#sAg", (Node) null);
      FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, "Unknown class name", (Node) null);
      functionType0.isSubtype(functionType1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      functionType0.isNumber();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      functionType0.getGreatestSubtype(allType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{K");
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      jSTypeArray0[2] = jSType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, true, jSTypeArray0);
      functionType0.toAnnotationString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      functionType0.toAnnotationString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]q=3t8_AX|fx7cA$u-", (Node) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(functionType0, false);
      functionType1.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "9zj$\"-*}npO;:YiGyT", (Node) null);
      FunctionType functionType1 = noType0.supAndInfHelper(functionType0, true);
      functionType1.toStringHelper(true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "9zj$\"-*}npO;:YiGyT", (Node) null);
      functionType0.toStringHelper(true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "C#0ffny.EufM");
      errorFunctionType0.setPrettyPrint(false);
      errorFunctionType0.toAnnotationString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      functionType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (Node) null);
      JSType.getLeastSupertype((JSType) functionType0, (JSType) functionType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "9zj$\"-*}npO;:YiGyT", (Node) null);
      functionType0.isInstanceType();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      functionType1.getTopMostDefiningType("Not declared as a constructor");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]q=3t8_AX|fx7cA$u-", (Node) null);
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("Named type with empty name component");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType.getTopDefiningInterface(noResolvedType0, "Not declared as a constructor");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      FunctionType.getTopDefiningInterface(functionType0, "Not declared as a type name");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (Node) null);
      // Undeclared exception!
      try { 
        functionType0.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      FunctionType functionType0 = noResolvedType0.getBindReturnType(1);
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      functionType1.supAndInfHelper(noResolvedType0, false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (Node) null);
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
      functionType0.getGreatestSubtype(functionType1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      noResolvedType0.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = Node.newString(2396, "Unknown class name", 2396, 2396);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, noType0);
      functionType1.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString(2396, "Not declared as a constructor", 1, 2396);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, noType0);
      functionType1.supAndInfHelper(functionType0, true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (Node) null);
      FunctionType functionType1 = noResolvedType0.supAndInfHelper(errorFunctionType0, false);
      functionType0.getGreatestSubtype(functionType1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Node node0 = Node.newString(2396, "Unknown class name", 2396, 2396);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, node0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, noType0);
      functionType1.supAndInfHelper(functionType0, false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtc,}#sAg", (Node) null);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      functionType0.getGreatestSubtype(indexedType0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.RegularImmutableList");
      errorFunctionType0.getBindReturnType(160);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getBindReturnType((-2004593832));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "f`dsn");
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("apply");
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("57.bi");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "f`dsn");
      JSType jSType0 = errorFunctionType0.getPropertyType("bind");
      errorFunctionType0.isSubtype(jSType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.RegularImmutableList");
      errorFunctionType0.getPropertyType("call");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtc,}#sAg", (Node) null);
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      functionType0.setExtendedInterfaces(linkedList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      try { 
        noResolvedType0.setExtendedInterfaces(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      
      Iterable<ObjectType> iterable0 = functionType0.getAllExtendedInterfaces();
      assertNotNull(iterable0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(2, immutableList0.size());
      
      errorFunctionType0.setImplementedInterfaces(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(2, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtc,}#sAg", (Node) null);
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "f`dsn");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getAllImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      
      FunctionType functionType0 = noObjectType0.getBindReturnType(Integer.MAX_VALUE);
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      Node node0 = Node.newString("Unknown class name");
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      
      functionType0.setPrototypeBasedOn((ObjectType) noObjectType0, node0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]q=3t8_AX|fx7cA$u-", (Node) null);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal((ErrorReporter) null, functionType0);
      assertNotNull(functionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNullType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isInterface());
      assertTrue(functionType1.isResolved());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isConstructor());
      
      functionType0.setPrototypeBasedOn((ObjectType) errorFunctionType0, (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(functionType0, functionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      
      Node node0 = new Node(63743, 1, 38);
      assertNotNull(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(63743, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(4134, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(38, node0.getCharno());
      
      boolean boolean0 = errorFunctionType0.setPrototype((ObjectType) null, node0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(63743, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(4134, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals(38, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      
      Set<String> set0 = noType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(instanceObjectType0, "Named type with empty name component");
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      
      NoType noType1 = (NoType)noType0.getTopMostDefiningType("Not declared as a constructor");
      assertNotNull(noType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isCheckedUnknownType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isStringValueType());
      assertTrue(noType1.matchesStringContext());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isParameterizedType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isEnumType());
      assertFalse(noType1.isVoidType());
      assertFalse(noType1.isInterface());
      assertNull(noType1.getReferenceName());
      assertTrue(noType1.matchesNumberContext());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isTemplateType());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isRecordType());
      assertFalse(noType1.isBooleanValueType());
      assertTrue(noType1.isNoType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.hasCachedValues());
      assertTrue(noType1.matchesObjectContext());
      assertFalse(noType1.isReturnTypeInferred());
      assertFalse(noType1.isNoObjectType());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isAllType());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isFunctionType());
      
      Set<String> set0 = noType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(noType0, noType1);
      assertFalse(set0.contains("Not declared as a constructor"));
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isEnumElementType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtcV}#NsA", (Node) null);
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      
      ObjectType.Property objectType_Property0 = functionType0.getSlot("prototype");
      assertNotNull(objectType_Property0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertEquals("prototype", objectType_Property0.getName());
      assertTrue(objectType_Property0.isTypeInferred());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "", (Node) null);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      
      UnknownType unknownType0 = (UnknownType)functionType0.getPropertyType("U.SjdeLx");
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(unknownType0.isResolved());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.isNullable());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.matchesStringContext());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      
      int int0 = noResolvedType0.getMaxArguments();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "UDtcV}#NsA", (Node) null);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "f`dsn");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(3, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) nullType0;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(nullType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      
      int int0 = functionType0.getMinArguments();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, jSTypeArray0.length);
      assertEquals(1, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isEnumType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.isNullType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{K");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, int0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(159);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        FunctionType.forInterface(jSTypeRegistry0, (String) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString(1249, "TGd<");
      assertNotNull(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertEquals(1249, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      
      // Undeclared exception!
      try { 
        FunctionType.forInterface(jSTypeRegistry0, "TGd<", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertNotNull(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, jSTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isTemplateType());
      assertTrue(booleanType0.matchesObjectContext());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isVoidType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isEnumType());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isInterface());
      assertTrue(booleanType0.matchesStringContext());
      assertTrue(booleanType0.matchesNumberContext());
      assertFalse(booleanType0.isParameterizedType());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("Named type with empty name component", node0, node0, (JSType) booleanType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]q=3t8_AX|fx7cA$u-", (Node) null);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      
      List<FunctionType> list0 = functionType0.getSubTypes();
      assertNull(list0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "at index ");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getOwnImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "]q=3t8_AX|fx7cA$u-", (Node) null);
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, functionType0, functionType0);
      assertNotNull(indexedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isVoidType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, indexedType0);
      assertNotNull(functionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isVoidType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isStringValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      
      FunctionType functionType2 = (FunctionType)functionType1.getGreatestSubtype(functionType0);
      assertNotNull(functionType2);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isVoidType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isInterface());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isStringValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isInterface());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isVoidType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isEnumElementType());
      assertTrue(functionType2.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      
      int int0 = noResolvedType0.getExtendedInterfacesCount();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "F6Vi~@%hr>C}1R/kYBI");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      
      boolean boolean0 = errorFunctionType0.canBeCalled();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertNotNull(functionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      FunctionType functionType2 = functionType1.supAndInfHelper(noResolvedType0, true);
      assertNotNull(functionType2);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(functionType1, functionType2);
      assertSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      
      boolean boolean0 = errorFunctionType0.isReturnTypeInferred();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesObjectContext());
      
      boolean boolean0 = noType0.hasAnyTemplate();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "at index ");
      // Undeclared exception!
      try { 
        errorFunctionType0.hasEqualCallType((FunctionType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      Visitor<NoObjectType> visitor0 = (Visitor<NoObjectType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
      errorFunctionType0.visit(visitor0);
      assertFalse(errorFunctionType0.isInterface());
  }
}

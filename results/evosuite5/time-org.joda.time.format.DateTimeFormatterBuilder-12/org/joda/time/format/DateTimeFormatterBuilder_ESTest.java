/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:26:09 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      System.setCurrentTimeMillis(1086L);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendEraText();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(76);
      dateTimeFormatterBuilder1.appendHalfdayOfDayText();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      File file0 = MockFile.createTempFile("C`IB7:sR>f/a:xY", "C`IB7:sR>f/a:xY");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockFileWriter0, (ReadablePartial) null, locale0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 76, false);
      StringBuffer stringBuffer0 = new StringBuffer("C`IB7:sR>f/a:xY");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.add(1728L, (long) 76, 0);
      Integer integer0 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1086L, buddhistChronology0, locale0, integer0, 6);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(11, hashMap0);
      dateTimeFormatterBuilder1.appendOptional(dateTimeFormatterBuilder_TimeZoneName0);
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendLiteral("CE");
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfWeekText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfMinute(1028, (-60));
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendOptional(dateTimeFormatterBuilder_Composite0);
      dateTimeFormatterBuilder5.canBuildFormatter();
      dateTimeFormatterBuilder4.appendYear(1028, 1028);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendClockhourOfDay(2087);
      Locale locale0 = Locale.CANADA_FRENCH;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone.forOffsetMillis(17);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 17, 17);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter0.print((long) 17);
      Locale locale1 = Locale.ROOT;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeZone.forID("+01:00:00.000");
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("+01:00:00.000");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.+01:00:00.000
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 88);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "S/MountainUTl)", 1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.millisOfDay();
      Locale locale0 = Locale.forLanguageTag("");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Integer integer0 = new Integer(59);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      Integer integer1 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, integer1, 1);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('l');
      Integer integer2 = new Integer(59);
      StringWriter stringWriter0 = new StringWriter(59);
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(1);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap1);
      StringBuffer stringBuffer0 = new StringBuffer('l');
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 1375L, (Chronology) strictChronology0, 60, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTime.parse("0");
      UTCProvider uTCProvider0 = new UTCProvider();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.getZone();
      DateTimeFieldType.dayOfYear();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2870, true);
      StringBuffer stringBuffer0 = new StringBuffer("H4G_P`/%0p|tobjP");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("vW7M.w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"vW7M.w\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateTimeFormatterBuilder0.appendDayOfYear(6521);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(366);
      dateTimeFormatterBuilder1.canBuildFormatter();
      dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 84, false);
      StringWriter stringWriter0 = new StringWriter(366);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(84);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(3, hashMap1);
      StringBuffer stringBuffer0 = new StringBuffer(",?");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      Locale locale0 = Locale.JAPANESE;
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) 60, (Chronology) strictChronology0, 84, dateTimeZone0, locale0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 60, true);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Duration duration0 = Duration.standardSeconds((-526L));
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      localDateTime0.toDate();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) null, (ReadablePartial) localDateTime1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      EthiopicChronology.getInstance();
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(88, gregorianChronology0, locale0, (Integer) 1, (-17887489));
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "S/MountainUTl)", 86400000);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      dateTimeFormatterBuilder1.canBuildFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        DateTime.parse("org.joda.time.chrono.ZonedChronology");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.ZonedChrono...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("il");
      Writer writer0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      int int0 = (-1073741823);
      int int1 = 39;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(39);
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) null, 1017L, (Chronology) buddhistChronology0, (-1073741823), dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(50);
      DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, (-410));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendYearOfCentury(7, 7);
      DateTimeFieldType.millisOfSecond();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        DateTime.parse("19*OELgKCUH[29t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"19*OELgKCUH[29t\" is malformed at \"*OELgKCUH[29t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.printUnknownString((Writer) null, 1067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.LocalTime", "en", false, 20587500, 20587500);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.joda.time.LocalTime", false);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.US;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.LocalTime");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-78L), (Chronology) islamicChronology0, 20587500, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Locale locale0 = new Locale("", "");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, integer1, 1);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, false);
      StringWriter stringWriter0 = new StringWriter(1);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) stringWriter0, 0L, (Chronology) ethiopicChronology0, 1, (DateTimeZone) fixedDateTimeZone0, locale0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      Locale locale1 = Locale.ROOT;
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "", false, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, 1286L, (Chronology) ethiopicChronology0, 2689, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('m');
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_CharacterLiteral0, dateTimeFormatterBuilder_CharacterLiteral0);
      dateTimeFormatter0.print((-1995L));
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendPattern("UCTIllegal number of digits: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 4);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      dateTimeFormatterBuilder1.appendTimeZoneName();
      dateTimeFormatterBuilder0.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(65533);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfMinute(5, (-3858));
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendHalfdayOfDayText();
      dateTimeFormatterBuilder5.appendTimeZoneName();
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 4);
      dateTimeFieldType0.getDurationType();
      MonthDay monthDay0 = new MonthDay();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      dateTimeFormatter0.print((long) 1);
      Locale locale1 = Locale.ROOT;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.joda.time.LocalTime", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.joda.time.LocalTime");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.US;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-2899), 3);
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) printWriter0, (-1750L), (Chronology) gJChronology0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 65, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter(93);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(93);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      UTCProvider uTCProvider0 = new UTCProvider();
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      Locale.lookupTag(linkedList0, set0);
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1L), chronology0, 0, dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendEraText();
      UTCProvider uTCProvider0 = new UTCProvider();
      Locale locale0 = Locale.KOREA;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, (-732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -732
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(43, hashMap0);
      dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0);
      String string0 = "*j";
      // Undeclared exception!
      try { 
        LocalDate.parse("-w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-w\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(18);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(633);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P3]r");
      Locale.forLanguageTag("P3]r");
      Integer integer1 = new Integer(5140);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType1, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      LocalDate localDate0 = new LocalDate((long) 18);
      LocalDate localDate1 = localDate0.plusYears(633);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(832780L);
      localDate1.toLocalDateTime(localTime0);
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendSignedDecimal(dateTimeFieldType0, (-10), 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      dateTimeFormatterBuilder1.appendMinuteOfDay(0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(366);
      dateTimeFormatterBuilder2.canBuildFormatter();
      dateTimeFormatterBuilder2.appendFractionOfSecond(366, 366);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale1);
      locale0.hasExtensions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Locale locale2 = Locale.ENGLISH;
      locale0.getDisplayScript(locale2);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "", false, 58, 58);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Illegal number of digits: ");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (ReadablePartial) null, locale0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('n');
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockFileWriter0, (ReadablePartial) null, locale0);
      dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.millisOfSecond();
      Locale locale0 = Locale.TAIWAN;
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.print((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("en", "", true, 40, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Integer integer0 = new Integer(10);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 10, false);
      StringWriter stringWriter0 = new StringWriter(10);
      Locale locale0 = Locale.GERMANY;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) stringWriter0, (long) 10, (Chronology) ethiopicChronology0, 1, (DateTimeZone) fixedDateTimeZone0, locale0);
      dateTimeFormatterBuilder0.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      int int0 = 1;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getZone();
      dateTimeFieldType0.getField(copticChronology0);
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1, false, 1);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("R.QqM:iDwh", "R.QqM:iDwh", false, 1, 1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Locale locale0 = Locale.FRENCH;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_PaddedNumber0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 88, 88);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      dateTimeFormatterBuilder_Fraction0.iMinDigits = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      int int0 = 0;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 0, false);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[8];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[5] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[6] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      int int1 = 1479;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "Illegal number of digits: ", false, 1479, 1479);
      dateTimeParserArray0[7] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incomplete parser array
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Integer integer0 = new Integer((-1841));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2662L), lenientChronology0, locale0, integer0, (-1841));
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 6, 6);
      MonthDay monthDay0 = new MonthDay();
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter(93);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(93);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer0 = Integer.getInteger((String) null, (Integer) 1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, chronology0, locale0, integer0, 93);
      DateTimeZone dateTimeZone1 = dateTimeParserBucket0.getZone();
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) stringWriter0, (-1L), chronology0, 93, dateTimeZone1, locale0);
      UTCProvider uTCProvider0 = new UTCProvider();
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      Locale.lookupTag(linkedList0, set0);
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1L), chronology0, 0, dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        DateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, 16);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekShortText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendFractionOfSecond(16, 308);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(16);
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendLiteral('g');
      dateTimeFormatterBuilder5.appendTimeZoneName();
      dateTimeFormatterBuilder4.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", false, 2107, 2107);
      GregorianChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 6);
      partial0.getFormatter();
      partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("7#o)y!OH&", true);
      dateTimeFormatter0.printTo((Writer) mockFileWriter0, 604800000L);
      // Undeclared exception!
      try { 
        YearMonth.parse("7#o)y!OH&", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"7#o)y!OH&\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oC vK=tbV$$sX");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("MIT");
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer("MIT");
      BuddhistChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale0 = Locale.UK;
      Integer integer0 = new Integer(13);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, buddhistChronology0, locale0, integer0, 13);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "\"U*b!l<7-+?PF]8HC", 3);
      Locale locale1 = Locale.ITALIAN;
      Months months0 = Months.FOUR;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(983, hashMap0);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 16, true);
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "mz <A~);Ax%5&+?5%", 39);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 245, false);
      MonthDay monthDay0 = new MonthDay();
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 44, 44);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Locale locale0 = Locale.CHINA;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-3767L), islamicChronology0, locale0, (Integer) 1, 119);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "US/Pacific", (-1075));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (long) (-980), (Chronology) gJChronology0, (-980), dateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      MonthDay monthDay0 = new MonthDay(43200000L);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2087, 2087);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      UTCProvider uTCProvider0 = new UTCProvider();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("--legal number of digits: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--legal number of digits: \" is malformed at \"-legal number of digits: \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 352831696);
      LocalTime localTime0 = LocalTime.now();
      Locale locale0 = Locale.FRENCH;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, true, (-2567), 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 115, 115);
      Partial partial0 = new Partial(dateTimeFieldType0, 115);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.print(169L);
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction((DateTimeFieldType) null, 115, (-77));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      Partial partial0 = new Partial(dateTimeFieldType0, 3);
      partial0.getFormatter();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TextField0);
      dateTimeFormatter0.print((ReadablePartial) partial0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeForm]tterBulder$UnpaddedNumber", "org.joda.time.format.DateTimeForm]tterBulder$UnpaddedNumber", false, 2107, 2107);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 6);
      dateTimeFieldType0.getField(gregorianChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      partial0.getFormatter();
      dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter0.print((long) 2107);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("-001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-001\" is malformed at \"1\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(1897);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYear(1897, 1897);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfHalfday(1103);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1103, false, 32);
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append((DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFractionOfSecond(32, 1897);
      dateTimeFormatterBuilder5.appendLiteral("7");
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('u');
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Locale locale0 = new Locale("7", "7", "7");
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(32, islamicChronology0, locale0, (Integer) 1, 1103);
      dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, "7", 1103);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringWriter stringWriter0 = new StringWriter(93);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(93);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Integer integer0 = Integer.getInteger((String) null, (Integer) 1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, chronology0, locale0, integer0, 93);
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) stringWriter0, (-1L), chronology0, 93, dateTimeZone0, locale0);
      UTCProvider uTCProvider0 = new UTCProvider();
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      Locale.lookupTag(linkedList0, set0);
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (-1L), chronology0, 0, dateTimeZone0, locale0);
      DateTimeFormatterBuilder.printUnknownString(stringWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-90), true);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TwoDigitYear0, (DateTimeParser[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parsers supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Locale locale0 = Locale.KOREA;
      Locale locale1 = new Locale("org.joda.time.MutableInterval", "CE");
      Integer integer0 = new Integer((-980));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(13, gJChronology0, locale1, integer0, 13);
      locale1.getDisplayName();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-1103), false);
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "org.joda.time.MutableInterval", (-1103));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "Illegal number of digits: ", true, 2107, 2107);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeParserArray0);
      dateTimeFormatterBuilder1.appendHourOfHalfday(1479);
      dateTimeFormatterBuilder2.appendOptional(dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatterBuilder2.appendMinuteOfHour(6);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(6, hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer("Illegal number of digits: ");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Locale locale0 = Locale.GERMAN;
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (ReadablePartial) yearMonth0, locale0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("UTC");
      StringWriter stringWriter0 = new StringWriter(85);
      StringWriter stringWriter1 = stringWriter0.append('Z');
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(85);
      Locale locale0 = Locale.forLanguageTag("UTC");
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) stringWriter1, (ReadablePartial) localDateTime1, locale0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Locale locale1 = Locale.JAPAN;
      buddhistChronology0.add(1364L, 2264L, 168);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1364L, buddhistChronology0, locale1, (Integer) null, 14);
      dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, " C(VV||%F#", 424);
      dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "UTC", 14);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 4);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, copticChronology0, locale0, (Integer) 1, 4);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-3424), true);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, " duration,", (-3424));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1236), hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("US/Samoa");
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "US/Samoa";
      objectArray0[1] = (Object) hashMap0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      hashMap0.keySet();
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) hashMap0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "US/Samoa", objectArray0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) printWriter0, (ReadablePartial) null, locale0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) mockPrintWriter0, (ReadablePartial) null, locale0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("org.joda.time.chrono.GJYearOfEraDateTimeField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.GJYearOfEra...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = 45;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 45, false);
      StringBuffer stringBuffer0 = new StringBuffer("'UWMz|4%K");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("19*OELgKCUH[29t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"19*OELgKCUH[29t\" is malformed at \"*OELgKCUH[29t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(1700);
      dateTimeFormatterBuilder1.appendWeekOfWeekyear(1700);
      dateTimeFormatterBuilder0.appendMonthOfYear(1700);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 1700, 604800);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      dateTimeFormatterBuilder1.appendMinuteOfDay(0);
      int int0 = 366;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(366);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendDayOfWeek((-1154));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("GRu`-8ogkwe@", "GRu`-8ogkwe@", true, 230, 230);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GRu`-8ogkwe@", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "GRu`-8ogkwe@");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.US;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockPrintWriter1, (long) 20587500, (Chronology) gJChronology0, 230, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(4, hashMap0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      String string0 = "X0YnT3.";
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-426));
      hashMap0.put("X0YnT3.", dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      Integer integer0 = new Integer(4);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "X0YnT3.");
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) stringWriter1, (-2260L), (Chronology) gregorianChronology0, 2107, dateTimeZone0, locale0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, gregorianChronology0, locale0, integer0, 4);
      dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "6&BJsVm", 4);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      Locale locale1 = Locale.CANADA;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimeFormatter1);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("g", "g", true, 1623, 1623);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1623, islamicChronology0, (Locale) null, (Integer) 1, 1);
      dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "$vO8H]&<l?#,d", 512);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", false, 2107, 2107);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 6);
      dateTimeFieldType0.getField(gregorianChronology0);
      partial0.getFormatter();
      partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter0.print((long) 2107);
      Locale locale0 = Locale.ROOT;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeZone.forID("+010000000");
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 1);
      dateTimeFormatterBuilder_Fraction0.iMinDigits = 0;
      StringBuffer stringBuffer0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      StringWriter stringWriter2 = stringWriter1.append('Q');
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) stringWriter2, (ReadablePartial) monthDay0, locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 1073);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer();
      MonthDay monthDay0 = new MonthDay();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Chronology chronology0 = lenientChronology0.withZone(fixedDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, fixedDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      Locale locale2 = new Locale("(t-Wo)L7B/Stq9", "V%-t:`uP|SHHy\"");
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 2181L, (Chronology) strictChronology0, (-462), dateTimeZone0, locale2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2107, false);
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(1470);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2107, (Chronology) null, locale0, integer0, 1320);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "D-aOtR#:#SHPq`7[6", 15);
      Locale locale1 = Locale.ROOT;
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneId();
      UTCProvider uTCProvider0 = new UTCProvider();
      Locale locale0 = Locale.ROOT;
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 4715, false);
      StringBuffer stringBuffer0 = new StringBuffer("'UWMz|4%K");
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("'UWMz|4%K");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("'UWMz|4%K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"'UWMz|4%K\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("&Ilcq", "C", true, 547, (-1431655764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.era();
      DateTimeFieldType.weekyear();
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayLanguage(locale1);
      locale0.hasExtensions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "", false, 58, 58);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Illegal number of digits: ");
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (ReadablePartial) null, locale0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      Locale locale0 = Locale.US;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 88);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "S/MountainUTl)", 1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendClockhourOfHalfday(6);
      // Undeclared exception!
      try { 
        LocalDate.parse("-Cw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-Cw\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 58);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-74), false);
      StringBuffer stringBuffer0 = new StringBuffer("t/Mount");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      dateTimeFormatter2.print(100000000000L);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldType0.getRangeDurationType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((long) 66);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DateTime dateTime0 = dateMidnight0.toDateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withMillis((byte) (-25));
      LocalDateTime localDateTime0 = dateTime1.toLocalDateTime();
      ethiopicChronology0.get((ReadablePartial) localDateTime0, 259200000L);
      dateTimeFieldType0.getField(ethiopicChronology0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 66, false);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (byte) (-25), false);
      Locale locale0 = Locale.CANADA;
      Integer integer0 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((byte) (-25), ethiopicChronology0, locale0, integer0, 1);
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "6tlC[9;m", 1);
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "millisOfSecond", (-2));
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) null, (ReadablePartial) localDateTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekText();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) null, (ReadablePartial) localDateTime0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTwoDigitYear(48);
      DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        LocalDate.parse("z)Uj%30(bmE3:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"z)Uj%30(bmE3:\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(2087);
      Locale locale0 = Locale.CANADA_FRENCH;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      dateTimeFormatterBuilder2.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      System.setCurrentTimeMillis(1086L);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateTimeFormatterBuilder0.appendTimeZoneShortName();
      dateTimeFormatterBuilder0.appendClockhourOfDay(76);
      dateTimeFormatterBuilder1.toPrinter();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField((DateTimeFieldType) null, true);
      File file0 = MockFile.createTempFile("C`IB7:sR>f/a:xY", "C`IB7:sR>f/a:xY");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Locale locale0 = Locale.ENGLISH;
      dateTimeFormatterBuilder_TextField0.printTo((Writer) mockFileWriter0, (ReadablePartial) null, locale0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 76, false);
      StringBuffer stringBuffer0 = new StringBuffer("C`IB7:sR>f/a:xY");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.withUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      Integer integer0 = new Integer(1);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1086L, buddhistChronology0, locale0, integer0, 6);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, "C`IB7:sR>f/a:xY", 6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", false, 3009, 3009);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber");
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withZone((DateTimeZone) null);
      Locale locale0 = Locale.ITALY;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) mockFileWriter0, (long) 3009, chronology0, 31, (DateTimeZone) null, locale0);
      MonthDay monthDay0 = new MonthDay((long) 3009);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.withPivotYear((-175));
      dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.print((long) (-175));
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 541, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 20503125);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      bufferedWriter0.flush();
      Chronology chronology0 = islamicChronology0.withZone(fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate(chronology0);
      Locale locale0 = Locale.ITALY;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDate0, locale0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 2077);
      StringBuffer stringBuffer0 = new StringBuffer(541);
      stringBuffer0.append((double) 541);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) bufferedWriter0, 364L, chronology0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 84, false);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockFileWriter0, (ReadablePartial) localDate0, locale0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      Locale locale0 = new Locale("", "");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone.forOffsetMillis(18);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 17, 17);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        YearMonth.parse("18hh8]TgY23j6", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"18hh8]TgY23j6\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, (String) null, false, 65533, 65533);
      MonthDay monthDay0 = new MonthDay((-72123L));
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(65533);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      dateTimeFormatter2.withZoneUTC();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withChronology(ethiopicChronology0);
      dateTimeFormatter3.print((-5336536147L));
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 60;
      int int1 = (-5112);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendSignedDecimal((DateTimeFieldType) null, 60, (-5112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekText();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeZone.forOffsetMillis(18);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("America/Chicago", "IN", false, 18, 18);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      YearMonth.parse("IN", dateTimeFormatter0);
      Locale locale0 = Locale.FRANCE;
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(4, hashMap0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendOptional(dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneName();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfSecond(6, (-1290));
      Partial partial0 = new Partial(gregorianChronology0);
      partial0.getFormatter();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      dateTimeFormatterBuilder1.toParser();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "Illegal number of digits: ", false, 2107, 2107);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.MAX_VALUE;
      MonthDay monthDay0 = new MonthDay((long) 1571);
      MonthDay monthDay1 = monthDay0.plus(years0);
      Locale locale0 = Locale.ITALY;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 1571);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Integer integer0 = new Integer((-749));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, gregorianChronology0, locale0, integer0, 127);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) pipedWriter0, (long) 0, (Chronology) gregorianChronology0, 623158436, dateTimeZone0, locale0);
      dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) monthDay1, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 787);
      DateTimeFieldType.millisOfSecond();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(114);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedSignedDecimal((DateTimeFieldType) null, 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer(1200);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(100L);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, (-1610612734), false);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(52);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = new Locale("1]@a7wu'UQ?@#xw");
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.printTo((StringBuffer) null, 100L, (Chronology) iSOChronology0, (-669), dateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      dateTimeFormatterBuilder0.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      UTCProvider uTCProvider0 = new UTCProvider();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      ethiopicChronology0.withZone(fixedDateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 58);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 17887500, 2);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(2073);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) localDateTime1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 10);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      dateTimeFormatter0.print((ReadablePartial) partial0);
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 10, false);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, "-010", 10);
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("-010");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.-010
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new DateTimeFormatterBuilder();
      DateTimeFieldType.weekyear();
      Locale locale0 = Locale.KOREAN;
      Integer integer0 = new Integer((-2147483645));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2107, (Chronology) null, locale0, integer0, 1320);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "D-aOtR#:#SHPq`7[6");
      Integer integer1 = new Integer((-2147483645));
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) null, (long) (-2147483645), (Chronology) null, 1, (DateTimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Integer integer0 = new Integer(88);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(88, ethiopicChronology0, locale0, integer0, 88);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "19-welgkcuh[29t", 1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        DateTime.parse("te.vqi/+q>p-kjxU?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"te.vqi/+q>p-kjxU?\" is malformed at \"e.vqi/+q>p-kjxU?\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 709, true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOLanguages();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, chronology0, locale0, (Integer) null, (-3424));
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "w+^`dlXl", 1);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      int int0 = DateTimeFormatterBuilder.TimeZoneName.LONG_NAME;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 0, 7);
      StringWriter stringWriter0 = new StringWriter(3284);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) stringWriter0, 2150L, (Chronology) buddhistChronology0);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 3284, true);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "w+^`dlXl", 1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 709, true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, chronology0, locale0, (Integer) null, (-3424));
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "w+^`dlXl", 1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfDay((-2688), 1930);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      dateTimeFormatterBuilder0.appendSecondOfDay(0);
      dateTimeFormatterBuilder1.canBuildFormatter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 157, true);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto((DateTimeParserBucket) null, "No parser supplied", 157);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_PaddedNumber0, dateTimeParserArray0);
      dateTimeFormatterBuilder1.appendFractionOfHour(0, 48);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1620), true);
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(352831696, hashMap0);
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1620), 352831696);
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_Fraction0;
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('Y');
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Chronology chronology0 = strictChronology0.withUTC();
      Locale locale0 = Locale.CANADA_FRENCH;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1620), chronology0, locale0, (Integer) null, 52);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", (-1620));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset((String) null, "org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId", true, 32, 32);
      dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(32, hashMap0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(256);
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, 256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 256
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.millisOfDay();
      Locale locale0 = new Locale("", "");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Integer.getInteger("", 1335);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, integer1, 1335);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Integer integer2 = new Integer(32);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(32, ethiopicChronology0, locale0, (Integer) 1, 1);
      EthiopicChronology.getInstanceUTC();
      EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2719));
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, 1, 100);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 1, (Chronology) ethiopicChronology0, (-2719), dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitYear(61);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfWeekShortText();
      dateTimeFormatterBuilder3.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      Integer integer0 = new Integer(292272992);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, (Locale) null, integer0, 1);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1, ethiopicChronology0, (Locale) null, (Integer) 1, 1364);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("<Zulu", "", false, 1, 2);
      Integer integer1 = Integer.valueOf(2);
      DateTimeParserBucket dateTimeParserBucket2 = new DateTimeParserBucket(3, ethiopicChronology0, locale0, integer1, 2);
      dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket2, "org.joda.time.field.SkipUndoDateTimeField", 2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket1, "C00Cx|33Wh", 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.add((long) 1364, (long) 2, (-2));
      dateTimeFormatterBuilder0.appendMinuteOfHour(16);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.millisOfSecond();
      // Undeclared exception!
      try { 
        DateTime.parse("19*OELgKCUH[29t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"19*OELgKCUH[29t\" is malformed at \"*OELgKCUH[29t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeek(0);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSecondOfMinute(0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendMonthOfYearText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfMonth(0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfYear(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendTimeZoneId();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendOptional(dateTimeFormatterBuilder_TextField0);
      dateTimeFormatterBuilder5.appendTwoDigitYear(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      dateTimeFormatterBuilder7.appendDayOfWeekShortText();
      DateTimeFieldType.monthOfYear();
      dateTimeFormatterBuilder2.appendMonthOfYearText();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder6.appendYearOfEra(0, (-44));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 10);
      MockFileWriter mockFileWriter0 = new MockFileWriter("7#o)y!OH&", true);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      Integer integer0 = new Integer(10);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      dateTimeFormatter1.printTo((Writer) mockFileWriter0, 243627L);
      // Undeclared exception!
      try { 
        YearMonth.parse("org.joda.time.field.DividedDateTimeField", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.field.DividedDateT...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 115, 115);
      Partial partial0 = new Partial(dateTimeFieldType0, 115);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.print((long) 115);
      Locale locale0 = Locale.ROOT;
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendFractionOfDay(4562, 547);
      dateTimeFormatterBuilder0.appendYearOfEra(2107, 2107);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.withUTC();
      DateTimeZone.forOffsetMillis(1);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("US/EasternB0e;;wTpQ", "No parsers supplied", true, 1, 1);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TextField0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(1);
      // Undeclared exception!
      try { 
        LocalTime.parse("US/EasternB0e;;wTpQ", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"US/EasternB0e;;wTpQ\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MIT");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Chronology chronology0 = buddhistChronology0.withUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.ITALIAN;
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (-185L), chronology0, 13, dateTimeZone0, locale0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 13);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-185L), buddhistChronology0, locale0, (Integer) 1, 13);
      dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "MIT", 13);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-14), hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 4588L, chronology0, (-1936), dateTimeZone0, locale0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.printTo((Writer) null, (-185L), (Chronology) buddhistChronology0, 2572, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", false, 2107, 2107);
      GregorianChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 6);
      partial0.getFormatter();
      partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter0.print((long) 2107);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal rumer of digits ", "Illegal rumer of digits ", true, 2087, 2087);
      Years years0 = Years.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Integer integer0 = new Integer(2087);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('?');
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear((DateTimeFieldType) null, 1, true);
      StringWriter stringWriter0 = new StringWriter(762);
      Locale locale0 = Locale.CHINESE;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) stringWriter0, (long) 1, (Chronology) ethiopicChronology0, 2087, dateTimeZone0, locale0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      Locale locale1 = Locale.JAPANESE;
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$Composite", "lB#RZ", true, 58, 58);
      GregorianChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((long) 58);
      GJChronology.getInstance();
      Locale locale0 = Locale.US;
      Integer integer0 = new Integer(9);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.print((ReadablePartial) monthDay0);
      dateTimeFormatter0.print((long) 1);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2107, false);
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(1470);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2107, (Chronology) null, locale0, integer0, 1320);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "D-aOtR#:#SHPq`7[6", 2);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-3), 985);
      dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "D-aOtR#:#SHPq`7[6", 18);
      File file0 = MockFile.createTempFile(">i%b", ">i%b");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      GJChronology.getInstanceUTC();
      StringBuffer stringBuffer0 = new StringBuffer(2107);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) mockFileWriter0, 31556952000L, (Chronology) null);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test130()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.hourOfHalfday();
      Locale.forLanguageTag("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite1 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Composite0, dateTimeFormatterBuilder_Composite0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      // Undeclared exception!
      try { 
        LocalTime.parse("fc:p//~[:zLns@yND", dateTimeFormatter1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test131()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0);
      // Undeclared exception!
      try { 
        DateTime.parse("9,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9,\" is malformed at \",\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendDecimal((DateTimeFieldType) null, 116, 366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMonthOfYearText();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      MonthDay monthDay0 = new MonthDay((long) 1);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 968);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withChronology(gregorianChronology0);
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear(502);
      // Undeclared exception!
      try { 
        YearMonth.parse("18hh8]TgY23j6", dateTimeFormatter4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"18hh8]TgY23j6\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Integer integer0 = new Integer((-1841));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      Locale locale0 = Locale.TAIWAN;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-2662L), lenientChronology0, locale0, integer0, (-1841));
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-1841), true);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "D-aOtR#:#SHPq`7[6", 15);
      GJChronology.getInstanceUTC();
      Locale locale1 = Locale.KOREA;
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      Locale locale0 = Locale.JAPANESE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3424));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-3424), chronology0, locale0, (Integer) 1, (-3424));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "w+^`dlXl", 1);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[5];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      int int0 = DateTimeFormatterBuilder.TimeZoneName.LONG_NAME;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 51, 8);
      StringWriter stringWriter0 = new StringWriter(7);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) stringWriter0, (long) (-2), (Chronology) islamicChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildPrinter();
      DateTimeFieldType.millisOfSecond();
      DateTimeFieldType.weekyear();
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        DateTime.parse("19*jELgCUH[B9t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"19*jELgCUH[B9t\" is malformed at \"*jELgCUH[B9t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test137()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal rumer of digits ", "Illegal rumer of digits ", true, 2087, 2087);
      Years years0 = Years.THREE;
      MonthDay monthDay0 = new MonthDay((long) 2087);
      monthDay0.isBefore(monthDay0);
      monthDay0.minusDays(1);
      Locale locale0 = Locale.US;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2087);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1);
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) bufferedWriter0, (long) 2087, (Chronology) ethiopicChronology0, 0, dateTimeZone0, locale0);
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("Illegal rumer of digits ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.Illegal rumer of digits 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "Illegal number of digits: ", true, 2107, 2107);
      dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 14);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1571, false);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.ONE;
      MonthDay monthDay0 = new MonthDay((long) 14);
      MonthDay monthDay1 = new MonthDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay2 = monthDay1.withChronologyRetainFields(gJChronology0);
      Locale locale0 = Locale.ITALY;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear((Integer) 1);
      dateTimeFormatter1.withChronology(gregorianChronology0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) null, (ReadablePartial) monthDay2, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 58);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("*o");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      DateTimeFormatter dateTimeFormatter1 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      dateTimeFormatter1.withPivotYear(1);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      dateTimeFormatter2.withChronology(ethiopicChronology0);
      Integer integer0 = new Integer(100);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(585, ethiopicChronology0, locale0, integer0, 3600000);
      DateTimeZone dateTimeZone0 = dateTimeParserBucket1.getZone();
      dateTimeFormatter2.withZone(dateTimeZone0);
      dateTimeFormatter2.withZoneUTC();
      dateTimeFormatter1.print(1072L);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Locale locale0 = Locale.US;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(58, copticChronology0, locale0, (Integer) 1, 1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "S/MountainUTl)", 1);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('\\');
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Composite0.printTo((Writer) charArrayWriter1, (-2182L), (Chronology) null, 2095, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 1);
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      dateTimeFormatterBuilder0.appendLiteral('~');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedDecimal((DateTimeFieldType) null, 60000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2107, false);
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(1470);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2686L, (Chronology) null, locale0, integer0, 1320);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "D-aOtR#:#SHPq`7[6", 2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jzvn6!}m({>|=j$`");
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Integer integer0 = new Integer((-4433));
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(62135600400100L, iSOChronology0, (Locale) null, integer0, 6);
      dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, "No formatter supplied", 6);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1964, true);
      StringBuffer stringBuffer0 = new StringBuffer("illegal numbe");
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (long) 1964, (Chronology) null, 623191204, dateTimeZone0, (Locale) null);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.parseInto((DateTimeParserBucket) null, (String) null, 623191204);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.Chronology", "", true, 58, 512);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(58);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      Locale locale0 = Locale.ROOT;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(512, gJChronology0, locale0, (Integer) 4, 3);
      dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "", 0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      int int0 = 45;
      StringBuffer stringBuffer0 = new StringBuffer("'UWMz|4%K");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("BPs^wd8D[", "ZlIQ-6Z", true, 25, 25);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("+4y/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+4y/\" is malformed at \"4y/\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(99, 99);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.eras();
      dateTimeFormatterBuilder1.canBuildParser();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 1);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-74), false);
      StringBuffer stringBuffer0 = new StringBuffer();
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-74), (Chronology) ethiopicChronology0);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      int int0 = 1;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1, true);
      StringBuffer stringBuffer0 = new StringBuffer("'UWMz|4%K");
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TwoDigitYear0, dateTimeFormatterBuilder_TwoDigitYear0);
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseLocalDateTime("19*OELgKCUH[29t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"19*OELgKCUH[29t\" is malformed at \"*OELgKCUH[29t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        DateTime.parse("19-welgnuh6b9t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"19-welgnuh6b9t\" is malformed at \"-welgnuh6b9t\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(4, hashMap0);
      String string0 = "X0YnT3.";
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-426));
      hashMap0.put("X0YnT3.", dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      Integer integer0 = new Integer(4);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "X0YnT3.");
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      Locale locale1 = Locale.CANADA;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime("X0YnT3.");
      // Undeclared exception!
      try { 
        dateTimeFormatter0.parseInto(mutableDateTime0, ";EE!iQ'#[9*", 4283);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneShortName();
      dateTimeFormatterBuilder0.clear();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('\\');
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.KOREA;
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(2107);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale1 = Locale.forLanguageTag("");
      Integer integer1 = new Integer(2107);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      LocalDate localDate0 = new LocalDate((long) 2107);
      LocalDate localDate1 = localDate0.plusYears(2107);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(832780L);
      localDate1.toLocalDateTime(localTime0);
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale1);
      dateTimeFormatterBuilder1.appendSignedDecimal(dateTimeFieldType0, 2107, 652);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.KOREA;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 88);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "S/MountainUTl)", 1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", false, 2107, 2107);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay((long) 2107);
      Locale locale0 = Locale.CANADA;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false);
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber");
      LocalDateTime localDateTime0 = new LocalDateTime(3791L, (Chronology) gregorianChronology0);
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        DateTime.parse("ht)0~<]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ht)0~<]\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 39, 39);
      LocalTime localTime0 = new LocalTime();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_PaddedNumber0, dateTimeParserArray0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFractionOfHour(0, (-907));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1571, false);
      Years years0 = Years.ONE;
      MonthDay monthDay0 = new MonthDay((long) 1);
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields(gJChronology0);
      Locale locale0 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 26);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) monthDay1, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 709, true);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1000L, chronology0, locale0, (Integer) null, (-3424));
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "w+^`dlXl", 1);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, "w+^`dlXl", (-2));
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 1, 7);
      StringWriter stringWriter0 = new StringWriter(3284);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) stringWriter0, 2150L, (Chronology) buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.hourOfHalfday();
      int int0 = (-2164);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendWeekyear((-2164), (-1281));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.millisOfSecond();
      DateTimeFieldType.weekyear();
      DurationFieldType.hours();
      // Undeclared exception!
      try { 
        DateTime.parse("--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"--\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      MonthDay monthDay0 = new MonthDay((long) 1);
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 968, 1);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1793), hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer("8fhY, 7H");
      StrictChronology.getInstance(gregorianChronology0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 10000000000L, (Chronology) gregorianChronology0, 35, (DateTimeZone) null, locale0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuffer0);
      charArrayWriter1.append('*');
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 0);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_PaddedNumber0, dateTimeParserArray0);
      StringBuffer stringBuffer0 = new StringBuffer("7zb|MYge'oQco^9");
      DateTimeZone.getDefault();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      Instant instant0 = new Instant(0L);
      dateTimeFormatterBuilder1.appendDayOfWeekText();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendWeekyear(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(4, hashMap0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-426));
      hashMap0.put("X0YnT3.", dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      Integer integer0 = new Integer(4);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "X0YnT3.");
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) stringWriter1, (-2260L), (Chronology) gregorianChronology0, 2107, dateTimeZone0, locale0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, gregorianChronology0, locale0, integer0, 4);
      dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "6&BJsVm", 4);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      Locale locale1 = Locale.CANADA;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneName0, dateTimeFormatterBuilder_TimeZoneName0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatterBuilder1.append(dateTimeFormatter1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond(1687);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYearText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfWeekText();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendWeekyear(0, 1687);
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFractionOfSecond(0, 1687);
      dateTimeFormatterBuilder5.appendHourOfDay(0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1968, 1968);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.CHINA;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 4);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(4);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
      // Undeclared exception!
      try { 
        dateTimeFormatter3.printTo((Writer) null, (long) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "Illegal number of digits: ", true, 2107, 2107);
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[2];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 46);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1479, hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 866, false);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Locale locale0 = Locale.CHINESE;
      Integer integer0 = new Integer(65);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-1128L), gregorianChronology0, locale0, integer0, 0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = DateTimeFormatterBuilder.TimeZoneId.ALL_IDS;
      Locale.lookupTag(linkedList0, set0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (long) 65, (Chronology) gregorianChronology0, 690562340, (DateTimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekShortText();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(4, hashMap0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      String string0 = "X0YnT3.";
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-426));
      hashMap0.put("X0YnT3.", dateTimeZone0);
      Locale locale0 = Locale.JAPANESE;
      Integer integer0 = new Integer(4);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "X0YnT3.");
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) stringWriter1, (-2260L), (Chronology) gregorianChronology0, 2107, dateTimeZone0, locale0);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4, gregorianChronology0, locale0, integer0, 4);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, "b!", (-426));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.KOREA;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendOptional(dateTimeFormatterBuilder_Composite0);
      dateTimeFormatterBuilder1.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Locale locale0 = Locale.forLanguageTag("");
      UTCProvider uTCProvider0 = new UTCProvider();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Integer integer0 = new Integer(59);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      Integer integer1 = new Integer(292272992);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, integer1, 1364);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('l');
      Integer integer2 = new Integer(59);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1364, false);
      StringWriter stringWriter0 = new StringWriter(59);
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>();
      HashMap<String, DateTimeZone> hashMap2 = new HashMap<String, DateTimeZone>(1);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(1, hashMap2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, 1385L, (Chronology) strictChronology0, 60, (DateTimeZone) fixedDateTimeZone0, locale0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 59, false);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Duration duration0 = Duration.standardSeconds((-4L));
      localDateTime0.plus((ReadableDuration) duration0);
      Locale locale1 = Locale.ITALY;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) stringWriter0, (ReadablePartial) localDateTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 541, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 20503125);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Chronology chronology0 = islamicChronology0.withZone(fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate(chronology0);
      Locale locale0 = Locale.ITALY;
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDate0, locale0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test179()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Locale locale0 = Locale.forLanguageTag("");
      Integer integer0 = new Integer(59);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      Integer integer1 = new Integer(59);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(59, ethiopicChronology0, locale0, integer1, 1059);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>();
      hashMap1.put("-=G|_yO`", (DateTimeZone) null);
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(59, hashMap1);
      Integer integer2 = new Integer(292272971);
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, integer2, 1364);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('l');
      dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket1, "", 6);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 1364, false);
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("(.>%u[(");
      StringBuffer stringBuffer0 = new StringBuffer();
      MonthDay monthDay0 = new MonthDay((long) 1059);
      MonthDay monthDay1 = monthDay0.plusMonths(323);
      MonthDay monthDay2 = monthDay1.withChronologyRetainFields(ethiopicChronology0);
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) monthDay2, locale0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 59, false);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        LocalDate.parse("-w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-w\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType.weekyear();
      GregorianChronology.getInstance();
      Years years0 = Years.TWO;
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.ITALY;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 1);
      dateTimeFormatterBuilder_Fraction0.printTo((StringBuffer) null, (ReadablePartial) monthDay0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = 83;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 83, 83);
      Partial partial0 = new Partial(dateTimeFieldType0, 83);
      partial0.getFormatter();
      partial0.getFormatter();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Format invalid: ", "(ExD|Opn8Az", false, 3207, 3207);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_Fraction0);
      // Undeclared exception!
      try { 
        YearMonth.parse("(ExD|Opn8Az", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"(ExD|Opn8Az\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("Illegal number of digits: ", "Illegal number of digits: ", true, 2107, 2107);
      dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 14);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1571, false);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Locale locale0 = Locale.JAPAN;
      Integer integer0 = new Integer(14);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(4906L, gregorianChronology0, locale0, integer0, 636);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) 2107, (Chronology) gregorianChronology0, 14, (DateTimeZone) fixedDateTimeZone0, locale0);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2107, 1807);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1807);
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (long) 1571, (Chronology) gregorianChronology0, 14, (DateTimeZone) fixedDateTimeZone0, locale0);
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (Writer) charArrayWriter0, 36863133L, (Chronology) islamicChronology0);
      dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 14, false);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, 1000000000L, (Chronology) gregorianChronology0, 1807, (DateTimeZone) fixedDateTimeZone0, locale0);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) charArrayWriter0, (ReadablePartial) localDateTime0, locale0);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) charArrayWriter0, (long) 636, (Chronology) null, 750, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendEraText();
      dateTimeFormatterBuilder2.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale0 = Locale.CANADA;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 83, 59);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      Partial partial0 = new Partial(dateTimeFieldType1, 1);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-226), hashMap0);
      StringBuffer stringBuffer1 = new StringBuffer("");
      StrictChronology.getInstance(ethiopicChronology0);
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer1, 1124L, (Chronology) ethiopicChronology0, 83, dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      Locale locale0 = Locale.ROOT;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields((Chronology) null);
      Locale locale1 = Locale.ITALY;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1, 12);
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction1 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 1, 93);
      dateTimeFormatterBuilder_Fraction1.printTo(stringBuffer0, (ReadablePartial) monthDay1, locale1);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", "org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", false, 3009, 3009);
      MonthDay monthDay0 = new MonthDay((long) 3009);
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneOffset0, dateTimeFormatterBuilder_TimeZoneOffset0);
      dateTimeFormatter0.withPivotYear((-175));
      dateTimeFormatter0.withOffsetParsed();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      dateTimeFormatter1.print((long) (-175));
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(2107);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale1 = Locale.forLanguageTag("");
      Integer integer1 = new Integer(2107);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      LocalDate localDate0 = new LocalDate((long) 2107);
      LocalDate localDate1 = localDate0.plusYears(2107);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(832780L);
      localDate1.toLocalDateTime(localTime0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale1);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 2107, 652);
      dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      PipedReader pipedReader0 = new PipedReader(2107);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Locale locale2 = Locale.ROOT;
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) pipedWriter0, (ReadablePartial) localDate0, locale2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDayOfYear((-146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFormatterBuilder0.appendTwoDigitYear((-91), true);
      Locale.forLanguageTag("");
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      EthiopicChronology.getInstance((DateTimeZone) null);
      Integer integer0 = new Integer(59);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 59, false);
      Locale locale0 = Locale.ROOT;
      Integer integer1 = new Integer(1);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Integer integer2 = new Integer(1470);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(59, iSOChronology0, locale0, integer2, 59);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "", 1320);
      dateTimeFormatterBuilder0.appendLiteral("");
      dateTimeFormatterBuilder0.appendLiteral("<BD]#Tg");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendYear(3742, (-2323));
      dateTimeFormatterBuilder0.appendTimeZoneShortName();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.ROOT;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale1 = Locale.forLanguageTag("");
      Integer integer0 = new Integer(2107);
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      LocalDate localDate0 = new LocalDate((long) 2107);
      LocalDate localDate1 = localDate0.plusYears(2107);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(832780L);
      localDate1.toLocalDateTime(localTime0);
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale1);
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 652, false);
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMinuteOfHour(2107);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 2107, false);
      dateTimeFieldType0.getField((Chronology) null);
      Locale locale0 = Locale.ROOT;
      Integer integer0 = new Integer(1470);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(2686L, (Chronology) null, locale0, integer0, 1320);
      dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "D-aOtR#:#SHPq`7[6", 2);
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      StringBuffer stringBuffer0 = new StringBuffer();
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, (ReadablePartial) null, locale0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        LocalDate.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(11);
      DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, 11);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendHourOfHalfday(8);
      // Undeclared exception!
      try { 
        LocalDate.parse("-C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-C\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-6), (-6));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7);
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      Locale locale0 = Locale.CHINESE;
      Integer integer0 = new Integer(46);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-6), chronology0, locale0, integer0, 292272992);
      dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, "UniversalS/MountainUTl)", 18);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Partial partial0 = new Partial(dateTimeFieldType0, 10);
      MockFileWriter mockFileWriter0 = new MockFileWriter("CE", true);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      Integer integer0 = new Integer(10);
      Locale locale0 = Locale.forLanguageTag("A");
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = gJChronology0.withZone((DateTimeZone) null);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(chronology0);
      Integer integer1 = new Integer(7);
      Integer integer2 = Integer.getInteger("US/Pacific$AH0z?vP[", integer1);
      dateTimeFormatter2.withPivotYear(integer2);
      dateTimeFormatter2.printTo((Writer) mockFileWriter0, (long) 1760);
      YearMonth.now();
      Locale locale1 = Locale.FRANCE;
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTimeFieldType.yearOfEra();
      Locale locale0 = Locale.ROOT;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      MonthDay monthDay1 = monthDay0.withChronologyRetainFields((Chronology) null);
      Locale locale1 = Locale.CANADA_FRENCH;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, (Chronology) null, locale1, (Integer) 1, 1);
      Locale locale2 = Locale.ITALY;
      StringBuffer stringBuffer0 = new StringBuffer();
      MonthDay monthDay2 = new MonthDay();
      DateTimeFormatterBuilder.TimeZoneId.values();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 1, false);
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) monthDay1, locale0);
      dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, "}~CoZ2s4<@", 86399999);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendSecondOfDay(2087);
      dateTimeFormatterBuilder0.canBuildFormatter();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekText();
      // Undeclared exception!
      try { 
        LocalDate.parse("-Cw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-Cw\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      dateTimeFormatterBuilder0.toParser();
      DateTimeFieldType.weekyear();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        LocalDate.parse("]iecZc{v|`\"+f%v_@;v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"]iecZc{v|`\"+f%v_@;v\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-340), hashMap0);
      dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Locale locale0 = Locale.ROOT;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-1238), (-3));
      MonthDay monthDay0 = new MonthDay();
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) monthDay0, locale0);
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("en", "", true, 32, 32);
      dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendDayOfWeekText();
      dateTimeFormatterBuilder0.appendCenturyOfEra(1000, 1000);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeFormatterBuilder.TimeZoneId.values();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Locale locale0 = Locale.PRC;
      StringBuffer stringBuffer0 = new StringBuffer();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 4, 4);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.LocalTime", "en", false, 20587500, 20587500);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.joda.time.LocalTime", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "en");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Locale locale0 = Locale.US;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) printWriter0, (-1812L), (Chronology) gJChronology0, 20587500, (DateTimeZone) fixedDateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      dateTimeFormatterBuilder1.appendMinuteOfDay(0);
      int int0 = 366;
      dateTimeFormatterBuilder1.appendSecondOfMinute(20);
      dateTimeFormatterBuilder1.canBuildFormatter();
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendEraText();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMillisOfDay((-1061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F9)8mk9@");
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("F9)8mk9@", "F9)8mk9@", true, 722, 722);
      Locale locale0 = Locale.ITALY;
      Integer integer0 = new Integer(1486);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(722, (Chronology) null, locale0, integer0, 3);
      dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, "US/Michigan/=!s=hYwE", 3);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone.forOffsetMillis((-1249));
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 1163);
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("u", "u", true, 1, 1163);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (long) 1, (Chronology) ethiopicChronology0, (-1249), dateTimeZone0, (Locale) null);
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Locale locale0 = Locale.forLanguageTag("");
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, ethiopicChronology0, locale0, (Integer) 1, 88);
      locale0.hasExtensions();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) 1, (Chronology) ethiopicChronology0, (-1825), dateTimeZone0, locale0);
      dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, "S/MountainUTl)", 1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.canBuildFormatter();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedSignedDecimal(dateTimeFieldType0, (-123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -123
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("R.QqM:iDwh", "R.QqM:iDwh", false, 1, 1);
      Locale locale0 = Locale.FRENCH;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      CopticChronology.getInstance(dateTimeZone0, 1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (long) 1, (Chronology) copticChronology0, (-907), dateTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendTwoDigitWeekyear(99);
      BuddhistChronology.getInstance();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-388), true);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      Locale locale0 = Locale.ENGLISH;
      Integer integer0 = new Integer(2116);
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((-388), chronology0, locale0, integer0, (-388));
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, "US/HawaiiS/MountainUTl)", (-388));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      // Undeclared exception!
      try { 
        DateTime.parse("9,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9,\" is malformed at \",\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendYearOfEra(2107, 2107);
      UTCProvider uTCProvider0 = new UTCProvider();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("org.joda.time.convert.LongConverter", "Parsing is not supported", true, 60, 60);
      StringBuffer stringBuffer0 = new StringBuffer("org.joda.time.convert.LongConverter");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      Chronology chronology0 = buddhistChronology0.withUTC();
      Locale locale0 = Locale.GERMANY;
      locale0.stripExtensions();
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (-53L), chronology0, 10209375, (DateTimeZone) null, locale0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MIT");
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Chronology chronology0 = buddhistChronology0.withUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Locale locale0 = Locale.ITALIAN;
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (-185L), chronology0, 13, dateTimeZone0, locale0);
  }
}

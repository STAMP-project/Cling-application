/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:14:30 GMT 2019
 */

package org.apache.commons.math.optimization;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.CostFunction;
import org.apache.commons.math.optimization.MultiDirectional;
import org.apache.commons.math.optimization.NelderMead;
import org.apache.commons.math.optimization.PointCostPair;
import org.apache.commons.math.random.GaussianRandomGenerator;
import org.apache.commons.math.random.JDKRandomGenerator;
import org.apache.commons.math.random.RandomAdaptor;
import org.apache.commons.math.random.RandomVectorGenerator;
import org.apache.commons.math.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math.random.UniformRandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DirectSearchOptimizer_ESTest extends DirectSearchOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      assertNotNull(nelderMead0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1518.5, (-1.0), (-1.0), (-1.0), 2370.0).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      double[] doubleArray0 = new double[1];
      nelderMead0.minimize(costFunction0, 2370, convergenceChecker0, doubleArray0, doubleArray0, 961, (long) 2370);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      assertNotNull(nelderMead0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-619.52092869), (-619.52092869), (-1172.4), (-1172.4), (-619.52092869)).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      double[] doubleArray0 = new double[1];
      nelderMead0.minimize(costFunction0, 2370, convergenceChecker0, doubleArray0, doubleArray0, 961, (long) 2370);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      assertNotNull(nelderMead0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2245.027, 2356.5004, 2356.5004, 2245.027, 2245.027).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, true).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      double[] doubleArray0 = new double[1];
      PointCostPair pointCostPair0 = nelderMead0.minimize(costFunction0, (-1), convergenceChecker0, doubleArray0, doubleArray0, 961, (long) (-1));
      assertEquals(2245.027, pointCostPair0.getCost(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(pointCostPair0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      assertNotNull(nelderMead0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-389.7774114374)).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        nelderMead0.minimize(costFunction0, 2370, convergenceChecker0, doubleArray0, doubleArray0, (-260), (long) (-260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[4][0];
      MultiDirectional multiDirectional0 = new MultiDirectional((-1), (-1.0));
      assertNotNull(multiDirectional0);
      
      // Undeclared exception!
      try { 
        multiDirectional0.minimize(costFunction0, (-1), convergenceChecker0, doubleArray0, (-1), 2225L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be postive
         //
         verifyException("org.apache.commons.math.linear.RealMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      assertNotNull(nelderMead0);
      
      // Undeclared exception!
      try { 
        nelderMead0.getMinima();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.DirectSearchOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      assertNotNull(nelderMead0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      double[][] doubleArray0 = new double[7][0];
      try { 
        nelderMead0.minimize(costFunction0, (-1), convergenceChecker0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // none of the 1 start points lead to convergence
         //
         verifyException("org.apache.commons.math.optimization.DirectSearchOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      //  // Unstable assertion: assertNotNull(multiDirectional0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      //  // Unstable assertion: assertNotNull(jDKRandomGenerator0);
      
      GaussianRandomGenerator gaussianRandomGenerator0 = new GaussianRandomGenerator(jDKRandomGenerator0);
      //  // Unstable assertion: assertEquals(0.1, gaussianRandomGenerator0.nextNormalizedDouble(), 0.01);
      //  // Unstable assertion: assertNotNull(gaussianRandomGenerator0);
      
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(0, gaussianRandomGenerator0);
      //  // Unstable assertion: assertEquals(0.3, gaussianRandomGenerator0.nextNormalizedDouble(), 0.01);
      //  // Unstable assertion: assertNotNull(uncorrelatedRandomVectorGenerator0);
      
      try { 
        multiDirectional0.minimize(costFunction0, 0, convergenceChecker0, (RandomVectorGenerator) uncorrelatedRandomVectorGenerator0, 270);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // none of the 270 start points lead to convergence
         //
         verifyException("org.apache.commons.math.optimization.DirectSearchOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      //  // Unstable assertion: assertNotNull(multiDirectional0);
      
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      //  // Unstable assertion: assertNotNull(jDKRandomGenerator0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(jDKRandomGenerator0);
      //  // Unstable assertion: assertNotNull(randomAdaptor0);
      
      UniformRandomGenerator uniformRandomGenerator0 = new UniformRandomGenerator(randomAdaptor0);
      //  // Unstable assertion: assertEquals(0.5, randomAdaptor0.nextDouble(), 0.01);
      //  // Unstable assertion: assertEquals(0.4, randomAdaptor0.nextGaussian(), 0.01);
      //  // Unstable assertion: assertEquals((-0.6928203230275509), uniformRandomGenerator0.nextNormalizedDouble(), 0.01);
      //  // Unstable assertion: assertNotNull(uniformRandomGenerator0);
      
      UncorrelatedRandomVectorGenerator uncorrelatedRandomVectorGenerator0 = new UncorrelatedRandomVectorGenerator(1015, uniformRandomGenerator0);
      //  // Unstable assertion: assertEquals(0.0, randomAdaptor0.nextGaussian(), 0.01);
      //  // Unstable assertion: assertEquals(0.1, randomAdaptor0.nextDouble(), 0.01);
      //  // Unstable assertion: assertEquals(1.3856406460551018, uniformRandomGenerator0.nextNormalizedDouble(), 0.01);
      //  // Unstable assertion: assertNotNull(uncorrelatedRandomVectorGenerator0);
      
      // Undeclared exception!
      multiDirectional0.minimize(costFunction0, (-2146885049), convergenceChecker0, (RandomVectorGenerator) uncorrelatedRandomVectorGenerator0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      CostFunction costFunction0 = mock(CostFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(costFunction0).cost(any(double[].class));
      ConvergenceChecker convergenceChecker0 = mock(ConvergenceChecker.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(convergenceChecker0).converged(any(org.apache.commons.math.optimization.PointCostPair[].class));
      double[] doubleArray0 = new double[1];
      try { 
        nelderMead0.minimize(costFunction0, 813, convergenceChecker0, doubleArray0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // none of the 1 start points lead to convergence
         //
         verifyException("org.apache.commons.math.optimization.DirectSearchOptimizer", e);
      }
  }
}

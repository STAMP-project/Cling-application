/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 14:28:13 GMT 2019
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.commons.lang3.concurrent.BackgroundInitializer;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiBackgroundInitializer_ESTest extends MultiBackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getException("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name 
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(scheduledThreadPoolExecutor0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      Callable<Runnable> callable1 = (Callable<Runnable>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<Runnable> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Runnable>(callable1, scheduledThreadPoolExecutor0);
      assertFalse(callableBackgroundInitializer1.isStarted());
      assertNotNull(callableBackgroundInitializer1);
      
      multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", callableBackgroundInitializer1);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer1.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults1 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.isException("Uncaught exception handler must not be null!");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name Uncaught exception handler must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      boolean boolean0 = multiBackgroundInitializer0.start();
      assertTrue(boolean0);
      assertTrue(multiBackgroundInitializer0.isStarted());
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer((String) null, (BackgroundInitializer<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name of child initializer must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      multiBackgroundInitializer0.addInitializer("", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults1 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      
      boolean boolean1 = multiBackgroundInitializer_MultiBackgroundInitializerResults1.isException("");
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      
      boolean boolean1 = multiBackgroundInitializer0.start();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(multiBackgroundInitializer0.isStarted());
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("s", callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // addInitializer() must not be called after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.isException("Callable must not be null!");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name Callable must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      int int0 = forkJoinPool0.getParallelism();
      assertEquals(40, int0);
      
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(callable0).call();
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      assertFalse(callableBackgroundInitializer0.isStarted());
      assertNotNull(callableBackgroundInitializer0);
      
      multiBackgroundInitializer0.addInitializer("", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertFalse(callableBackgroundInitializer0.isStarted());
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults1 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer_MultiBackgroundInitializerResults1.equals((Object)multiBackgroundInitializer_MultiBackgroundInitializerResults0));
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults1.isSuccessful());
      assertNotSame(multiBackgroundInitializer_MultiBackgroundInitializerResults1, multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults1);
      
      boolean boolean1 = multiBackgroundInitializer0.start();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(multiBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertNotNull(multiBackgroundInitializer0);
      
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
      assertNotNull(multiBackgroundInitializer_MultiBackgroundInitializerResults0);
      
      boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful();
      assertTrue(boolean0);
      assertFalse(multiBackgroundInitializer0.isStarted());
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.isException("LB=QFv.-1@=+es\"e");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name LB=QFv.-1@=+es\"e
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames();
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      multiBackgroundInitializer0.addInitializer("('Bg?-B0(", callableBackgroundInitializer0);
      assertFalse(multiBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.initialize();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getResultObject("org.apache.commons.lang3.concurrent.BasicThreadFactory");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name org.apache.commons.lang3.concurrent.BasicThreadFactory
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer_MultiBackgroundInitializerResults0.getInitializer((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No child initializer with name null
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$1", (BackgroundInitializer<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Child initializer must not be null!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }
}

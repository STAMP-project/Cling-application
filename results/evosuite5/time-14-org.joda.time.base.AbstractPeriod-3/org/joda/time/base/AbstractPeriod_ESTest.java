/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 03:04:26 GMT 2019
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractPeriod_ESTest extends AbstractPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4294967295L, 4294967295L);
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodPrinter0).calculatePrintedLength(any(org.joda.time.ReadablePeriod.class) , any(java.util.Locale.class));
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      String string0 = mutablePeriod0.toString(periodFormatter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, (-2072), 6, 1000);
      mutablePeriod0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      MutablePeriod mutablePeriod1 = new MutablePeriod(instant0, (ReadableInstant) null, periodType0);
      boolean boolean0 = mutablePeriod0.equals(mutablePeriod1);
      assertFalse(boolean0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Instant instant1 = instant0.plus(1462L);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant1, instant0, periodType0);
      MutablePeriod mutablePeriod1 = new MutablePeriod(instant1, (ReadableInstant) null, periodType0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      
      Duration duration0 = new Duration(1462L, 0L);
      mutablePeriod1.setPeriod((ReadableDuration) duration0);
      boolean boolean0 = mutablePeriod0.equals(mutablePeriod1);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      boolean boolean0 = mutablePeriod0.equals(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.SEVEN;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      boolean boolean0 = mutablePeriod0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
      boolean boolean0 = mutablePeriod0.equals(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period((-531L), 17, periodType0, iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      int int0 = period0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = new Period(87, 87, 1, (-3643));
      DurationFieldType[] durationFieldTypeArray0 = period0.getFieldTypes();
      assertEquals(8, durationFieldTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = new Period(2, 87, (-1694), (-1694));
      Months months0 = Months.THREE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = period0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Days days0 = minutes0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Period period0 = new Period(2, 87, 2, 2);
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3026, 3026);
      String string0 = mutablePeriod0.toString((PeriodFormatter) null);
      assertEquals("PT0S", string0);
  }
}

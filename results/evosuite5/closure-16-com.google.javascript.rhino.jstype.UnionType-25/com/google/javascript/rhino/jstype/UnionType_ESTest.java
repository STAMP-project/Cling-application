/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:10:30 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UnionType_ESTest extends UnionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.getPropertyType("Unknown class name");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) errorFunctionType0, (JSType) indexedType0, (JSType) indexedType0, (JSType) templateType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.hasAnyTemplate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/1HB@@out^");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.hasAnyTemplate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      jSType0.matchConstraint(noResolvedType0);
      assertFalse(jSType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/1HB@@out^");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, true);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", (Node) null, instanceObjectType0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, enumType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) enumElementType0, (JSType) errorFunctionType0, (JSType) enumElementType0, (JSType) instanceObjectType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.collapseUnion();
      assertTrue(enumElementType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType jSType1 = jSType0.collapseUnion();
      assertFalse(jSType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/1HB@@out^");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "/1HB@@out^", (Node) null, instanceObjectType0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, enumType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "yu\"]CQ");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) arrowType0, (JSType) enumElementType0, (JSType) errorFunctionType0, (JSType) enumType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.collapseUnion();
      assertFalse(enumElementType0.hasCachedValues());
      assertNotNull(jSType0);
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber(0.0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, true);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, instanceObjectType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, (JSType) noResolvedType0, (JSType) instanceObjectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.collapseUnion();
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) indexedType0, (JSType) noType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.collapseUnion();
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = unionType0.setValidator(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      String string0 = jSType0.toDebugHashCodeString();
      assertEquals("{(function (this:me, {8}): me,{5})}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "86$~S{\u0002");
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) indexedType0, (JSType) errorFunctionType0);
      indexedType0.setResolvedTypeInternal(errorFunctionType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of(jSType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      unionType0.alternates = (Collection<JSType>) immutableList0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        unionType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      JSType jSType0 = noResolvedType0.getPropertyType("Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) indexedType0, jSType0, (JSType) noResolvedType0);
      indexedType0.setResolvedTypeInternal(jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
      assertTrue(jSType0.isResolved());
      assertTrue(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      unionType0.resolveInternal((ErrorReporter) null, noResolvedType0);
      assertTrue(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderInequality(noResolvedType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a type name", noResolvedType0, true);
      jSType0.getTypesUnderEquality(prototypeObjectType0);
      assertTrue(prototypeObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "])");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.getPropertyType("Not declared as a type name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, jSType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      BooleanLiteralSet booleanLiteralSet0 = jSType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      NoType noType0 = (NoType)jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) indexedType0, (JSType) noType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.getGreatestSubtype((JSType) unionType0, (JSType) allType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) indexedType0, (JSType) noType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unionType0.isSubtype(unknownType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) indexedType0, (JSType) noResolvedType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getTypesUnderShallowEquality(indexedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      String string0 = jSType0.toAnnotationString();
      assertEquals("(?|null)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.getPropertyType("Unknown class name");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) errorFunctionType0, (JSType) indexedType0, (JSType) indexedType0, (JSType) templateType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getRestrictedUnion(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) indexedType0, (JSType) noType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.contains(indexedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalNullableType(indexedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = unionType0.contains(errorFunctionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType jSType1 = jSTypeRegistry1.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.isEquivalentTo(jSType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) indexedType0, (JSType) noResolvedType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(indexedType0);
      boolean boolean0 = unionType0.isEquivalentTo(jSType0);
      assertFalse(jSType0.equals((Object)unionType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = errorFunctionType0.getPropertyType("Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) indexedType0, (JSType) indexedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isEquivalentTo((JSType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) indexedType0, (JSType) noType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, indexedType0);
      JSType jSType0 = unionType0.meet(arrowType0);
      assertNotSame(noType0, jSType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) indexedType0, jSType0, (JSType) noType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.meet(noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) noType0, (JSType) noType0, (List<JSType>) immutableList0);
      unionType0.meet(functionType0);
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      JSType jSType1 = unionType0.meet(jSType0);
      assertFalse(jSType1.isRecordType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType jSType1 = jSType0.getLeastSupertype(noResolvedType0);
      assertSame(jSType1, jSType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = errorFunctionType0.getPropertyType("Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) indexedType0, (JSType) indexedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      UnknownType unknownType0 = (UnknownType)unionType0.getLeastSupertype(errorFunctionType0);
      assertFalse(unknownType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", (-406109244), 1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getLeastSupertype(namedType0);
      assertFalse(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNullable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.isNullable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      noResolvedType0.testForEqualityHelper(jSType0, jSType0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType jSType1 = jSType0.restrictByNotNullOrUndefined();
      assertTrue(jSType1.isNullable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      ObjectType objectType0 = jSType0.dereference();
      assertFalse(objectType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.canBeCalled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noType0, (JSType) noType0, (JSType) indexedType0, (JSType) noType0, (JSType) indexedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canBeCalled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.common.base.CharMatcher$5", "", 1470, 1470);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", (Node) null, namedType0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, enumType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) enumType0, (JSType) namedType0, (JSType) enumElementType0, (JSType) namedType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canAssignTo(unionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.canAssignTo(noResolvedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = errorFunctionType0.getPropertyType("Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) indexedType0, (JSType) indexedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      UnknownType unknownType0 = (UnknownType)unionType0.findPropertyType("");
      assertEquals("?", unknownType0.getReferenceName());
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")");
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      JSType jSType1 = jSType0.findPropertyType("rl52?P'Pt*G2");
      assertNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/1HB@@out^");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, false);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "/1HB@@out^", (Node) null, instanceObjectType0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, enumType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, instanceObjectType0, "yu\"]CQ");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) arrowType0, (JSType) arrowType0, (JSType) enumElementType0, (JSType) errorFunctionType0, (JSType) enumType0, (JSType) enumElementType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesObjectContext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      boolean boolean0 = unionType0.matchesObjectContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/1HB@@out^");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesStringContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.matchesStringContext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MZ");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesNumberContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      boolean boolean0 = jSType0.matchesInt32Context();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add(jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertFalse(unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType jSType1 = jSType0.getLeastSupertype(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType jSType1 = jSType0.findPropertyType("pattern.flags");
      assertFalse(jSType1.isNoType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      Visitor<InstanceObjectType> visitor0 = (Visitor<InstanceObjectType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseUnionType(any(com.google.javascript.rhino.jstype.UnionType.class));
      InstanceObjectType instanceObjectType0 = jSType0.visit(visitor0);
      assertNull(instanceObjectType0);
  }
}

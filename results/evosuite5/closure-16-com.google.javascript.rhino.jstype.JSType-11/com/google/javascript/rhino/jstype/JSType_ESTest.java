/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 21:49:21 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
      errorFunctionType0.canTestForShallowEqualityWith(functionType0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      errorFunctionType0.isNominalConstructor();
      templateType0.collapseUnion();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType("Unknown class name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeRegistry0.createNullableType(voidType1);
      JSType jSType0 = JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) voidType0);
      errorFunctionType0.canTestForEqualityWith(jSType0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry1);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      templateType0.isGlobalThisType();
      jSTypeRegistry1.createDefaultObjectUnion(templateType0);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("void", (Node) null);
      functionType0.toMaybeFunctionType();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(voidType0);
      voidType0.toDebugHashCodeString();
      jSType_TypePair0.typeB.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      errorFunctionType0.isRegexpType();
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      errorFunctionType0.isNominalConstructor();
      templateType0.collapseUnion();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(voidType0);
      jSType_TypePair0.typeA.clearResolved();
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.autoboxesTo();
      nullType0.testForEquality(voidType0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderShallowInequality(templateType0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(templateType0);
      voidType0.getTypesUnderInequality(jSType0);
      voidType0.toDebugHashCodeString();
      noResolvedType0.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      templateType0.isGlobalThisType();
      templateType0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{;,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      recordType0.testForEqualityHelper(errorFunctionType0, voidType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      errorFunctionType0.getTypesUnderShallowInequality(noObjectType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "Not declared as a type name");
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getTypeOfThis();
      JSType.safeResolve((JSType) null, (ErrorReporter) null, (StaticScope<JSType>) null);
      ImmutableList.of((JSType) noObjectType0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "n}%9PGuS>>,0Vn");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry1);
      JSType jSType1 = noResolvedType0.getPropertyType("Named type with empty name component");
      voidType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
      ImmutableList.of((JSType) errorFunctionType0, jSType0, jSType0, (JSType) voidType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) voidType0, (JSType) errorFunctionType0, jSType1, (JSType) voidType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      unionType0.getTypesUnderEquality(noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "com.google.javascript.rhino.jstype.JSType$2");
      enumElementType0.dereference();
      enumElementType0.isEnumType();
      noResolvedType0.getLeastSupertype(enumElementType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "\u00A0\u180E\u202F", "\u00A0\u180E\u202F", 3, 3);
      JSType jSType0 = JSType.getLeastSupertype((JSType) namedType0, (JSType) namedType0);
      namedType0.getTypesUnderShallowEquality(jSType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Not declared as a type name");
      enumElementType0.getParentScope();
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
      namedType0.isSubtype(enumElementType0);
      enumElementType0.dereference();
      simpleErrorReporter0.error("WJ}-{U2Wi@hVsd-", "Unknown class name", 1, (-1));
      enumElementType0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      voidType0.isNominalConstructor();
      noResolvedType0.isSubtype(templateType0);
      templateType0.collapseUnion();
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) noResolvedType0, jSTypeArray0);
      functionType0.getLeastSupertype(voidType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry1, functionType0, templateType0);
      noResolvedType0.isSubtype(indexedType0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      templateType0.isGlobalThisType();
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      jSType0.isNominalConstructor();
      noResolvedType0.isSubtype(jSType0);
      templateType0.collapseUnion();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "\u00A0\u180E\u202F", "\u00A0\u180E\u202F", 3, 3);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Unknown class name");
      enumElementType0.getParentScope();
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = (JSType) namedType0;
      jSTypeArray0[2] = (JSType) enumElementType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) namedType0, jSTypeArray0);
      functionType0.getAllImplementedInterfaces();
      jSTypeRegistry0.clearTemplateTypeNames();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry1, "");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry1, "E6X");
      templateType0.hasDisplayName();
      errorFunctionType0.getReturnType();
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      jSTypeRegistry0.createNativeAnonymousObjectType();
      TemplateType templateType1 = new TemplateType(jSTypeRegistry1, "Unknown class name");
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      Iterable<ObjectType> iterable0 = new TreeSet<ObjectType>();
      EnumElementType enumElementType1 = null;
      try {
        enumElementType1 = new EnumElementType(jSTypeRegistry0, jSTypeArray0[0], "Not declared as a type name");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.isNullable();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      recordType0.testForEqualityHelper(enumElementType0, errorFunctionType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = enumElementType0.getLeastSupertype(errorFunctionType0);
      jSType0.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      recordType0.testForEqualityHelper(enumElementType0, errorFunctionType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      errorFunctionType0.getSource();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, noObjectType0);
      JSType.TypePair jSType_TypePair0 = enumElementType0.getTypesUnderShallowInequality(arrowType0);
      jSType_TypePair0.typeB.matchesStringContext();
      JSType.safeResolve(jSType_TypePair0.typeB, (ErrorReporter) null, noObjectType0);
      ImmutableList.of((JSType) arrowType0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      simpleErrorReporter0.error((String) null, "com.google.javascript.rhino.jstype.JSType$TypePair", (-1880), 0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry1.createNativeAnonymousObjectType();
      jSTypeRegistry1.getGreatestSubtypeWithProperty(errorFunctionType0, "2/T?5{L,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.canTestForShallowEqualityWith(errorFunctionType0);
      JSType jSType0 = JSType.filterNoResolvedType(errorFunctionType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) errorFunctionType0, (JSType) voidType0, (JSType) voidType0, jSType0, jSType0, jSType0, jSType0, jSType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      unionType0.getTypesUnderEquality(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertNotNull(templateType0);
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertNotNull(jSType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.toMaybeFunctionType();
      errorFunctionType0.getPossibleToBooleanOutcomes();
      errorFunctionType0.getTypesUnderShallowInequality(jSType0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      String string0 = JSType.NOT_A_CLASS;
      voidType0.isNominalConstructor();
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      JSType.toMaybeTemplateType(jSType0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      unknownType0.getPropertyType("Unknown class name");
      JSType.toMaybeFunctionType((JSType) null);
      noResolvedType0.isNoObjectType();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      numberType0.equals(voidType0);
      numberType0.matchesStringContext();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "X>b!>TPrHo");
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      functionType0.supAndInfHelper(errorFunctionType0, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType("Unknown class name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType1.getTypesUnderInequality(errorFunctionType0);
      jSType_TypePair0.typeB.getRestrictedTypeGivenToBooleanOutcome(false);
      voidType0.toDebugHashCodeString();
      voidType0.isNominalConstructor();
      errorFunctionType0.hasOwnProperty("");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry1);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      noResolvedType0.isNominalConstructor();
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry1);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      modificationVisitor0.caseAllType();
      TemplateType templateType1 = new TemplateType(jSTypeRegistry2, "Not declared as a type name");
      JSType.toMaybeFunctionType((JSType) noResolvedType0);
      JSType.isEquivalent((JSType) null, (JSType) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      ObjectType objectType0 = enumElementType0.dereference();
      enumElementType0.isEnumType();
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType.safeResolve(voidType0, (ErrorReporter) null, objectType0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType((String) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(voidType1);
      JSType jSType0 = modificationVisitor0.caseStringType();
      voidType0.toDebugHashCodeString();
      jSType0.canBeCalled();
      // Undeclared exception!
      try { 
        ImmutableList.of(jSType0, jSType0, jSType_TypePair0.typeA, (JSType) null, (JSType) errorFunctionType0, jSType_TypePair0.typeA, jSType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
      jSTypeRegistry0.canPropertyBeDefined(jSType1, "Not declared as a constructor");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType.isSubtypeHelper(numberType0, numberType0);
      JSType.TypePair jSType_TypePair0 = jSType1.getTypesUnderEquality(jSType1);
      jSType_TypePair0.typeA.hasDisplayName();
      jSType0.toMaybeEnumType();
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, jSType_TypePair0.typeB);
      // Undeclared exception!
      try { 
        indexedType0.toMaybeFunctionType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      voidType0.isSubtype(templateType0);
      templateType0.isGlobalThisType();
      templateType0.getJSDocInfo();
      templateType0.getImplicitPrototype();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.filterNoResolvedType(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      templateType0.getTypesUnderShallowInequality(voidType0);
      templateType0.isGlobalThisType();
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.testForEquality(voidType0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "\u180EH", "\u180EH", 8, 8);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Not declared as a type name");
      enumElementType0.getParentScope();
      enumElementType0.getSlot("Not declared as a type name");
      enumElementType0.dereference();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
      errorFunctionType0.getSource();
      namedType0.defineDeclaredProperty("Unknown class name", enumElementType0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "U&$US5`UC`");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, (JSType) templateType0, jSType0, jSType0, (JSType) voidType0, (JSType) templateType0, (JSType) templateType0, jSType0, (JSType) templateType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getTypesUnderEquality(templateType0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry1);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      noResolvedType0.matchesNumberContext();
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry1);
      TemplateType templateType1 = new TemplateType(jSTypeRegistry2, "ople");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      unknownType0.getPropertyType("Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) noResolvedType0, (JSType) unknownType0, (JSType) unknownType0, (JSType) templateType0, (JSType) templateType1, (JSType) noResolvedType1);
      Node node0 = jSTypeRegistry2.createParametersWithVarArgs((List<JSType>) immutableList0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, templateType0);
      JSType.toMaybeFunctionType((JSType) arrowType0);
      JSType.isEquivalent(templateType1, (JSType) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "\u00A0\u180E\u202F", "\u00A0\u180E\u202F", 8, 8);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "Not declared as a type name");
      enumElementType0.equals("\u00A0\u180E\u202F");
      enumElementType0.getParentScope();
      enumElementType0.getOwnSlot("Not declared as a type name");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, namedType0, enumElementType0);
      Node.newString("Unknown class name");
      enumElementType0.dereference();
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.getPossibleToBooleanOutcomes();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      Node node0 = Node.newString(1, "Named type with empty name component");
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, voidType0);
      JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) arrowType0);
      JSType jSType2 = JSType.filterNoResolvedType(arrowType0);
      arrowType0.matchesUint32Context();
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", (String) null, 40, (-1));
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType1, (JSType) namedType0, jSType2, (JSType) arrowType0, jSType2, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, jSType0, jSType2);
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      Node.newNumber(0.0);
      namedType0.getTypesUnderShallowInequality(jSType2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "uGtEePNv);wl6v");
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, errorFunctionType0);
      functionType1.getAllImplementedInterfaces();
      jSTypeRegistry0.registerPropertyOnType("2/T?5{L,W%Be27uh", functionType1);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      templateType0.getGreatestSubtype(errorFunctionType0);
      templateType0.isUnknownType();
      errorFunctionType0.autoboxesTo();
      functionType1.isRecordType();
      templateType0.getRestrictedTypeGivenToBooleanOutcome(true);
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      functionType0.isBooleanObjectType();
      objectType0.isUnknownType();
      templateType1.getReferenceName();
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType1);
      functionType0.setImplementedInterfaces(immutableList0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      UnionType unionType1 = unionType0.toMaybeUnionType();
      unionType0.matchesObjectContext();
      unionType0.findPropertyType("Named type with empty name component");
      unionType1.toStringHelper(false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      recordType0.getGreatestSubtypeHelper(errorFunctionType0);
      JSType jSType0 = errorFunctionType0.getLeastSupertype(recordType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      ImmutableList.of(jSType0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      errorFunctionType0.isNominalConstructor();
      templateType0.collapseUnion();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noResolvedType0.getImplementedInterfaces();
      JSType.getLeastSupertype((JSType) noResolvedType0, (JSType) noType0);
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      Node.newString("Unknown class name");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      errorFunctionType0.hasAnyTemplate();
      recordType0.matchesNumberContext();
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType.safeResolve(errorFunctionType0, (ErrorReporter) null, recordType0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      Node node0 = Node.newString(1, "Named type with empty name component");
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, voidType0);
      JSType jSType1 = JSType.getLeastSupertype(jSType0, (JSType) arrowType0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType1, (JSType) arrowType0, jSType0, jSType1, (JSType) voidType0, (JSType) voidType0, (JSType) arrowType0, jSType0, (JSType) arrowType0, (JSType) voidType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry1, unionType0, "Not declared as a type name");
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getParentScope();
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry1, enumElementType1, enumElementType1);
      node0.putBooleanProp(1, false);
      voidType0.differsFrom(jSType0);
      Node.newString("{");
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry1.findCommonSuperObject(enumElementType1, enumElementType1);
      IndexedType indexedType1 = new IndexedType(jSTypeRegistry0, noType0, objectType0);
      ObjectType objectType1 = enumElementType0.dereference();
      arrowType0.isSubtype(objectType1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.createNamedType("", (String) null, 0, (-585));
      jSType0.isOrdinaryFunction();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{;,W%Be27uh");
      errorFunctionType0.hasDisplayName();
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(errorFunctionType0);
      Visitor<NoObjectType> visitor0 = (Visitor<NoObjectType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseNoObjectType();
      jSType0.visit(visitor0);
      enumElementType0.getLeastSupertype(voidType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      instanceObjectType0.getCtorImplementedInterfaces();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      voidType1.getTypesUnderInequality(enumElementType0);
      voidType1.toDebugHashCodeString();
      errorFunctionType0.isNominalConstructor();
      enumElementType0.getOwnPropertyJSDocInfo("{");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      RecordType recordType1 = recordType0.toMaybeRecordType();
      recordType1.getGreatestSubtypeHelper(templateType0);
      recordType0.getLeastSupertype(templateType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType("Unknown class name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      voidType1.getTypesUnderInequality(errorFunctionType0);
      voidType0.toDebugHashCodeString();
      voidType0.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(errorFunctionType0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) voidType0, jSType1, (JSType) errorFunctionType0, jSType1, (JSType) voidType0, jSType1, jSType0, jSType1, (JSType) errorFunctionType0);
      modificationVisitor0.caseUnknownType();
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      unionType0.getTypesUnderEquality(jSType1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      errorFunctionType0.isNominalConstructor();
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      templateType1.getLeastSupertype(templateType0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", 682, 682);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, namedType0, "ECn;7");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(namedType0, "Named type with empty name component");
      recordType0.getGreatestSubtypeHelper(jSType0);
      JSType jSType1 = enumElementType0.getLeastSupertype(recordType0);
      jSType1.differsFrom(namedType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      ImmutableList.of((JSType) namedType0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.hasDisplayName();
      noResolvedType0.getExtendedInterfaces();
      templateType0.isNominalConstructor();
      templateType0.collapseUnion();
      Visitor<NoObjectType> visitor0 = (Visitor<NoObjectType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseNoType();
      noResolvedType0.visit(visitor0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(templateType0);
      ImmutableList.of(jSType_TypePair0.typeA);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      objectType0.isRegexpType();
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType("s");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseFunctionType(errorFunctionType0);
      jSType0.canTestForShallowEqualityWith(objectType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "");
      enumElementType0.getParentScope();
      enumElementType0.getSlot("");
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry2, objectType0, enumElementType0);
      Node.newString("}+5xT|%,cuG%L[");
      enumElementType0.dereference();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(voidType0);
      recordType0.getLeastSupertype(jSType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.isNominalConstructor();
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType1 = unknownType0.getPropertyType("Not declared as a constructor");
      JSType.toMaybeFunctionType(jSType1);
      JSType.isEquivalent(templateType0, jSType0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      ObjectType objectType0 = ObjectType.cast(instanceObjectType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, (Node) null, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumType0.getJSDocInfo();
      enumElementType0.isNamedType();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      JSType.getGreatestSubtype((JSType) voidType0, (JSType) voidType0);
      voidType0.isStringObjectType();
      templateType0.isGlobalThisType();
      templateType0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      simpleErrorReporter0.error("Unknown class name", "Not declared as a type name", 323, (-18));
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(numberType0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) arrayList0);
      recordType0.isEquivalentTo(functionType0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, numberType0);
      parameterizedType0.isString();
      parameterizedType0.hasOwnProperty("Not declared as a constructor");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      unknownType0.testForEquality(parameterizedType0);
      functionType0.resolveInternal(simpleErrorReporter0, parameterizedType0);
      numberType0.getPossibleToBooleanOutcomes();
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "BOTH", (-11), 32);
      Node node0 = new Node(0);
      Node node1 = new Node((-968), node0, node0);
      namedType0.defineProperty("Not declared as a type name", unknownType0, false, node1);
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(namedType0, node0);
      hashMap0.put("}", recordTypeBuilder_RecordProperty0);
      namedType0.isPropertyTypeDeclared("_[1B]yH(bT<!z \"cs");
      jSType0.canTestForShallowEqualityWith(numberType0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      jSType0.setValidator(predicate0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(voidType0);
      ImmutableList.of(jSType_TypePair0.typeB);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      recordType0.testForEqualityHelper(enumElementType0, errorFunctionType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      enumElementType0.getLeastSupertype(errorFunctionType0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.canTestForEqualityWith(errorFunctionType0);
      noResolvedType0.getExtendedInterfaces();
      templateType0.autoboxesTo();
      errorFunctionType0.isNominalConstructor();
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(voidType1);
      voidType1.toDebugHashCodeString();
      jSType_TypePair0.typeB.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType.safeResolve(errorFunctionType0, (ErrorReporter) null, noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{;,%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(enumElementType0);
      recordType0.isInstanceType();
      enumElementType0.getLeastSupertype(jSType0);
      ImmutableList.of((JSType) voidType0);
      jSType0.isNominalConstructor();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-742));
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      
      Node node1 = Node.newNumber(885.89039320167, (-1184), 640);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      
      Node node2 = new Node(1024, node0, node1, node1);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals(1024, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isRecordType());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("!i3dlS", node2, recordType0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals(1024, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isRecordType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals(1024, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isRecordType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType1.isVoidType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.matchesNumberContext());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNullType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      
      EnumElementType enumElementType0 = enumType1.getElementsType();
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals(1024, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isRecordType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType1.isVoidType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.matchesNumberContext());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNullType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("!i3dlS", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertTrue(node1.isNumber());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertEquals(39, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isObjectLit());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNot());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isString());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertEquals(1024, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isVoid());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isRecordType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType1.isVoidType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNominalConstructor());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isAllType());
      assertFalse(enumType1.matchesNumberContext());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNullType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("!i3dlS", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType1.isAllType());
      assertTrue(enumElementType1.isNominalType());
      assertFalse(enumElementType1.isBooleanValueType());
      assertFalse(enumElementType1.isEnumType());
      assertFalse(enumElementType1.isTemplateType());
      assertTrue(enumElementType1.hasReferenceName());
      assertFalse(enumElementType1.isNativeObjectType());
      assertFalse(enumElementType1.hasCachedValues());
      assertFalse(enumElementType1.isCheckedUnknownType());
      assertFalse(enumElementType1.isFunctionType());
      assertFalse(enumElementType1.isNominalConstructor());
      assertFalse(enumElementType1.isNoType());
      assertTrue(enumElementType1.isEnumElementType());
      assertFalse(enumElementType1.isNoObjectType());
      assertFalse(enumElementType1.isNullType());
      assertEquals("!i3dlS", enumElementType1.getReferenceName());
      assertFalse(enumElementType1.isRecordType());
      assertFalse(enumElementType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType1.isNoResolvedType());
      assertFalse(enumElementType1.isFunctionPrototypeType());
      assertFalse(enumElementType1.isNumberValueType());
      assertFalse(enumElementType1.isUnionType());
      assertFalse(enumElementType1.isOrdinaryFunction());
      assertFalse(enumElementType1.isParameterizedType());
      assertFalse(enumElementType1.isVoidType());
      assertFalse(enumElementType1.isResolved());
      assertFalse(enumElementType1.isInterface());
      assertFalse(enumElementType1.isStringValueType());
      
      boolean boolean0 = enumElementType1.canAssignTo(enumType0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertSame(enumElementType0, enumElementType1);
      assertSame(enumElementType1, enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-742), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertNotNull(templateType0);
      
      boolean boolean0 = templateType0.isTheObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      
      boolean boolean1 = templateType0.isGlobalThisType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(boolean1 == boolean0);
      
      JSDocInfo jSDocInfo0 = templateType0.getJSDocInfo();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNotNull(iterable0);
      
      boolean boolean1 = errorFunctionType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(boolean1 == boolean0);
      
      TemplateType templateType1 = (TemplateType)templateType0.collapseUnion();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType1.getReferenceName());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isResolved());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isNominalConstructor());
      assertNotNull(templateType1);
      
      boolean boolean2 = templateType1.isPropertyTypeDeclared("2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean2);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType1.getReferenceName());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isResolved());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isParameterizedType());
      assertNotNull(voidType0);
      
      Node node0 = Node.newString(1, "Named type with empty name component");
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertEquals(1, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertNotNull(node0);
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertEquals(1, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertNotNull(arrowType0);
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) arrowType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertEquals(1, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertNotNull(jSType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertNotNull(noResolvedType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertEquals(1, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNumberValueType());
      assertTrue(indexedType0.isConstructor());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertTrue(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertNotNull(indexedType0);
      
      // Undeclared exception!
      try { 
        jSType0.getTypesUnderEquality(noResolvedType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(recordType0);
      
      boolean boolean0 = recordType0.isNumberValueType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test067()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertNotNull(voidType0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isResolved());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.equals((Object)voidType0));
      assertNotNull(voidType1);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(voidType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isResolved());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertNotNull(jSType_TypePair0);
      
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(voidType0, jSType0);
      assertNotSame(voidType0, voidType1);
      assertSame(jSType0, voidType0);
      assertNotSame(jSType0, voidType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(jSType0.equals((Object)voidType1));
      assertNotNull(jSType0);
      
      String string0 = voidType1.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("{264}", string0);
      assertNotSame(voidType1, voidType0);
      assertNotSame(voidType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isResolved());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.equals((Object)voidType0));
      assertFalse(voidType1.equals((Object)jSType0));
      assertNotNull(string0);
      
      boolean boolean0 = jSType_TypePair0.typeB.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertSame(voidType0, jSType0);
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertNotSame(voidType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isResolved());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertFalse(voidType1.equals((Object)jSType0));
      
      boolean boolean1 = jSType_TypePair0.typeB.matchesObjectContext();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean1);
      assertSame(voidType0, jSType0);
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertNotSame(voidType1, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isResolved());
      assertEquals("undefined", voidType1.getDisplayName());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.isConstructor());
      assertTrue(voidType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.matchesObjectContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertFalse(voidType1.equals((Object)jSType0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertNotNull(noResolvedType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noResolvedType0, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNoType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertNotNull(enumElementType0);
      
      boolean boolean0 = enumElementType0.isEnumType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNoType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isRecordType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertNotNull(noObjectType0);
      
      JSType jSType0 = noObjectType0.unboxesTo();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertNotNull(templateType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      
      simpleErrorReporter0.warning("Unknown class name", "Unknown class name", 1, 1);
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(iterable0);
      
      boolean boolean0 = templateType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      boolean boolean1 = noResolvedType0.isSubtype(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(boolean1 == boolean0);
      
      NullType[] nullTypeArray0 = new NullType[6];
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(nullType0);
      
      nullTypeArray0[0] = nullType0;
      NullType nullType1 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType1.isEnumElementType());
      assertTrue(nullType1.isNullType());
      assertFalse(nullType1.isNominalConstructor());
      assertFalse(nullType1.isBooleanValueType());
      assertFalse(nullType1.isVoidType());
      assertFalse(nullType1.isAllType());
      assertFalse(nullType1.isEnumType());
      assertTrue(nullType1.matchesNumberContext());
      assertFalse(nullType1.isFunctionPrototypeType());
      assertTrue(nullType1.isNullable());
      assertFalse(nullType1.isNumberValueType());
      assertFalse(nullType1.isUnionType());
      assertFalse(nullType1.isFunctionType());
      assertFalse(nullType1.isNominalType());
      assertFalse(nullType1.isNoObjectType());
      assertEquals("null", nullType1.getDisplayName());
      assertFalse(nullType1.isNoType());
      assertFalse(nullType1.isCheckedUnknownType());
      assertFalse(nullType1.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertFalse(nullType1.isConstructor());
      assertFalse(nullType1.isRecordType());
      assertFalse(nullType1.isNoResolvedType());
      assertFalse(nullType1.isStringValueType());
      assertTrue(nullType1.matchesStringContext());
      assertFalse(nullType1.isOrdinaryFunction());
      assertFalse(nullType1.isTemplateType());
      assertFalse(nullType1.isParameterizedType());
      assertFalse(nullType1.matchesObjectContext());
      assertFalse(nullType1.isResolved());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(nullType1.equals((Object)nullType0));
      assertNotNull(nullType1);
      
      simpleErrorReporter0.error("Unknown class name", "Not declared as a constructor", 1, 1);
      nullTypeArray0[1] = nullType1;
      NullType nullType2 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(nullType2.isInterface());
      assertFalse(nullType2.isNoObjectType());
      assertFalse(nullType2.isConstructor());
      assertFalse(nullType2.isNoType());
      assertFalse(nullType2.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType2.getPossibleToBooleanOutcomes());
      assertFalse(nullType2.isNoResolvedType());
      assertFalse(nullType2.isUnionType());
      assertFalse(nullType2.isFunctionType());
      assertFalse(nullType2.isNominalType());
      assertFalse(nullType2.isNumberValueType());
      assertEquals("null", nullType2.getDisplayName());
      assertFalse(nullType2.isCheckedUnknownType());
      assertTrue(nullType2.isNullType());
      assertFalse(nullType2.isNominalConstructor());
      assertFalse(nullType2.isBooleanValueType());
      assertFalse(nullType2.isFunctionPrototypeType());
      assertTrue(nullType2.isNullable());
      assertFalse(nullType2.isAllType());
      assertFalse(nullType2.isEnumType());
      assertFalse(nullType2.isVoidType());
      assertFalse(nullType2.isTemplateType());
      assertTrue(nullType2.matchesStringContext());
      assertFalse(nullType2.isEnumElementType());
      assertTrue(nullType2.matchesNumberContext());
      assertFalse(nullType2.isOrdinaryFunction());
      assertFalse(nullType2.isStringValueType());
      assertFalse(nullType2.matchesObjectContext());
      assertFalse(nullType2.isParameterizedType());
      assertFalse(nullType2.isResolved());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType2.equals((Object)nullType0));
      assertFalse(nullType2.equals((Object)nullType1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(nullType2);
      
      nullTypeArray0[2] = nullType2;
      NullType nullType3 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType3.isRecordType());
      assertFalse(nullType3.isInterface());
      assertFalse(nullType3.isResolved());
      assertFalse(nullType3.isOrdinaryFunction());
      assertFalse(nullType3.isConstructor());
      assertFalse(nullType3.isBooleanValueType());
      assertTrue(nullType3.matchesStringContext());
      assertFalse(nullType3.isUnionType());
      assertFalse(nullType3.isNoResolvedType());
      assertTrue(nullType3.isNullable());
      assertFalse(nullType3.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType3.getPossibleToBooleanOutcomes());
      assertFalse(nullType3.isFunctionPrototypeType());
      assertFalse(nullType3.isVoidType());
      assertTrue(nullType3.matchesNumberContext());
      assertFalse(nullType3.isEnumElementType());
      assertFalse(nullType3.isEnumType());
      assertFalse(nullType3.isCheckedUnknownType());
      assertFalse(nullType3.isNumberValueType());
      assertEquals("null", nullType3.getDisplayName());
      assertFalse(nullType3.isParameterizedType());
      assertTrue(nullType3.isNullType());
      assertFalse(nullType3.matchesObjectContext());
      assertFalse(nullType3.isNoType());
      assertFalse(nullType3.isNoObjectType());
      assertFalse(nullType3.isAllType());
      assertFalse(nullType3.isTemplateType());
      assertFalse(nullType3.isFunctionType());
      assertFalse(nullType3.isNominalType());
      assertFalse(nullType3.isNominalConstructor());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(nullType3.equals((Object)nullType1));
      assertFalse(nullType3.equals((Object)nullType0));
      assertFalse(nullType3.equals((Object)nullType2));
      assertNotNull(nullType3);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseNullType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSType0, nullType1);
      assertNotSame(jSType0, nullType0);
      assertNotSame(jSType0, nullType3);
      assertNotSame(jSType0, nullType2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertEquals("null", jSType0.getDisplayName());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSType0.equals((Object)nullType1));
      assertFalse(jSType0.equals((Object)nullType0));
      assertFalse(jSType0.equals((Object)nullType3));
      assertFalse(jSType0.equals((Object)nullType2));
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality(nullType2);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(nullType2, nullType0);
      assertNotSame(nullType2, nullType1);
      assertNotSame(nullType2, nullType3);
      assertNotSame(nullType2, jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(nullType0, jSType0);
      assertNotSame(nullType0, nullType3);
      assertNotSame(nullType0, nullType1);
      assertNotSame(nullType0, nullType2);
      assertFalse(nullType2.isInterface());
      assertFalse(nullType2.isNoObjectType());
      assertFalse(nullType2.isConstructor());
      assertFalse(nullType2.isNoType());
      assertFalse(nullType2.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType2.getPossibleToBooleanOutcomes());
      assertFalse(nullType2.isNoResolvedType());
      assertFalse(nullType2.isUnionType());
      assertFalse(nullType2.isFunctionType());
      assertFalse(nullType2.isNominalType());
      assertFalse(nullType2.isNumberValueType());
      assertEquals("null", nullType2.getDisplayName());
      assertFalse(nullType2.isCheckedUnknownType());
      assertTrue(nullType2.isNullType());
      assertFalse(nullType2.isNominalConstructor());
      assertFalse(nullType2.isBooleanValueType());
      assertFalse(nullType2.isFunctionPrototypeType());
      assertTrue(nullType2.isNullable());
      assertFalse(nullType2.isAllType());
      assertFalse(nullType2.isEnumType());
      assertFalse(nullType2.isVoidType());
      assertFalse(nullType2.isTemplateType());
      assertTrue(nullType2.matchesStringContext());
      assertFalse(nullType2.isEnumElementType());
      assertTrue(nullType2.matchesNumberContext());
      assertFalse(nullType2.isOrdinaryFunction());
      assertFalse(nullType2.isStringValueType());
      assertFalse(nullType2.matchesObjectContext());
      assertFalse(nullType2.isParameterizedType());
      assertFalse(nullType2.isResolved());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isRecordType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isNominalConstructor());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isCheckedUnknownType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isTemplateType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType2.equals((Object)nullType0));
      assertFalse(nullType2.equals((Object)nullType1));
      assertFalse(nullType2.equals((Object)nullType3));
      assertFalse(nullType2.equals((Object)jSType0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(nullType0.equals((Object)jSType0));
      assertFalse(nullType0.equals((Object)nullType3));
      assertFalse(nullType0.equals((Object)nullType1));
      assertFalse(nullType0.equals((Object)nullType2));
      assertNotNull(jSType_TypePair0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType2);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(nullType2, nullType0);
      assertNotSame(nullType2, nullType1);
      assertNotSame(nullType2, nullType3);
      assertNotSame(nullType2, jSType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(nullType2.isInterface());
      assertFalse(nullType2.isNoObjectType());
      assertFalse(nullType2.isConstructor());
      assertFalse(nullType2.isNoType());
      assertFalse(nullType2.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, nullType2.getPossibleToBooleanOutcomes());
      assertFalse(nullType2.isNoResolvedType());
      assertFalse(nullType2.isUnionType());
      assertFalse(nullType2.isFunctionType());
      assertFalse(nullType2.isNominalType());
      assertFalse(nullType2.isNumberValueType());
      assertEquals("null", nullType2.getDisplayName());
      assertFalse(nullType2.isCheckedUnknownType());
      assertTrue(nullType2.isNullType());
      assertFalse(nullType2.isNominalConstructor());
      assertFalse(nullType2.isBooleanValueType());
      assertFalse(nullType2.isFunctionPrototypeType());
      assertTrue(nullType2.isNullable());
      assertFalse(nullType2.isAllType());
      assertFalse(nullType2.isEnumType());
      assertFalse(nullType2.isVoidType());
      assertFalse(nullType2.isTemplateType());
      assertTrue(nullType2.matchesStringContext());
      assertFalse(nullType2.isEnumElementType());
      assertTrue(nullType2.matchesNumberContext());
      assertFalse(nullType2.isOrdinaryFunction());
      assertFalse(nullType2.isStringValueType());
      assertFalse(nullType2.matchesObjectContext());
      assertFalse(nullType2.isParameterizedType());
      assertFalse(nullType2.isResolved());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, immutableList0.size());
      assertFalse(nullType2.equals((Object)nullType0));
      assertFalse(nullType2.equals((Object)nullType1));
      assertFalse(nullType2.equals((Object)nullType3));
      assertFalse(nullType2.equals((Object)jSType0));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(immutableList0);
      
      boolean boolean2 = noResolvedType0.isNoObjectType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertNotNull(voidType0);
      
      JSType jSType0 = voidType0.findPropertyType("com.google.javascript.rhino.jstype.JSType$TypePair");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertNull(jSType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertNotNull(iterable0);
      
      TemplateType templateType1 = (TemplateType)templateType0.collapseUnion();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isUnionType());
      assertEquals("Named type with empty name component", templateType1.getReferenceName());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isFunctionType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isNullType());
      assertNotNull(templateType1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertNotNull(errorFunctionType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(voidType0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.filterNoResolvedType(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isConstructor());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(errorFunctionType1);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) errorFunctionType0, (JSType) voidType0, (JSType) voidType0, (JSType) errorFunctionType1, (JSType) errorFunctionType1, (JSType) errorFunctionType1, (JSType) errorFunctionType1, (JSType) errorFunctionType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isConstructor());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNominalType());
      assertEquals(10, immutableList0.size());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(immutableList0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isConstructor());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNominalType());
      assertEquals(10, immutableList0.size());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isRecordType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isConstructor());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isNominalType());
      assertEquals(10, immutableList0.size());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isRecordType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test072()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertNotNull(errorFunctionType0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertNotNull(voidType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertNotNull(jSType_TypePair0);
      
      JSType jSType0 = modificationVisitor0.caseStringType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals("string", jSType0.getDisplayName());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertNotNull(jSType0);
      
      String string0 = voidType0.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("{274}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertNotNull(string0);
      
      boolean boolean0 = jSType_TypePair0.typeA.isNumberObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry1, hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(recordType0);
      
      RecordType recordType1 = recordType0.toMaybeRecordType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isAllType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.hasCachedValues());
      assertFalse(recordType1.isVoidType());
      assertFalse(recordType1.isResolved());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isParameterizedType());
      assertFalse(recordType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isNominalType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(recordType1);
      
      boolean boolean1 = recordType1.differsFrom(jSType_TypePair0.typeB);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isAllType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isVoidType());
      assertFalse(recordType1.isResolved());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isParameterizedType());
      assertFalse(recordType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isNominalType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean1 == boolean0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) voidType0, jSType_TypePair0.typeB, jSType0, (JSType) voidType0, jSType_TypePair0.typeB, (JSType) recordType1, (JSType) errorFunctionType0, jSType_TypePair0.typeA, jSType_TypePair0.typeA);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals("string", jSType0.getDisplayName());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isAllType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isVoidType());
      assertFalse(recordType1.isResolved());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isParameterizedType());
      assertFalse(recordType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isNominalType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isCheckedUnknownType());
      assertEquals(10, immutableList0.size());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(immutableList0);
      
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
      assertSame(immutableList0, immutableList1);
      assertSame(immutableList1, immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isStringValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNullType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals("string", jSType0.getDisplayName());
      assertTrue(jSType0.isStringValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isTemplateType());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isEnumElementType());
      assertFalse(recordType1.isAllType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isVoidType());
      assertFalse(recordType1.isResolved());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isParameterizedType());
      assertFalse(recordType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isNominalType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isCheckedUnknownType());
      assertEquals(10, immutableList0.size());
      assertEquals(10, immutableList1.size());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(immutableList1);
      
      boolean boolean2 = errorFunctionType0.isNominalConstructor();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean2);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertNotNull(templateType0);
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) voidType0, (JSType) voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(jSType0, voidType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertNotNull(jSType0);
      
      boolean boolean0 = voidType0.isStringObjectType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertSame(voidType0, jSType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      
      JSType jSType1 = voidType0.collapseUnion();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(voidType0, jSType1);
      assertSame(jSType1, jSType0);
      assertSame(jSType1, voidType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isEnumElementType());
      assertTrue(jSType1.isVoidType());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertEquals("undefined", jSType1.getDisplayName());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isRecordType());
      assertTrue(jSType1.matchesStringContext());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertFalse(jSType1.isUnionType());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isConstructor());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.matchesNumberContext());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, jSType1.getPossibleToBooleanOutcomes());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.matchesObjectContext());
      assertNotNull(jSType1);
      
      boolean boolean1 = templateType0.isGlobalThisType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(boolean1 == boolean0);
      
      JSDocInfo jSDocInfo0 = templateType0.getJSDocInfo();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      String string0 = errorFunctionType0.toAnnotationString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals("function (new:2/T?5{L,W%Be27uh, *=, *=, *=): 2/T?5{L,W%Be27uh", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertNotNull(string0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertNotNull(iterable0);
      
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{;,W%Be27uh");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertNotNull(voidType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isBooleanValueType());
      assertNotNull(enumElementType0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertNotNull(recordType0);
      
      NoObjectType noObjectType0 = (NoObjectType)recordType0.getGreatestSubtypeHelper(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertNotNull(noObjectType0);
      
      UnionType unionType0 = (UnionType)enumElementType0.getLeastSupertype(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.hasCachedValues());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertNotNull(unionType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertEquals(1, immutableList0.size());
      assertNotNull(immutableList0);
      
      VoidType voidType1 = (VoidType)JSType.safeResolve(voidType0, (ErrorReporter) null, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(voidType0, voidType1);
      assertSame(voidType1, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isEnumType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isStringValueType());
      assertTrue(voidType1.isResolved());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isFunctionType());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertNotNull(voidType1);
      
      boolean boolean0 = recordType0.canTestForShallowEqualityWith(voidType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertSame(voidType0, voidType1);
      assertSame(voidType1, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isEnumType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isStringValueType());
      assertTrue(voidType1.isResolved());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isFunctionType());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isCheckedUnknownType());
      
      unionType0.testForEquality(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, voidType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isInterface());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isResolved());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)recordType0.getImplicitPrototype();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertNotNull(instanceObjectType0);
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, instanceObjectType0, voidType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isEnumType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isStringValueType());
      assertTrue(voidType1.isResolved());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isFunctionType());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertNotNull(parameterizedType0);
      
      boolean boolean1 = parameterizedType0.isCheckedUnknownType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean1);
      assertSame(voidType0, voidType1);
      assertSame(voidType1, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isTemplateType());
      assertTrue(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isEnumType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isStringValueType());
      assertTrue(voidType1.isResolved());
      assertFalse(voidType1.isOrdinaryFunction());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isFunctionType());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isNoResolvedType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertNotNull(numberType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertTrue(numberType0.isNumberValueType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullable());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertNotNull(instanceObjectType0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertNotNull(voidType0);
      
      JSType jSType0 = voidType0.findPropertyType("com.google.javascript.rhino.jstype.JSType$TypePair");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertNull(jSType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNotNull(noResolvedType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertNotNull(jSType_TypePair0);
      
      String string0 = voidType0.toDebugHashCodeString();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals("{262}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertNotNull(string0);
      
      boolean boolean0 = templateType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals("Named type with empty name component", templateType0.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertNotNull(functionType0);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalType(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertNotNull(unionType0);
      
      boolean boolean0 = jSTypeRegistry0.canPropertyBeDefined(unionType0, "Not declared as a constructor");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(jSType_TypePair0);
      
      EnumType enumType0 = functionType0.toMaybeEnumType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNull(enumType0);
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, jSType_TypePair0.typeB);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(indexedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNativeObjectType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNullType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(indexedType0);
      
      // Undeclared exception!
      try { 
        indexedType0.toMaybeFunctionType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParameterizedType parameterizedType0 = new ParameterizedType((JSTypeRegistry) null, (ObjectType) null, (JSType) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = parameterizedType0.isArrayType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNullType());
      
      // Undeclared exception!
      try { 
        parameterizedType0.findPropertyType("Snil7<^c[/p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ProxyObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = templateType0.isNumberObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertNotNull(iterable0);
      
      boolean boolean1 = templateType0.isNominalConstructor();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(boolean1 == boolean0);
      
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertNull(templateType1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isVoidType());
      assertEquals("2/T?5{LW%Be27*", templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertNotNull(templateType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertNotNull(voidType0);
      
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("Named type with empty name component", templateType1.getReferenceName());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.isNumber();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertNotNull(iterable0);
      
      boolean boolean1 = templateType0.isNominalConstructor();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean1);
      assertNotSame(templateType0, templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isVoidType());
      assertEquals("2/T?5{LW%Be27*", templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.equals((Object)templateType1));
      assertFalse(boolean1 == boolean0);
      
      TemplateType templateType2 = (TemplateType)templateType1.collapseUnion();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(templateType1, templateType0);
      assertSame(templateType1, templateType2);
      assertNotSame(templateType2, templateType0);
      assertSame(templateType2, templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("Named type with empty name component", templateType1.getReferenceName());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType2.hasCachedValues());
      assertEquals("Named type with empty name component", templateType2.getReferenceName());
      assertFalse(templateType2.isParameterizedType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isUnionType());
      assertTrue(templateType2.hasAnyTemplateInternal());
      assertTrue(templateType2.isTemplateType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNominalConstructor());
      assertFalse(templateType2.isResolved());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isNullType());
      assertTrue(templateType1.equals((Object)templateType0));
      assertTrue(templateType2.equals((Object)templateType0));
      assertNotNull(templateType2);
      
      boolean boolean2 = errorFunctionType0.hasProperty("Not declared as a constructor");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertNotNull(templateType0);
      
      TemplateType templateType1 = (TemplateType)templateType0.restrictByNotNullOrUndefined();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType1.isBooleanValueType());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isEnumElementType());
      assertEquals("Unknown class name", templateType1.getReferenceName());
      assertFalse(templateType1.isNominalConstructor());
      assertNotNull(templateType1);
      
      boolean boolean0 = templateType0.isGlobalThisType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertSame(templateType0, templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      
      JSDocInfo jSDocInfo0 = templateType0.getJSDocInfo();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType0, templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNotNull(iterable0);
      
      boolean boolean0 = noResolvedType0.isNoType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      
      TemplateType templateType1 = (TemplateType)templateType0.collapseUnion();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertEquals("2/T?5{L,W%Be27uh", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNullType());
      assertEquals("2/T?5{L,W%Be27uh", templateType1.getReferenceName());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isResolved());
      assertNotNull(templateType1);
      
      boolean boolean1 = errorFunctionType0.isBooleanValueType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.isInterface();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      
      BooleanLiteralSet booleanLiteralSet0 = errorFunctionType0.getPossibleToBooleanOutcomes();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      
      JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowInequality(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      
      Iterable<ObjectType> iterable0 = new LinkedHashSet<ObjectType>();
      assertNotNull(iterable0);
      
      jSTypeRegistry0.registerPropertyOnType("2/T?5{L,W%Be27uh", functionType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isObject());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertNotNull(templateType0);
      
      FunctionType functionType2 = errorFunctionType0.toMaybeFunctionType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(errorFunctionType0, functionType2);
      assertSame(functionType2, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isBooleanValueType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isAllType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isParameterizedType());
      assertTrue(functionType2.isObject());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isEnumType());
      assertTrue(functionType2.hasInstanceType());
      assertFalse(functionType2.isRecordType());
      assertTrue(functionType2.isConstructor());
      assertTrue(functionType2.isNominalConstructor());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertNotNull(functionType2);
      
      boolean boolean0 = templateType0.differsFrom(functionType2);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertSame(errorFunctionType0, functionType2);
      assertSame(functionType2, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isBooleanValueType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isAllType());
      assertTrue(functionType2.hasCachedValues());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isParameterizedType());
      assertTrue(functionType2.isObject());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isEnumType());
      assertTrue(functionType2.hasInstanceType());
      assertFalse(functionType2.isRecordType());
      assertTrue(functionType2.isConstructor());
      assertTrue(functionType2.isNominalConstructor());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isCheckedUnknownType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)errorFunctionType0.getReturnType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(errorFunctionType0, functionType2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertNotNull(instanceObjectType0);
      
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertNotNull(templateType1);
      
      InstanceObjectType instanceObjectType1 = new InstanceObjectType(jSTypeRegistry0, functionType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isObject());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertTrue(instanceObjectType1.isNominalType());
      assertFalse(instanceObjectType1.isNullType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isConstructor());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(instanceObjectType1.equals((Object)instanceObjectType0));
      assertNotNull(instanceObjectType1);
      
      boolean boolean1 = templateType0.isGlobalThisType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean1);
      assertSame(templateType0, templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(boolean1 == boolean0);
      
      String string0 = JSType.NOT_A_TYPE;
      assertEquals("Not declared as a type name", string0);
      assertNotNull(string0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType1, (JSType) instanceObjectType1, (JSType) templateType0, (JSType) templateType1, (JSType) instanceObjectType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) instanceObjectType1, (JSType) functionType1, (JSType) instanceObjectType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(errorFunctionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertSame(templateType0, templateType1);
      assertNotSame(instanceObjectType0, instanceObjectType1);
      assertSame(templateType1, templateType0);
      assertNotSame(instanceObjectType1, instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertTrue(instanceObjectType1.isNominalType());
      assertFalse(instanceObjectType1.isNullType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isConstructor());
      assertEquals(10, immutableList0.size());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(instanceObjectType0.equals((Object)instanceObjectType1));
      assertTrue(instanceObjectType1.equals((Object)instanceObjectType0));
      assertNotNull(immutableList0);
      
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(immutableList1, immutableList0);
      assertSame(errorFunctionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertSame(templateType0, templateType1);
      assertNotSame(instanceObjectType0, instanceObjectType1);
      assertSame(templateType1, templateType0);
      assertNotSame(instanceObjectType1, instanceObjectType0);
      assertSame(immutableList0, immutableList1);
      assertEquals(10, immutableList1.size());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertTrue(instanceObjectType1.isNominalType());
      assertFalse(instanceObjectType1.isNullType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isConstructor());
      assertEquals(10, immutableList0.size());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(instanceObjectType0.equals((Object)instanceObjectType1));
      assertTrue(instanceObjectType1.equals((Object)instanceObjectType0));
      assertNotNull(immutableList1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(10, immutableList1.size());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isObject());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isStringValueType());
      assertFalse(instanceObjectType1.isInterface());
      assertFalse(instanceObjectType1.isFunctionPrototypeType());
      assertFalse(instanceObjectType1.isRecordType());
      assertFalse(instanceObjectType1.isResolved());
      assertFalse(instanceObjectType1.isNoObjectType());
      assertTrue(instanceObjectType1.isInstanceType());
      assertFalse(instanceObjectType1.isFunctionType());
      assertFalse(instanceObjectType1.isNoType());
      assertFalse(instanceObjectType1.isTemplateType());
      assertFalse(instanceObjectType1.isParameterizedType());
      assertFalse(instanceObjectType1.isStringValueType());
      assertFalse(instanceObjectType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType1.isOrdinaryFunction());
      assertFalse(instanceObjectType1.isEnumElementType());
      assertFalse(instanceObjectType1.isEnumType());
      assertFalse(instanceObjectType1.hasCachedValues());
      assertTrue(instanceObjectType1.isNominalType());
      assertFalse(instanceObjectType1.isNullType());
      assertTrue(instanceObjectType1.hasReferenceName());
      assertFalse(instanceObjectType1.isVoidType());
      assertFalse(instanceObjectType1.isNominalConstructor());
      assertTrue(instanceObjectType1.isObject());
      assertFalse(instanceObjectType1.isNativeObjectType());
      assertFalse(instanceObjectType1.isUnionType());
      assertFalse(instanceObjectType1.isNumberValueType());
      assertFalse(instanceObjectType1.isCheckedUnknownType());
      assertFalse(instanceObjectType1.isNoResolvedType());
      assertFalse(instanceObjectType1.isBooleanValueType());
      assertTrue(instanceObjectType1.matchesObjectContext());
      assertFalse(instanceObjectType1.isConstructor());
      assertEquals(10, immutableList0.size());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(instanceObjectType0.equals((Object)instanceObjectType1));
      assertTrue(instanceObjectType1.equals((Object)instanceObjectType0));
      assertNotNull(unionType0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertNotNull(node0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, (JSType) null);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertNotNull(arrowType0);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) arrowType0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertNull(parameterizedType0);
      
      boolean boolean0 = arrowType0.isNoType();
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      
      Visitor<ParameterizedType> visitor0 = (Visitor<ParameterizedType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arrowType0.visit(visitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertNotNull(voidType0);
      
      VoidType voidType1 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isResolved());
      assertFalse(voidType1.equals((Object)voidType0));
      assertNotNull(voidType1);
      
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, jSType0);
      assertNotSame(voidType0, voidType1);
      assertNotSame(jSType0, voidType1);
      assertSame(jSType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(jSType0.equals((Object)voidType1));
      assertNotNull(jSType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType1, (JSType) voidType1, jSType0, jSType0, (JSType) voidType0, (JSType) voidType1, (JSType) voidType1, (JSType) voidType1, (JSType) voidType0, (JSType) voidType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, jSType0);
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertNotSame(voidType1, jSType0);
      assertNotSame(jSType0, voidType1);
      assertSame(jSType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(10, immutableList0.size());
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertFalse(voidType1.equals((Object)jSType0));
      assertFalse(jSType0.equals((Object)voidType1));
      assertNotNull(immutableList0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry1, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(10, immutableList0.size());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertFalse(voidType1.equals((Object)jSType0));
      assertFalse(jSType0.equals((Object)voidType1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(voidType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(voidType0, jSType0);
      assertNotSame(voidType0, voidType1);
      assertNotSame(voidType1, voidType0);
      assertNotSame(voidType1, jSType0);
      assertNotSame(jSType0, voidType1);
      assertSame(jSType0, voidType0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType1.isEnumElementType());
      assertFalse(voidType1.isNominalConstructor());
      assertFalse(voidType1.isFunctionPrototypeType());
      assertTrue(voidType1.isVoidType());
      assertFalse(voidType1.isBooleanValueType());
      assertFalse(voidType1.matchesNumberContext());
      assertFalse(voidType1.isUnionType());
      assertFalse(voidType1.isEnumType());
      assertFalse(voidType1.isNumberValueType());
      assertFalse(voidType1.isFunctionType());
      assertFalse(voidType1.isAllType());
      assertFalse(voidType1.isCheckedUnknownType());
      assertFalse(voidType1.isNoObjectType());
      assertFalse(voidType1.isNominalType());
      assertFalse(voidType1.isNoType());
      assertFalse(voidType1.isNullType());
      assertFalse(voidType1.isConstructor());
      assertFalse(voidType1.isInterface());
      assertFalse(voidType1.matchesObjectContext());
      assertTrue(voidType1.matchesStringContext());
      assertFalse(voidType1.isRecordType());
      assertFalse(voidType1.isTemplateType());
      assertFalse(voidType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertFalse(voidType1.isParameterizedType());
      assertFalse(voidType1.isOrdinaryFunction());
      assertEquals("undefined", voidType1.getDisplayName());
      assertFalse(voidType1.isStringValueType());
      assertFalse(voidType1.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertEquals(10, immutableList0.size());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(voidType0.equals((Object)voidType1));
      assertFalse(voidType1.equals((Object)voidType0));
      assertFalse(voidType1.equals((Object)jSType0));
      assertFalse(jSType0.equals((Object)voidType1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRecordType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(templateType0);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null, false);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry2);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertNotNull(iterable0);
      
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isNullType());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertNotNull(noResolvedType1);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry2);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseAllType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertNotNull(jSType0);
      
      boolean boolean1 = noResolvedType1.isSubtype(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isNullType());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isAllType());
      assertFalse(jSType0.isParameterizedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(boolean1 == boolean0);
      
      TemplateType templateType1 = (TemplateType)templateType0.collapseUnion();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isRecordType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertNotNull(templateType1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "2/T?5{LW%Be27*");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertEquals("2/T?5{LW%Be27*", templateType0.getReferenceName());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertNotNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.canAssignTo(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertEquals("2/T?5{LW%Be27*", templateType0.getReferenceName());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertNotNull(iterable0);
      
      boolean boolean1 = errorFunctionType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(boolean1 == boolean0);
      
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertEquals("Not declared as a constructor", templateType1.getReferenceName());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.hasCachedValues());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isBooleanValueType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      
      boolean boolean2 = templateType0.isPropertyInExterns("collection is empty; use the other version of this method");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean2);
      assertNotSame(templateType0, templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isNullType());
      assertEquals("2/T?5{LW%Be27*", templateType0.getReferenceName());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.equals((Object)templateType1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      Node node0 = Node.newString(0, "Not declared as a type name", 1, (-2028));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "2/T?5{L,W%Be27uh", node0, voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      EnumType enumType1 = enumType0.toMaybeEnumType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isNominalConstructor());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isParameterizedType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      EnumElementType enumElementType0 = enumType1.getElementsType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isNominalConstructor());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isParameterizedType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("2/T?5{L,W%Be27uh", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) errorFunctionType0, (JSType) voidType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) voidType0, (JSType) enumElementType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isNominalConstructor());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isParameterizedType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("2/T?5{L,W%Be27uh", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(10, immutableList0.size());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertSame(immutableList0, immutableList1);
      assertSame(immutableList1, immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isNominalConstructor());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isParameterizedType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("2/T?5{L,W%Be27uh", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(10, immutableList0.size());
      assertEquals(10, immutableList1.size());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      
      UnionType unionType0 = new UnionType(jSTypeRegistry2, immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isNominalConstructor());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isParameterizedType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("2/T?5{L,W%Be27uh", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasReferenceName());
      assertEquals(10, immutableList0.size());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isVoidType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry1, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals("Not declared as a constructor", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      
      TemplateType templateType1 = templateType0.toMaybeTemplateType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType1, templateType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(templateType0, templateType1);
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumElementType());
      assertEquals("Not declared as a constructor", templateType1.getReferenceName());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals("Not declared as a constructor", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      
      TemplateType templateType2 = (TemplateType)templateType1.collapseUnion();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType1, templateType2);
      assertSame(templateType1, templateType0);
      assertSame(templateType2, templateType1);
      assertSame(templateType2, templateType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(templateType0, templateType2);
      assertSame(templateType0, templateType1);
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumElementType());
      assertEquals("Not declared as a constructor", templateType1.getReferenceName());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertTrue(templateType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isBooleanValueType());
      assertTrue(templateType2.hasAnyTemplateInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("Not declared as a constructor", templateType2.getReferenceName());
      assertFalse(templateType2.isParameterizedType());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isResolved());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNominalConstructor());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals("Not declared as a constructor", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry2));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      
      boolean boolean0 = noObjectType0.matchesObjectContext();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      
      NamedType namedType0 = new NamedType(jSTypeRegistry2, "Not declared as a type name", (String) null, 54, (-1));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNativeObjectType());
      assertEquals("Not declared as a type name", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      
      boolean boolean1 = namedType0.isEquivalentTo(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertSame(enumType0, enumType1);
      assertSame(enumType1, enumType0);
      assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry0);
      assertNotSame(jSTypeRegistry2, jSTypeRegistry1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNativeObjectType());
      assertEquals("Not declared as a type name", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isUnionType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isParameterizedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isEnumElementType());
      assertFalse(enumType1.isNominalConstructor());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isNoResolvedType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isFunctionType());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.isInterface());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isParameterizedType());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isConstructor());
      assertEquals("2/T?5{L,W%Be27uh", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry2));
      assertFalse(boolean1 == boolean0);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      
      templateType2.testForEqualityHelper(templateType1, enumType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType1, templateType2);
      assertSame(templateType1, templateType0);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertSame(templateType2, templateType1);
      assertSame(templateType2, templateType0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry2);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertSame(enumType0, enumType1);
      assertSame(templateType0, templateType2);
      assertSame(templateType0, templateType1);
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isStringValueType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isEnumElementType());
      assertEquals("Not declared as a constructor", templateType1.getReferenceName());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType2.getPossibleToBooleanOutcomes());
      assertFalse(templateType2.isNullType());
      assertFalse(templateType2.isBooleanValueType());
      assertTrue(templateType2.hasAnyTemplateInternal());
      assertTrue(templateType2.isObject());
      assertFalse(templateType2.isNumberValueType());
      assertFalse(templateType2.isUnionType());
      assertFalse(templateType2.isFunctionPrototypeType());
      assertEquals("Not declared as a constructor", templateType2.getReferenceName());
      assertFalse(templateType2.isParameterizedType());
      assertFalse(templateType2.hasCachedValues());
      assertFalse(templateType2.isResolved());
      assertFalse(templateType2.isVoidType());
      assertFalse(templateType2.isRecordType());
      assertFalse(templateType2.isEnumType());
      assertFalse(templateType2.isFunctionType());
      assertFalse(templateType2.isStringValueType());
      assertFalse(templateType2.isEnumElementType());
      assertFalse(templateType2.isNominalConstructor());
      assertTrue(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isConstructor());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isRecordType());
      assertEquals("Not declared as a constructor", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      
      noObjectType0.getAllExtendedInterfaces();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test091()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{;,W%Be27uh");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertNotNull(errorFunctionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertNotNull(voidType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertNotNull(enumElementType0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertNotNull(recordType0);
      
      NoObjectType noObjectType0 = (NoObjectType)recordType0.getGreatestSubtypeHelper(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNotNull(noObjectType0);
      
      String string0 = noObjectType0.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals("function (this:me, {8}): me", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNotNull(string0);
      
      UnionType unionType0 = (UnionType)enumElementType0.getLeastSupertype(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertNotNull(unionType0);
      
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertNotNull(stringType0);
      
      recordType0.testForEqualityHelper(stringType0, unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isParameterizedType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.matchesObjectContext());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNominalType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "N.!5(Bv\"");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertEquals("N.!5(Bv\"", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertNotNull(templateType0);
      
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.equals((Object)templateType0));
      assertNotNull(templateType1);
      
      boolean boolean0 = templateType0.isGlobalThisType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertNotSame(templateType0, templateType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertEquals("N.!5(Bv\"", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.equals((Object)templateType1));
      
      JSDocInfo jSDocInfo0 = templateType1.getJSDocInfo();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(templateType1, templateType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.equals((Object)templateType0));
      assertNull(jSDocInfo0);
      
      templateType0.matchConstraint(templateType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(templateType0, templateType1);
      assertNotSame(templateType1, templateType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertEquals("N.!5(Bv\"", templateType0.getReferenceName());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumElementType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isRecordType());
      assertEquals("", templateType1.getReferenceName());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isVoidType());
      assertFalse(templateType1.isNominalConstructor());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType0.equals((Object)templateType1));
      assertTrue(templateType1.equals((Object)templateType0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertNotNull(voidType0);
      
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(jSType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      assertNotNull(jSType0);
      
      boolean boolean0 = jSType0.matchesUint32Context();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertSame(voidType0, jSType0);
      assertSame(jSType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isTemplateType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertEquals(10, immutableList0.size());
      assertNotNull(immutableList0);
      
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(immutableList0, immutableList1);
      assertSame(immutableList1, immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertEquals(10, immutableList0.size());
      assertEquals(10, immutableList1.size());
      assertNotNull(immutableList1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertEquals(10, immutableList0.size());
      assertEquals(10, immutableList1.size());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(immutableList0, immutableList1);
      assertSame(immutableList1, immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isResolved());
      assertEquals(10, immutableList0.size());
      assertEquals(10, immutableList1.size());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "\u00A0\u180E\u202F");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertNotNull(functionType0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)modificationVisitor0.caseFunctionType(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isVoidType());
      assertNotNull(errorFunctionType1);
      
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isVoidType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertTrue(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertNotNull(indexedType0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      IndexedType indexedType1 = new IndexedType(jSTypeRegistry1, indexedType0, errorFunctionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertTrue(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      assertTrue(indexedType1.isObject());
      assertFalse(indexedType1.isNoType());
      assertFalse(indexedType1.isParameterizedType());
      assertFalse(indexedType1.isNumberValueType());
      assertFalse(indexedType1.isUnionType());
      assertFalse(indexedType1.isStringValueType());
      assertTrue(indexedType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType1.getPossibleToBooleanOutcomes());
      assertFalse(indexedType1.isOrdinaryFunction());
      assertFalse(indexedType1.isNoResolvedType());
      assertFalse(indexedType1.isEnumType());
      assertFalse(indexedType1.isFunctionPrototypeType());
      assertFalse(indexedType1.isRecordType());
      assertTrue(indexedType1.isNativeObjectType());
      assertFalse(indexedType1.isAllType());
      assertFalse(indexedType1.isResolved());
      assertFalse(indexedType1.isVoidType());
      assertFalse(indexedType1.isNoObjectType());
      assertFalse(indexedType1.isInterface());
      assertFalse(indexedType1.isTemplateType());
      assertTrue(indexedType1.isFunctionType());
      assertFalse(indexedType1.isNullType());
      assertFalse(indexedType1.hasCachedValues());
      assertFalse(indexedType1.isBooleanValueType());
      assertFalse(indexedType1.isEnumElementType());
      assertTrue(indexedType1.hasReferenceName());
      assertTrue(indexedType1.isNominalConstructor());
      assertFalse(indexedType1.isCheckedUnknownType());
      assertFalse(indexedType1.isNominalType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertTrue(indexedType1.equals((Object)indexedType0));
      assertNotNull(indexedType1);
      
      TemplateType templateType0 = indexedType0.toMaybeTemplateType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotSame(indexedType0, indexedType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isInterface());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isResolved());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertTrue(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNullType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(indexedType0.equals((Object)indexedType1));
      assertNull(templateType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotNull(noResolvedType0);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry2.shouldTolerateUndefinedValues());
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      
      JSTypeRegistry jSTypeRegistry3 = null;
      NoResolvedType noResolvedType1 = null;
      try {
        noResolvedType1 = new NoResolvedType((JSTypeRegistry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.NoObjectType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(modificationVisitor0);
      
      JSType jSType0 = modificationVisitor0.caseVoidType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertNotNull(jSType0);
      
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isConstructor());
      assertNotNull(jSType1);
      
      boolean boolean0 = jSType0.canTestForEqualityWith(jSType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNominalType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType1.isEnumType());
      assertFalse(jSType1.isEnumElementType());
      assertFalse(jSType1.isFunctionPrototypeType());
      assertTrue(jSType1.isUnionType());
      assertFalse(jSType1.isNoType());
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isAllType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNullType());
      assertFalse(jSType1.isVoidType());
      assertFalse(jSType1.isNominalConstructor());
      assertFalse(jSType1.isInterface());
      assertFalse(jSType1.isNominalType());
      assertFalse(jSType1.isStringValueType());
      assertFalse(jSType1.isFunctionType());
      assertFalse(jSType1.isNumberValueType());
      assertFalse(jSType1.isOrdinaryFunction());
      assertFalse(jSType1.isTemplateType());
      assertFalse(jSType1.isNoResolvedType());
      assertFalse(jSType1.isCheckedUnknownType());
      assertFalse(jSType1.isBooleanValueType());
      assertFalse(jSType1.isRecordType());
      assertFalse(jSType1.isParameterizedType());
      assertFalse(jSType1.isConstructor());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(voidType0);
      
      Node node0 = Node.newString("Not declared as a type name", 0, 1);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertNotNull(node0);
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(arrowType0);
      
      NoType noType0 = (NoType)voidType0.getGreatestSubtype(arrowType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(simpleErrorReporter1, simpleErrorReporter0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isObject());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isNominalType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(noType0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "uGtEePNv);wl6v");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertNotNull(functionType0);
      
      jSTypeRegistry0.registerPropertyOnType("2/T?L,W%Be27uh", functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isUnionType());
      assertNotNull(templateType0);
      
      UnknownType unknownType0 = (UnknownType)templateType0.getGreatestSubtype(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isVoidType());
      assertEquals("", templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isUnionType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNoType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.hasReferenceName());
      assertNotNull(unknownType0);
      
      jSTypeRegistry0.clearTemplateTypeNames();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertNotNull(noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{L,W%Be27uh");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertNotNull(voidType0);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertNotNull(enumElementType0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertNotNull(recordType0);
      
      NoObjectType noObjectType0 = (NoObjectType)recordType0.getGreatestSubtypeHelper(enumElementType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.hasInstanceType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertNotNull(noObjectType0);
      
      UnionType unionType0 = (UnionType)enumElementType0.getLeastSupertype(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isUnionType());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.hasInstanceType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNullType());
      assertNotNull(unionType0);
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isEnumType());
      assertEquals(1, immutableList0.size());
      assertNotNull(immutableList0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString("");
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertNotNull(node0);
      
      JSType jSType0 = null;
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, (JSType) null);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoResolvedType());
      assertNotNull(arrowType0);
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
      
      boolean boolean0 = arrowType0.isNoType();
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoResolvedType());
      
      Visitor<ParameterizedType> visitor0 = (Visitor<ParameterizedType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arrowType0.visit(visitor0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertNotNull(voidType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertNotNull(templateType0);
      
      boolean boolean0 = voidType0.isNominalConstructor();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNullType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      
      TemplateType templateType1 = (TemplateType)templateType0.collapseUnion();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isUnionType());
      assertEquals("Unknown class name", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isVoidType());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.hasCachedValues());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isRecordType());
      assertFalse(templateType1.isParameterizedType());
      assertTrue(templateType1.isObject());
      assertTrue(templateType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isFunctionType());
      assertEquals("Unknown class name", templateType1.getReferenceName());
      assertFalse(templateType1.isNullType());
      assertFalse(templateType1.isResolved());
      assertFalse(templateType1.isStringValueType());
      assertNotNull(templateType1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.filterNoResolvedType(voidType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) voidType0, (JSType) voidType0, jSType0, jSType0, jSType0, (JSType) voidType0, jSType0, jSType0, (JSType) voidType0);
      immutableList0.asList();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      Node.newNumber((-1.0));
      unionType0.getTypesUnderShallowInequality(voidType0);
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "2/T?5{;,W%Be27uh");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Not declared as a constructor");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      enumElementType0.toString();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      JSType.getGreatestSubtype((JSType) recordType0, (JSType) enumElementType0);
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(enumElementType0);
      enumElementType0.getLeastSupertype(jSType0);
      assertTrue(recordType0.hasCachedValues());
      
      ImmutableList.of((JSType) voidType0);
      JSType.safeResolve(voidType0, (ErrorReporter) null, errorFunctionType0);
      assertTrue(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Aq`<3+|YQ55/X0");
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry((ErrorReporter) null, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry2);
      noResolvedType0.getExtendedInterfaces();
      noResolvedType0.matchesNumberContext();
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      jSTypeRegistry1.createNullableType(voidType0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      TemplateType templateType1 = new TemplateType(jSTypeRegistry0, "dFzlmI~qYnOx._|TSOq");
      assertTrue(templateType1.equals((Object)templateType0));
      
      JSType.toMaybeFunctionType((JSType) noResolvedType1);
      assertFalse(noResolvedType1.isAllType());
      
      boolean boolean0 = JSType.isEquivalent((JSType) null, jSType0);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(boolean0);
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSType.toMaybeTemplateType((JSType) null);
      Visitor<ParameterizedType> visitor0 = (Visitor<ParameterizedType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.matchesInt32Context();
      voidType0.canTestForShallowEqualityWith(noType0);
      assertTrue(noType0.hasCachedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      templateType0.isGlobalThisType();
      templateType0.getJSDocInfo();
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      objectType0.getLeastSupertype(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      recordType0.resolve(simpleErrorReporter1, objectType0);
      recordType0.hasAnyTemplateInternal();
      modificationVisitor0.caseNullType();
      JSType jSType0 = recordType0.getGreatestSubtypeHelper(objectType0);
      assertTrue(objectType0.hasCachedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = objectType0.canTestForEqualityWith(jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$TypePair");
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getExtendedInterfaces();
      templateType0.isString();
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(boolean0);
      
      JSType jSType0 = templateType0.collapseUnion();
      assertFalse(jSType0.isResolved());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:19:28 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = Vector3D.minusI;
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusK;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      // Undeclared exception!
      try { 
        vector3D0.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = vector3D0.plusK.normalize();
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(1.5707963267948966, vector3D2.getAlpha(), 0.01);
      assertEquals(1.0, vector3D2.getY(), 0.01);
      assertEquals(0.21273843458332484, vector3D0.getDelta(), 0.01);
      assertEquals(-0.0, vector3D2.getDelta(), 0.01);
      assertEquals(1.0, vector3D1.getZ(), 0.01);
      assertEquals((-2.437853661182815), vector3D0.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.subtract(1.0, vector3D0);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
      assertEquals(0.0, vector3D1.getZ(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = new Vector3D(0.7037389924069778, vector3D0, 0.7037389924069778, vector3D0, 0.7037389924069778, vector3D0, 0.7037389924069778, vector3D0);
      assertEquals(0.2127384345833248, vector3D1.getDelta(), 0.01);
      assertEquals((-2.437853661182815), vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusI;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      double double0 = vector3D0.getX();
      assertEquals((-2.437853661182815), vector3D0.getAlpha(), 0.01);
      assertEquals(0.21273843458332484, vector3D0.getDelta(), 0.01);
      assertEquals((-0.7452402427971097), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      assertEquals(0.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      double double0 = vector3D0.getDelta();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = vector3D0.minusI.add(vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals((-0.12010326442427777), vector3D2.getX(), 0.01);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01);
      assertEquals(1.8682827638219595, vector3D1.getNorm(), 0.01);
      assertEquals((-0.632485560047934), vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      double double0 = vector3D0.getZ();
      assertEquals(0.2111373885567317, double0, 0.01);
      assertEquals((-2.437853661182815), vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = new Vector3D((-843.235339), vector3D0, 471.15134, vector3D0);
      assertEquals((-0.21273843458332492), vector3D1.getDelta(), 0.01);
      assertEquals((-0.632485560047934), vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getAlpha();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = vector3D0.negate();
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals((-0.8670573343879188), vector3D2.getAlpha(), 0.01);
      assertEquals((-0.21273843458332484), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = new Vector3D((-2026.54), vector3D0, 0.2111373885567317, vector3D0, 0.2111373885567317, vector3D0);
      assertEquals(0.7037389924069779, vector3D1.getAlpha(), 0.01);
      assertEquals((-0.2127384345833248), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = vector3D0.add((-2318.8862840183015), vector3D0);
      assertEquals((-0.21273843458332486), vector3D1.getDelta(), 0.01);
      assertEquals(0.7037389924069779, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.21273843458332484, vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = new Vector3D((-843.235339), vector3D0);
      assertEquals(0.7037389924069779, vector3D1.getAlpha(), 0.01);
      assertEquals((-0.21273843458332486), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.7037389924069778, (-2026.54));
      Vector3D vector3D1 = vector3D0.orthogonal();
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(1.5707963267948968, double0, 0.01);
      assertEquals(0.21273843458332484, vector3D0.getDelta(), 0.01);
  }
}

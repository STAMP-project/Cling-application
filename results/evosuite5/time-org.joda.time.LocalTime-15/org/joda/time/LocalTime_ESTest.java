/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 19:27:19 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-25L));
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4L);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
      
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(12);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = localTime0.toString((String) null, locale0);
      assertEquals(4, localTime0.size());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(string0);
      assertEquals("21:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(4101L);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      String string0 = localTime0.toString((String) null);
      assertEquals(4, localTime0.size());
      assertNotNull(string0);
      assertEquals("01:00:04.101", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.toString("t.T5TFi&*=rs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.property(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMillis(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMillis((-2147483617));
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(3);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMinutes(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusMinutes(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusHours(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusHours(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMillis(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMillis(421);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusSeconds(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusSeconds(20503125);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMinutes(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusHours(0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusHours(2891);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Months months0 = Months.FOUR;
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      LocalTime localTime1 = localTime0.withPeriodAdded(months0, 0);
      assertEquals(4, localTime0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      LocalTime localTime1 = localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, 27);
      assertEquals(4, localTime0.size());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1000L);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 3384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'monthOfYear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 122 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) islamicChronology0);
      assertEquals(3, localDate0.size());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localDate0);
      
      LocalTime localTime1 = localTime0.withFields(localDate0);
      assertEquals(4, localTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime1.size());
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime((-441L));
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.isEqual(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.plusMinutes(639);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      
      int int0 = localTime1.compareTo((ReadablePartial) localTime0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = LocalTime.now();
      assertEquals(4, localTime1.size());
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime1.isAfter(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LocalTime localTime1 = new LocalTime(13498621320L, (Chronology) copticChronology0);
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals(1, CopticChronology.AM);
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.isEqual(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalTime localTime1 = LocalTime.now((Chronology) julianChronology0);
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.equals(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime();
      assertEquals(4, localTime1.size());
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotNull(localTime1);
      
      boolean boolean0 = localTime0.equals(localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(localTime0.equals((Object)localTime1));
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      boolean boolean0 = localTime0.equals(monthDay0);
      assertEquals(4, localTime0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertEquals(4, localTime0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.isSupported((DurationFieldType) null);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertEquals(4, localTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getValue(2244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2244
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.getFieldType(790);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 790
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withMinuteOfHour((-4293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4293 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.secondOfMinute();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime_Property0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(762L, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withSecondOfMinute(21);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getHourOfDay();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withMillisOfSecond(99);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test57()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = new LocalTime(localTime0, (DateTimeZone) null);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertTrue(localTime1.equals((Object)localTime0));
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      LocalTime localTime1 = localTime0.plus(weeks0);
      assertEquals(4, localTime0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getSecondOfMinute();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMinuteOfHour();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-2147483620));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483620 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = localTime0.MIDNIGHT.getMillisOfDay();
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(13, 13);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minus((ReadablePeriod) null);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withHourOfDay(1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse(".J|RSk8z+:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".J|RSk8z+:\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(4, localTime0.size());
      assertEquals(1392405681320L, dateTime0.getMillis());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTime0);
      
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1392405681320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertEquals(4, localTime0.size());
      assertEquals(1392405681320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationFieldType0);
      
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertEquals(4, localTime0.size());
      assertEquals(1392405681320L, dateTime0.getMillis());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(4, localTime1.size());
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(localTime1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy(639);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(17);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-341L), (Chronology) julianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.addCopy((-2268L));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      boolean boolean0 = localTime0.equals(localTime1);
      assertFalse(boolean0);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), 0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((-523L), (Chronology) islamicChronology0);
      Date date0 = localDate0.toDate();
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.hourOfDay();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(54L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addCopy(1135);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) julianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      Chronology chronology0 = localTime_Property0.getChronology();
      assertNotNull(chronology0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 14:31:42 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import org.apache.commons.math.ode.DormandPrince853StepInterpolator;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.EulerStepInterpolator;
import org.apache.commons.math.ode.GillStepInterpolator;
import org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator;
import org.apache.commons.math.ode.HighamHall54StepInterpolator;
import org.apache.commons.math.ode.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractStepInterpolator_ESTest extends AbstractStepInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1894);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.writeExternal(objectOutputStream0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getPreviousTime(), 0.01);
      assertFalse(dummyStepInterpolator0.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      eulerStepInterpolator0.finalizeStep();
      eulerStepInterpolator0.finalizeStep();
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      assertFalse(dummyStepInterpolator1.isForward());
      assertEquals(Double.NaN, dummyStepInterpolator1.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, dummyStepInterpolator1.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853StepInterpolator dormandPrince853StepInterpolator0 = new DormandPrince853StepInterpolator();
      // Undeclared exception!
      try { 
        dormandPrince853StepInterpolator0.storeTime((-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator();
      assertTrue(graggBulirschStoerStepInterpolator0.isForward());
      
      double[] doubleArray0 = new double[1];
      graggBulirschStoerStepInterpolator0.reinitialize(doubleArray0, false);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54StepInterpolator highamHall54StepInterpolator0 = new HighamHall54StepInterpolator();
      // Undeclared exception!
      try { 
        highamHall54StepInterpolator0.setInterpolatedTime(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.HighamHall54StepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillStepInterpolator gillStepInterpolator0 = new GillStepInterpolator();
      double double0 = gillStepInterpolator0.getCurrentTime();
      assertEquals(Double.NaN, gillStepInterpolator0.getPreviousTime(), 0.01);
      assertTrue(gillStepInterpolator0.isForward());
      assertEquals(Double.NaN, gillStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[][] doubleArray1 = new double[3][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, false);
      double double0 = graggBulirschStoerStepInterpolator0.getPreviousTime();
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getCurrentTime(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(graggBulirschStoerStepInterpolator0.isForward());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      eulerStepInterpolator0.shift();
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      boolean boolean0 = eulerStepInterpolator0.isForward();
      assertEquals(Double.NaN, eulerStepInterpolator0.getInterpolatedTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerStepInterpolator eulerStepInterpolator0 = new EulerStepInterpolator();
      double double0 = eulerStepInterpolator0.getInterpolatedTime();
      assertTrue(eulerStepInterpolator0.isForward());
      assertEquals(Double.NaN, eulerStepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, eulerStepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      StepInterpolator stepInterpolator0 = dummyStepInterpolator0.copy();
      assertEquals(Double.NaN, stepInterpolator0.getPreviousTime(), 0.01);
      assertEquals(Double.NaN, stepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(stepInterpolator0.isForward());
      assertEquals(Double.NaN, stepInterpolator0.getCurrentTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator();
      // Undeclared exception!
      try { 
        dummyStepInterpolator0.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractStepInterpolator", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:29:26 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.WrapFactory;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      functionObject0.isVarArgsConstructor();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getArity");
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("getArity", method0, nativeObject0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.IdFunctionObject
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      baseFunction0.createObject(context0, importerTopLevel0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "doubleToLongBits");
      NativeError nativeError0 = new NativeError();
      Context context0 = Context.getCurrentContext();
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeError0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeError0, nativeError0, context0.emptyArgs);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) importerTopLevel0;
      baseFunction0.call(context0, importerTopLevel0, importerTopLevel0, objectArray0);
      assertEquals("Function", baseFunction0.getFunctionName());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        baseFunction0.call(context0, importerTopLevel0, importerTopLevel0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getArity");
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("getArity", method0, nativeObject0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeObject0, nativeObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getArity\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getArity");
      NativeObject nativeObject0 = new NativeObject();
      NativeObject nativeObject1 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("getArity", method0, nativeObject1);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeObject0, nativeObject1, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getArity\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getArity");
      assertNotNull(method0);
      
      Context context0 = Context.getCurrentContext();
      NativeCall nativeCall0 = new NativeCall();
      FunctionObject functionObject0 = new FunctionObject("I;a~VuT%=W.dv&", method0, nativeCall0);
      NativeArray nativeArray0 = new NativeArray(170);
      IdFunctionObject idFunctionObject0 = functionObject0.exportAsJSClass(180, nativeCall0, false);
      functionObject0.call(context0, nativeArray0, idFunctionObject0, methodArray0);
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getArity");
      Context context0 = Context.getCurrentContext();
      NativeCall nativeCall0 = new NativeCall();
      FunctionObject functionObject0 = new FunctionObject("getArity", method0, nativeCall0);
      NativeArray nativeArray0 = new NativeArray(8);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeArray0, nativeArray0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getArity\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Context context0 = new Context();
      Class<Integer> class0 = Integer.TYPE;
      Class<Method> class1 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "valueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"valueOf\" occurs multiple times in class \"java.lang.Double\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "const+ructor");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getArity");
      assertNotNull(method0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      FunctionObject functionObject0 = new FunctionObject("getArity", method0, nativeIterator_StopIteration0);
      functionObject0.getMethodOrConstructor();
      assertEquals(13, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      Constructor constructor0 = (Constructor)functionObject0.getMethodOrConstructor();
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      MemberBox memberBox0 = functionObject0.member;
      Constructor<?> constructor0 = memberBox0.ctor();
      FunctionObject functionObject1 = new FunctionObject((String) null, constructor0, functionObject0);
      String string0 = functionObject1.getFunctionName();
      assertNotNull(string0);
      assertEquals(2, functionObject1.getLength());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) importerTopLevel0, class0, false, false);
      String string0 = baseFunction0.getFunctionName();
      assertEquals("Function", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Double> class0 = Double.TYPE;
      Double double0 = new Double(100);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) double0, (Class<?>) class0);
      assertEquals(100.0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      NativeWith nativeWith0 = new NativeWith(importerTopLevel0, importerTopLevel0);
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeWith0, (Object) context0.generateObserverCount, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context context0 = new Context();
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) 150, (Class<?>) class0);
      assertEquals(150, object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<String> class0 = String.class;
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) "getArity", (Class<?>) class0);
      assertEquals("getArity", object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, 6);
      assertFalse(importerTopLevel1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<Double> class0 = Double.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) class0, (Class<?>) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      WrapFactory wrapFactory0 = context0.getWrapFactory();
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) wrapFactory0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parseDouble");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "parseDouble");
      FunctionObject functionObject0 = new FunctionObject("parseDouble", method0, nativeJavaMethod0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeJavaMethod0, nativeJavaMethod0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.NumberFormatException: For input string: \"java.lang.reflect.Method@0000000005\"
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test28()  throws Throwable  {
      Class<IdFunctionObject> class0 = IdFunctionObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("msg.bad.ctor.return", method0, nativeIterator_StopIteration0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }
}

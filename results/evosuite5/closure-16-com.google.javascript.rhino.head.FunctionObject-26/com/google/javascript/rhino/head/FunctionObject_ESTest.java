/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:31:13 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      assertNotNull(method0);
      
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("shortValue", method0, nativeObject0);
      functionObject0.isVarArgsConstructor();
      assertEquals(0, functionObject0.getLength());
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("shortValue", method0, baseFunction0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, baseFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.Integer
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      BaseFunction baseFunction0 = new BaseFunction();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      FunctionObject functionObject0 = new FunctionObject("public static int java.lang.Integer.compare(int,int)", method0, baseFunction0);
      Context context0 = new Context();
      IdFunctionObject idFunctionObject0 = functionObject0.exportAsJSClass(5, baseFunction0, false);
      Object[] objectArray0 = new Object[2];
      functionObject0.call(context0, baseFunction0, idFunctionObject0, objectArray0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toOctalString");
      Type[] typeArray0 = method0.getGenericParameterTypes();
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "toOctalString");
      FunctionObject functionObject0 = new FunctionObject("toOctalString", method0, nativeJavaMethod0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeJavaMethod0, nativeJavaMethod0, typeArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("shortValue", method0, baseFunction0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "shortValue");
      FunctionObject functionObject0 = new FunctionObject("shortValue", method0, nativeJavaMethod0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, nativeJavaMethod0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("shortValue", method0, nativeObject0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeObject0, nativeObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"shortValue\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeBoolean> class0 = NativeBoolean.class;
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeContinuation0, (Object) class0, (Class<?>) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.annotation.Annotation\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      Class<NativeBoolean> class0 = NativeBoolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, (Class<?>) class0);
      assertSame(importerTopLevel0, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "getInteger");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"getInteger\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method[] methodArray0 = new Method[7];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "language version");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      assertNotNull(method0);
      
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "shortValue");
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeJavaMethod0);
      String string0 = functionObject0.getFunctionName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(48, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      BaseFunction baseFunction0 = new BaseFunction();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("compare", method0, baseFunction0);
      String string0 = functionObject0.getFunctionName();
      assertEquals("compare", string0);
      assertEquals(48, methodArray0.length);
      assertEquals(2, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, 1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ImporterTopLevel importerTopLevel1 = (ImporterTopLevel)FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, 6);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) null, 3);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toUnsignedLong");
      BaseFunction baseFunction0 = new BaseFunction();
      FunctionObject functionObject0 = new FunctionObject("-m~", method0, baseFunction0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, baseFunction0, functionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeError nativeError0 = new NativeError();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeError0, (Object) "getAllIds", 1);
      assertEquals("getAllIds", object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      BaseFunction baseFunction0 = new BaseFunction();
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      // Undeclared exception!
      try { 
        ScriptableObject.defineClass((Scriptable) baseFunction0, class0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"java.lang.Class\" in method \"com.google.javascript.rhino.head.NativeJavaClass\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "shortValue");
      assertNotNull(method0);
      
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("shortValue", method0, nativeObject0);
      Context context0 = Context.getCurrentContext();
      Double double0 = new Double(2);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) functionObject0, (Object) double0, 4);
      assertEquals(48, methodArray0.length);
      assertEquals(2.0, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      BaseFunction baseFunction0 = new BaseFunction();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("compare", method0, baseFunction0);
      functionObject0.addAsConstructor(baseFunction0, baseFunction0);
      assertEquals(48, methodArray0.length);
      assertEquals(2, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      BaseFunction baseFunction0 = new BaseFunction();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "compare");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("compare", method0, baseFunction0);
      int int0 = functionObject0.getLength();
      assertEquals(2, int0);
      assertEquals(48, methodArray0.length);
  }
}

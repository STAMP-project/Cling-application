/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:39:41 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeJSON;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(21, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      functionObject0.construct((Context) null, importerTopLevel0, methodArray0);
      assertEquals(21, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.construct(context0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Context context0 = new Context();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      NativeArray nativeArray0 = new NativeArray(8);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, nativeArray0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getClassName\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeGenerator> class0 = NativeGenerator.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Context context0 = new Context();
      ScriptableObject scriptableObject0 = ScriptableObject.buildDataDescriptor(functionObject0, functionObject0, 0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, scriptableObject0, scriptableObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test06()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "setParentScope");
      FunctionObject functionObject0 = new FunctionObject("setParentScope", method0, importerTopLevel0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.construct(context0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      TopLevel topLevel0 = new TopLevel();
      Class<ConsString> class0 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) topLevel0, (Object) topLevel0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"put\" occurs multiple times in class \"com.google.javascript.rhino.head.NativeJavaObject\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals(21, methodArray0.length);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(21, methodArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeContinuation> class0 = NativeContinuation.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(8, methodArray0.length);
      assertEquals("getClassName", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      TopLevel.Builtins topLevel_Builtins0 = TopLevel.Builtins.String;
      BaseFunction baseFunction0 = importerTopLevel0.getBuiltinCtor(topLevel_Builtins0);
      Double double0 = new Double(150);
      Class<Double> class0 = Double.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) baseFunction0, (Object) double0, (Class<?>) class0);
      assertEquals(150.0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      Class<Boolean> class0 = Boolean.TYPE;
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, true);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0.generateObserverCount, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) importerTopLevel0, (Object) importerTopLevel0.EMPTY, 2);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaTopPackage0, (Object) classLoader0, 1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      Scriptable scriptable0 = context0.initStandardObjects((ScriptableObject) null);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, scriptable0, (Object) context0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaTopPackage0, (Object) classLoader0, 6);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "setPrototype");
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext((Context) null);
      FunctionObject functionObject0 = new FunctionObject("language version", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.construct((Context) null, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) functionObject0, (Object) "getClassName", 1);
      assertEquals(21, methodArray0.length);
      assertEquals("getClassName", object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      Class<Double> class0 = Double.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaTopPackage0, (Object) classLoader0, (Class<?>) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJSON> class0 = NativeJSON.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "parse");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("- L]Y`M7E:@\"~QTQ-&", method0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"parse\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeObject> class0 = NativeObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      functionObject0.addAsConstructor(importerTopLevel0, importerTopLevel0);
      assertEquals(12, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<NativeJavaObject> class0 = NativeJavaObject.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      int int0 = functionObject0.getLength();
      assertEquals(0, int0);
      assertEquals(21, methodArray0.length);
  }
}

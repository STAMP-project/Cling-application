/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:44:50 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-536.1839199379);
      doubleArray1[1] = 2008.115966796875;
      doubleArray1[2] = (-3236.9207283307);
      doubleArray1[3] = (-1287.0339291);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-536.1839199379), 2008.115966796875, (-3236.9207283307), (-1287.0339291)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)57);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)57, (byte)byte1);
      
      Byte byte2 = new Byte((byte)100);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)100, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-75));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-75), (byte)byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte4);
      
      Float float0 = new Float((float) (byte)10);
      assertNotNull(float0);
      assertEquals(10.0F, (float)float0, 0.01F);
      
      boolean boolean1 = Float.isFinite((byte)31);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[6];
      long long0 = (-964L);
      long long1 = (-251L);
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-25);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte) (-25)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) null, (int) (byte)64);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)39, (int) (byte) (-25));
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte) (-25)}, byteArray0);
      assertTrue(int1 == int0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte) (-25)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte) (-25)}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-25);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)64, (byte) (-25)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) null, (int) (byte)64);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 824);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2146914778;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146914778, 64);
      assertArrayEquals(new double[] {0.0, (-1.0), 2.146914778E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray0[0] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.reverse((boolean[]) null);
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {2.146914778E9, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2146914778, 0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(3, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, Integer.MAX_VALUE, (-2265));
      assertNull(intArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray1);
      assertNotNull(map0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)90);
      assertNotNull(byte0);
      assertEquals((byte)90, (byte)byte0);
      
      Byte byte1 = new Byte((byte)90);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)90, (byte)byte1);
      
      Byte byte2 = new Byte((byte)90);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)90, (byte)byte2);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      intArray0[1] = (-2173);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {64, (-2173)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-13));
      assertArrayEquals(new byte[] {(byte)0, (byte)116}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147401538);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-2147401538)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2147401538)}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2147401538);
      floatArray1[1] = (float) 1346L;
      floatArray1[2] = (float) (-1087L);
      floatArray1[3] = (float) (-1087L);
      floatArray1[4] = (float) 1346L;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 1753L;
      floatArray1[7] = (float) 1346L;
      boolean boolean3 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertArrayEquals(new float[] {(-2.1474016E9F), 1346.0F, (-1087.0F), (-1087.0F), 1346.0F, 0.0F, 1753.0F, 1346.0F}, floatArray1, 0.01F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertTrue(boolean3);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) integerArray0);
      assertArrayEquals(new int[] {(-2147401538)}, intArray0);
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotSame(integerArray0, objectArray0);
      
      boolean boolean4 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)773;
      shortArray0[1] = (short) (-1953);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1421);
      shortArray0[6] = (short) (-3628);
      shortArray0[7] = (short)1703;
      shortArray0[8] = (short)3;
      Long long0 = new Long(599L);
      assertNotNull(long0);
      assertEquals(599L, (long)long0);
      
      Long long1 = new Long((short) (-1953));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1953L), (long)long1);
      
      Long long2 = new Long((-935L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-935L), (long)long2);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertFalse(boolean0);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short[] shortArray0 = new short[1];
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-904);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-904));
      assertArrayEquals(new short[] {(short) (-904), (short)6, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = '/';
      charArray0[2] = 'd';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '@');
      assertArrayEquals(new char[] {'X', '/', 'd'}, charArray0);
      assertArrayEquals(new char[] {'X', '/', 'd'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-904), (int) (short) (-904));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)3;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 3, 0, 0}, intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean2);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray1);
      assertNotNull(map0);
      assertEquals(0, byteArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-2147021126), (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147021126, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2004, (-2980), (double) 2004);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      objectArray0[8] = object0;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5], (-2980));
      assertTrue(int1 == int0);
      assertEquals(9, objectArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-244L);
      longArray0[1] = (-244L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)0, 1315);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1330);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1330);
      longArray0[1] = (long) (short) (-1330);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1330L), (-1330L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1330), (short) (-1330)}, shortArray2);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Double double0 = new Double(276.0);
      assertNotNull(double0);
      assertEquals(276.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 895.449271);
      assertArrayEquals(new double[] {276.0, 276.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[7];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4306, 33);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {'-', '-'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) '-';
      intArray0[2] = (int) '-';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {45, 45, 45}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4, 2);
      assertArrayEquals(new int[] {45, 45, 45}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte)47;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte)30, (byte)47}, byteArray1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1750L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1750L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 821);
      assertArrayEquals(new int[] {821}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(752.9F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(752.9F, (float)float1, 0.01F);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1750L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1750L), 0L, 0L, (-1750L)}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {821}, intArray0);
      assertArrayEquals(new int[] {821}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) (-69);
      longArray0[3] = (long) (-69);
      longArray0[4] = (long) (-69);
      longArray0[5] = (long) (-69);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte byte1 = new Byte((byte)100);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)100, (byte)byte1);
      
      Byte byte2 = new Byte((byte)76);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)76, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byte byte3 = (byte) (-46);
      Byte byte4 = new Byte((byte) (-46));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-46), (byte)byte4);
      
      byteArray0[2] = byte4;
      byteArray0[3] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte3);
      assertArrayEquals(new byte[] {(byte)2, (byte)100, (byte) (-46), (byte)100}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray0);
      assertNotNull(map0);
      assertEquals(0, doubleArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-69), (-69));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 19);
      assertArrayEquals(new int[] {19}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = new Integer(19);
      assertEquals(19, int0);
      
      Long long0 = new Long((-686L));
      assertNotNull(long0);
      assertEquals((-686L), (long)long0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 87;
      intArray0[1] = (-2129735849);
      intArray0[2] = (-2129735849);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3468, (-473));
      assertArrayEquals(new int[] {87, (-2129735849), (-2129735849)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'Y';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 6, (-628));
      assertArrayEquals(new char[] {'y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)87);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)87;
      longArray0[1] = (long) (byte)87;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)87);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 3597;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {13, 3597}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("?Sf>\"D!)sd/?[>2");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("?Sf>\"D!)sd/?[>2");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((String) null);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("m\"x!i!zuRS$&o\u0002SH");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1255);
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1255)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[0] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[8] = object1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 814);
      assertEquals(9, objectArray0.length);
      assertEquals(5, int0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.decode(" 01lljt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" 01lljt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-824L);
      longArray0[1] = (-824L);
      longArray0[2] = (-824L);
      longArray0[3] = (-824L);
      longArray0[4] = (-824L);
      longArray0[5] = (-4139L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1433L);
      assertArrayEquals(new long[] {(-824L), (-824L), (-824L), (-824L), (-824L), (-4139L)}, longArray0);
      assertArrayEquals(new long[] {(-824L), (-824L), (-824L), (-824L), (-824L), (-4139L)}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-824L), (-824L), (-824L), (-824L), (-824L), (-4139L)}, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)124;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)124}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray1, longArray2);
      assertArrayEquals(new long[] {(-824L), (-824L), (-824L), (-824L), (-824L), (-4139L)}, longArray0);
      assertArrayEquals(new long[] {(-824L), (-824L), (-824L), (-824L), (-824L), (-4139L)}, longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(12, longArray2.length);
      assertFalse(boolean1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3009);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-92));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      int int1 = Byte.toUnsignedInt((byte) (-43));
      assertFalse(int1 == int0);
      assertEquals(213, int1);
      
      int int2 = Byte.toUnsignedInt((byte)95);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(95, int2);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) shortArray0, (Object[]) shortArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2);
      
      Integer integer0 = new Integer(95);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(95, (int)integer0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int3 = ArrayUtils.indexOf((Object[]) shortArray0, (Object) integer0, 1843);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int3);
      
      int int4 = ArrayUtils.lastIndexOf(byteArray0, (byte)75, (int) (byte) (-92));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int4);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      boolean boolean5 = Boolean.getBoolean(">tBIK=H");
      assertFalse(boolean5);
      
      boolean boolean6 = Boolean.logicalXor(false, false);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      String string0 = ArrayUtils.toString((Object) boolean3);
      assertNotNull(string0);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean5));
      assertFalse(boolean3.equals((Object)boolean6));
      assertEquals("true", string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-857.98F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-857.98F);
      doubleArray0[7] = (double) (-857.98F);
      doubleArray0[8] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-857.97998046875), (-1.0), (-1.0), 0.0, (-1.0), (-857.97998046875), (-857.97998046875), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-857.97998046875), (-1.0), (-1.0), 0.0, (-1.0), (-857.97998046875), (-857.97998046875), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2732;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2732, (short) (-1), (short)1}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1087L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1727L));
      assertArrayEquals(new long[] {(-1087L), (-1L), (-1L), (-1L), 0L, (-1L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 97L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " in an array of ";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) stringArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(objectArray0[0], objectArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String string0 = ArrayUtils.toString((Object) "Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannot store ", string0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Cannot store ";
      stringArray0[1] = "Kv*m{0PD{c\"S#wpLt@";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = "Cannot store ";
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1.0F), 1, (double) 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(int1 == int0);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-110);
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)11;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)3;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)3;
      shortArray0[7] = (short) (byte)3;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-110), (short)3, (short)11, (short)0, (short)3, (short)0, (short)3, (short)3}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertEquals(28, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1701;
      intArray0[1] = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1701;
      doubleArray0[1] = (double) 1;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1701.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1004.058F, 0, (double) 1);
      assertArrayEquals(new double[] {1.0, 1701.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) '#';
      floatArray0[3] = 2144.419F;
      floatArray0[4] = (float) '$';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 36.0F);
      assertArrayEquals(new float[] {36.0F, (-1.0F), 35.0F, 2144.419F, 36.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, int0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 35.0F);
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 2144.419F, 4, (double) (-1.0F));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1107.7));
      assertNotNull(float0);
      assertEquals((-1107.7F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      float float3 = Float.max(1.0F, 1.0F);
      assertEquals(1.0F, float3, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[1];
      booleanArray2[0] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      
      String string0 = ArrayUtils.toString((Object) float2);
      assertNotNull(string0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertEquals("0.0", string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 917.98373231;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1871.488106897763);
      doubleArray0[3] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {917.98373231, 0.0, (-1871.488106897763), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {917.98373231, 0.0, (-1871.488106897763), 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray4 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertNotNull(booleanArray4);
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertEquals(1, booleanArray4.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, (-7));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(2521.14333606);
      assertNotNull(double0);
      assertEquals(2521.14333606, (double)double0, 0.01);
      
      Double double1 = new Double((-1640.156265553));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1640.156265553), (double)double1, 0.01);
      
      Double double2 = new Double(2521.14333606);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(2521.14333606, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float((-1640.156265553));
      assertNotNull(float0);
      assertEquals((-1640.1562F), (float)float0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1202L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-1202L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1202L), 0L, 0L, 0L, (-1202L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Integer";
      stringArray0[1] = "b%";
      stringArray0[2] = "#";
      stringArray0[3] = "ZZ!Q";
      stringArray0[4] = "Linux";
      stringArray0[5] = "java.lang.String";
      stringArray0[6] = "%.";
      stringArray0[7] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "java.lang.Integer");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, 1843L);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2496;
      shortArray0[2] = (short) (-432);
      shortArray0[3] = (short)3351;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2496, (short) (-432), (short)3351}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2496, (short) (-432), (short)3351, (short)0, (short)2496, (short) (-432), (short)3351}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean4 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(0, charArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'F';
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {70.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'F';
      longArray0[1] = (long) 'F';
      longArray0[2] = (long) 'F';
      longArray0[3] = (long) 'F';
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertArrayEquals(new long[] {70L, 70L, 70L, 70L, 1L}, longArray0);
      assertArrayEquals(new long[] {70L, 70L, 70L, 70L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, objectArray0.length);
      assertSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-526L);
      longArray0[2] = (-1397L);
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, (-526L), (-1397L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) (-526L);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)193;
      shortArray0[1] = (short)1429;
      shortArray0[2] = (short)1047;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1492;
      shortArray0[5] = (short) (-2921);
      shortArray0[6] = (short)48;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)193, (short)1429, (short)1047, (short)0, (short)1492, (short) (-2921), (short)48}, shortArray1);
      assertArrayEquals(new short[] {(short)193, (short)1429, (short)1047, (short)0, (short)1492, (short) (-2921), (short)48}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)8, 6);
      assertArrayEquals(new short[] {(short)193, (short)1429, (short)1047, (short)0, (short)1492, (short) (-2921), (short)48}, shortArray1);
      assertArrayEquals(new short[] {(short)193, (short)1429, (short)1047, (short)0, (short)1492, (short) (-2921), (short)48}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1727L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1727L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1727L);
      floatArray0[1] = (float) 1;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-360L), Integer.MAX_VALUE);
      assertArrayEquals(new long[] {(-1727L)}, longArray0);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = null;
      float[] floatArray1 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String string0 = ArrayUtils.toString((Object) "Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannot store ", string0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertArrayEquals(new int[] {2}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      floatArray1[0] = (float) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray0 = new Long[4];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(960L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(960L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertEquals((-1L), (long)long3);
      
      Long long4 = Long.getLong("}>Z\u0002YQQU`+>", long3);
      assertNotNull(long4);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertEquals((-1L), (long)long4);
      
      longArray0[2] = long4;
      Long long5 = new Long((-1688L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertEquals((-1688L), (long)long5);
      
      longArray0[3] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long0);
      assertArrayEquals(new long[] {(-1L), 960L, (-1L), (-1688L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'w';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'G');
      assertArrayEquals(new char[] {'w'}, charArray1);
      assertArrayEquals(new char[] {'G', 'w'}, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-306), (-2231));
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-1L), 960L, (-1L), (-1688L)}, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2146914778, (int) '+');
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.reverse((boolean[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 2146914778;
      intArray0[1] = (int) (byte) (-92);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {2146914778, (-92), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2146914778, (-92), 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      ArrayUtils.reverse((double[]) null);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 48;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 48, 48);
      assertArrayEquals(new int[] {48}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2681);
      shortArray0[1] = (short)593;
      shortArray0[2] = (short) (-543);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-543), (short)593, (short) (-2681)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)87;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = 'B';
      charArray0[4] = '$';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'n', '$', '$', 'B', '$'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 64);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1330);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1750L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1870L));
      assertArrayEquals(new long[] {(-1750L)}, longArray0);
      assertArrayEquals(new long[] {(-1750L)}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((byte)57);
      assertNotNull(double0);
      assertEquals(57.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1134.844));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1134.844), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(Integer.MAX_VALUE);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(2.147483647E9, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte) (-88));
      assertArrayEquals(new double[] {(-88.0), (-1134.844), (-1.0), 2.147483647E9}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertArrayEquals(new double[] {(-88.0), (-1134.844), (-1.0), 2.147483647E9}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1750L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1750L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = Long.compare((-1750L), (-1283L));
      assertEquals((-1), int0);
      
      int int1 = Long.compareUnsigned((-1097L), 2943L);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-3478), 2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = Integer.remainderUnsigned(1599, (-750));
      assertEquals(1599, int0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2146033625);
      assertArrayEquals(new int[] {2}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)75);
      assertNotNull(byte0);
      assertEquals((byte)75, (byte)byte0);
      
      Byte byte1 = new Byte((byte)75);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)75, (byte)byte1);
      
      Byte byte2 = new Byte((byte)75);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)75, (byte)byte2);
      
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)75, (int) (byte)75);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray1);
      assertNotNull(map0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '$';
      floatArray0[2] = (float) (-1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(stringArray0, objectArray0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[7] = (-6L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1603L, (-3148));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-6L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[19];
      charArray0[0] = 'A';
      charArray0[1] = 'Z';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(19, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) 1603L;
      doubleArray0[2] = (double) 'Z';
      doubleArray0[3] = (double) 'Z';
      doubleArray0[4] = (double) 'Z';
      doubleArray0[5] = (double) (-6L);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-3.9600008865124687), (-1), (double) 1603L);
      assertArrayEquals(new double[] {65.0, 1603.0, 90.0, 90.0, 90.0, (-6.0)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      
      int int2 = ArrayUtils.indexOf(charArray0, 'E', (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(19, charArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Short[] shortArray0 = new Short[13];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(13, shortArray0.length);
      assertEquals(26, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1860.195425);
      doubleArray0[1] = 4.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1142.46615213), (-1860.195425));
      assertArrayEquals(new double[] {(-1860.195425), 4.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      comparableArray0[0] = (Comparable<Integer>) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0, 2146855361);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertTrue(int1 == int0);
      assertEquals(13, shortArray0.length);
      assertEquals(26, objectArray0.length);
      assertEquals((-1), int1);
      assertNotSame(shortArray0, objectArray0);
      
      comparableArray0[1] = (Comparable<Integer>) (-1);
      Comparable<Integer>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertNotNull(comparableArray1);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertEquals(2, comparableArray0.length);
      assertEquals(4, comparableArray1.length);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(13, shortArray0.length);
      assertEquals(26, objectArray0.length);
      assertEquals(52, objectArray1.length);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(shortArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1631L;
      longArray0[1] = 2860L;
      longArray0[2] = 1603L;
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1631L, 2860L, 1603L}, longArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, longArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-1902.0814948891227);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1902.0814948891227), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      assertNotNull(short0);
      assertEquals((short) (-18), (short)short0);
      
      Short short1 = new Short((byte) (-18));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-18), (short)short1);
      
      Integer integer0 = Integer.getInteger("#AAvXIhg|x:^<U.", (int) (short)26151);
      assertNotNull(integer0);
      assertEquals(26151, (int)integer0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)26151, (double) (short)26151);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(10, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      boolean boolean5 = Boolean.logicalXor(false, false);
      assertFalse(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      String string0 = ArrayUtils.toString((Object) boolean3);
      assertNotNull(string0);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean5));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertEquals("true", string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-857.98F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-857.98F);
      doubleArray0[7] = (double) (-857.98F);
      doubleArray0[8] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-857.97998046875), (-1.0), (-1.0), (-1.0), (-1.0), (-857.97998046875), (-857.97998046875), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-857.97998046875), (-1.0), (-1.0), (-1.0), (-1.0), (-857.97998046875), (-857.97998046875), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertSame(booleanArray2, booleanArray1);
      
      float[] floatArray3 = ArrayUtils.subarray(floatArray2, 2139, (-3649));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(stringArray0, objectArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-100);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)72, 0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)0, (byte)57, (byte)0, (byte)99, (byte)57, (byte)57, (byte) (-100)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("java.lang.Object");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3862);
      assertNotNull(integer0);
      assertEquals(3862, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integerArray0[1];
      objectArray0[1] = (Object) integerArray0[0];
      objectArray0[2] = (Object) integerArray0[0];
      objectArray0[3] = (Object) integerArray0[0];
      objectArray0[4] = (Object) integerArray0[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-9);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-9)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9)}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      AbstractMap.SimpleImmutableEntry<String, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<String, String>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertEquals(6, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 19;
      intArray0[1] = 19;
      intArray0[2] = 19;
      intArray0[3] = 19;
      intArray0[4] = 19;
      intArray0[5] = 19;
      int[] intArray1 = ArrayUtils.add(intArray0, (-1960));
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19}, intArray0);
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19, (-1960)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long(19);
      assertNotNull(long0);
      assertEquals(19L, (long)long0);
      
      Float float0 = Float.valueOf((float) (-1960));
      assertNotNull(float0);
      assertEquals((-1960.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(3871.0725F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3871.0725F, (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19}, intArray0);
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19, (-1960)}, intArray1);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19}, intArray0);
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19, (-1960)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1160);
      assertNotNull(integer0);
      assertEquals(1160, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, integerArray0.length);
      assertEquals(1160, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1115);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1115, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3452);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(3452, (int)integer3);
      
      integerArray0[3] = integer3;
      int int0 = 57;
      Integer integer4 = new Integer(57);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(57, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-1), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1));
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals((-1), (int)integer6);
      
      Integer integer7 = Integer.getInteger(")i.A&ls36~#fyvC");
      assertNull(integer7);
      
      integerArray0[6] = integer6;
      Integer integer8 = new Integer(3452);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer3));
      assertEquals(3452, (int)integer8);
      
      integerArray0[7] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {1160, 1160, 1115, 3452, 57, (-1), (-1), 3452}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = 46.0;
      doubleArray0[2] = 2415.6639906192363;
      doubleArray0[3] = (double) (int)integerArray0[1];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) integerArray0[2], (-371), 57.0);
      assertArrayEquals(new double[] {57.0, 46.0, 2415.6639906192363, 1160.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(8, integerArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (-1));
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = Integer.remainderUnsigned(1599, (-750));
      assertEquals(1599, int0);
      
      Integer integer1 = new Integer((-750));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-750), (int)integer1);
      
      Integer integer2 = new Integer(368);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(368, (int)integer2);
      
      Integer integer3 = Integer.getInteger("Index: ");
      assertNull(integer3);
      
      Integer integer4 = Integer.getInteger("\"T6\"oo*aGy+U>FRI");
      assertNull(integer4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1), integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1542);
      intArray0[1] = (-4144);
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 794, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 794, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1);
      
      Byte byte0 = Byte.valueOf((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-92));
      assertEquals(164, int0);
      
      Byte byte1 = new Byte((byte) (-92));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-92), (byte)byte1);
      
      int int1 = Byte.toUnsignedInt((byte) (-43));
      assertFalse(int1 == int0);
      assertEquals(213, int1);
      
      int int2 = Byte.toUnsignedInt((byte)43);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(43, int2);
      
      long long0 = Byte.toUnsignedLong((byte) (-43));
      assertEquals(213L, long0);
      
      int int3 = Byte.toUnsignedInt((byte)95);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(95, int3);
      
      int int4 = Byte.toUnsignedInt((byte)95);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(95, int4);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = byte0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C', 0);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertTrue(boolean1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', '\'', '\'', '\''}, charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', '\'', '\'', '\''}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      char[] charArray2 = new char[2];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '\'';
      charArray2[1] = 'C';
      ArrayUtils.reverse(charArray2);
      assertArrayEquals(new char[] {'C', '\''}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(2, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 0L);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)57, (byte)92, (byte)1, (byte)115, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) float0;
      objectArray0[2] = (Object) float0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)18;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)18}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1107.7));
      assertNotNull(float0);
      assertEquals((-1107.7F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'W');
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = new Boolean("?Sf>\"D!)sd/?[>2");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Double double0 = new Double((-1640.156265553));
      assertNotNull(double0);
      assertEquals((-1640.156265553), (double)double0, 0.01);
      
      Double double1 = new Double((-1640.156265553));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1640.156265553), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      boolean boolean1 = Double.isFinite(268.0768782);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1640.156265553), (-1640.156265553), (-1640.156265553), (-1640.156265553)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Float float0 = new Float((-1640.156265553));
      assertNotNull(float0);
      assertEquals((-1640.1562F), (float)float0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 2086L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-514L);
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2086L, 0L, 0L, (-514L), 0L, 0L}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) doubleArray0[1];
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) doubleArray0, objectArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean3);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 1950.4478547, (-764), (double) (-764));
      assertArrayEquals(new double[] {(-1640.156265553), (-1640.156265553), (-1640.156265553), (-1640.156265553)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) (byte)19;
      floatArray1[1] = (-1.0F);
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray1);
      assertArrayEquals(new float[] {19.0F, (-1.0F)}, floatArray1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'n';
      charArray0[1] = 'n';
      charArray0[3] = 'B';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'n', '\u0000', 'B', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      assertNotSame(objectArray0, objectArray1);
      
      Float float0 = new Float((-1727.0F));
      assertNotNull(float0);
      assertEquals((-1727.0F), (float)float0, 0.01F);
      
      ArrayUtils.reverse((float[]) null);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'K');
      assertArrayEquals(new char[] {'\u0000', 'n', '\u0000', 'B', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int2);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      stringArray0[2] = "W;@61^_Du7Gz`";
      stringArray0[3] = "W;@61^_Du7Gz`";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "* [a;ZJDZ!J m";
      stringArray0[6] = "Arguments cannot both be null";
      stringArray0[7] = "* [a;ZJDZ!J m";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "W;@61^_Du7Gz`");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEquals("* [a;ZJDZ!J m", object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1, 1);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean2 = new Boolean("+L*G^&oj:ZYfT?c'");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf("+L*G^&oj:ZYfT?c'");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean("+L*G^&oj:ZYfT?c'");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.valueOf("EGNQ@");
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = new Boolean("+L*G^&oj:ZYfT?c'");
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7);
      
      booleanArray0[5] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8);
      
      booleanArray0[6] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-897);
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short) (-897)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) (short) (-897);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = (Object) false;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = (Object) (short) (-897);
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[5] = object3;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(30, objectArray1.length);
      assertEquals(15, objectArray0.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-897);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short) (-897);
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-897', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1750L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1750L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      int int1 = Long.compare((-1750L), (-1283L));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Long.compareUnsigned((-1097L), 2943L);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int3 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int3);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      longArray0[0] = (-1097L);
      doubleArray0[3] = (double) 0;
      longArray0[0] = (long) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(10, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double(1539.37573255558);
      assertNotNull(double0);
      assertEquals(1539.37573255558, (double)double0, 0.01);
      
      Double double1 = new Double((-1640.156265553));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1640.156265553), (double)double1, 0.01);
      
      Double double2 = new Double(965.0544612);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(965.0544612, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double3 = new Double(1912.177);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1912.177, (double)double3, 0.01);
      
      doubleArray0[0] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1912.177}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Float float0 = new Float(461.0);
      assertNotNull(float0);
      assertEquals(461.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short[] shortArray0 = new short[11];
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertEquals(11, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Integer[] integerArray0 = new Integer[8];
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      short short0 = (short)100;
      Short short1 = new Short((short)100);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)100, (short)short1);
      
      Short short2 = new Short((short)100);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)100, (short)short2);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = (Short) short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)100, (short)100}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) shortArray0, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray0.length);
      assertEquals(2, shortArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotSame(shortArray0, objectArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) false;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) shortArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Short
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 19);
      assertArrayEquals(new int[] {19}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long(763L);
      assertNotNull(long0);
      assertEquals(763L, (long)long0);
      
      Float float0 = new Float((float) 763L);
      assertNotNull(float0);
      assertEquals(763.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {19}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {19}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = Integer.remainderUnsigned(1599, (-750));
      assertEquals(1599, int0);
      
      Integer integer1 = new Integer((-750));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-750), (int)integer1);
      
      Integer integer2 = new Integer(382);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(382, (int)integer2);
      
      Integer integer3 = Integer.getInteger("Index: ");
      assertNull(integer3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1599;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 215);
      assertArrayEquals(new int[] {1599}, intArray0);
      assertArrayEquals(new int[] {1599}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte)87);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[13];
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'B';
      intArray0[3] = (int) '~';
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)87, 48);
      assertFalse(int1 == int0);
      assertEquals(13, intArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)122;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 3);
      assertArrayEquals(new byte[] {(byte)57, (byte)28, (byte)122}, byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)122}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'P';
      charArray0[2] = 'I';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'q', 'P', 'I'}, charArray0);
      assertArrayEquals(new char[] {'q', 'P', 'I', 'q', 'P', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[20];
      Integer integer0 = new Integer(368);
      assertNotNull(integer0);
      assertEquals(368, (int)integer0);
      
      Integer integer1 = Integer.getInteger("java.lang.String");
      assertNull(integer1);
      
      Integer integer2 = Integer.getInteger("', is neither of type Map.Entry nor an Array");
      assertNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-1), (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 20
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      byte byte0 = (byte) (-16);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 48, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      booleanArray0[1] = false;
      Integer integer0 = new Integer((-2117));
      assertNotNull(integer0);
      assertEquals((-2117), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) integer0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'g';
      charArray0[3] = '4';
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertArrayEquals(new char[] {'\u0000', 'g', '\u0000', '4'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      float float0 = Float.sum((-3543.71F), (-58.86536F));
      assertEquals((-3602.5754F), float0, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)19;
      longArray0[1] = (long) (byte)19;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)19;
      intArray0[1] = (int) (byte)19;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {19, 19}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {19, 19}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(2, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(boolean0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(boolean1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray1);
      assertNotNull(map0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Float float0 = new Float((-1107.7));
      assertNotNull(float0);
      assertEquals((-1107.7F), (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte) (-124));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer integer1 = new Integer((byte)52);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(52, (int)integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Character character0 = Character.valueOf('q');
      assertNotNull(character0);
      assertEquals('q', (char)character0);
      
      Character character1 = new Character('q');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      
      Character character2 = Character.valueOf('8');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('8', (char)character2);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character2;
      characterArray0[3] = character1;
      characterArray0[4] = character0;
      characterArray0[5] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'8', 'q', '8', 'q', 'q', 'q'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1);
      
      Byte byte0 = Byte.valueOf((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-92));
      assertEquals(164, int0);
      
      int int1 = Byte.toUnsignedInt((byte) (-92));
      assertTrue(int1 == int0);
      assertEquals(164, int1);
      
      Byte byte1 = new Byte((byte) (-92));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-92), (byte)byte1);
      
      int int2 = Byte.toUnsignedInt((byte) (-43));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(213, int2);
      
      int int3 = Byte.toUnsignedInt((byte)43);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(43, int3);
      
      int int4 = Byte.toUnsignedInt((byte)95);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(95, int4);
      
      int int5 = Byte.toUnsignedInt((byte)95);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals(95, int5);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2595), 2714.4478547);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2595, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[5] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      
      objectArray0[6] = object5;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[8] = object1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 814);
      assertEquals(9, objectArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.decode(" 01lljt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" 01lljt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 349;
      intArray0[2] = (-100);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1677), (-100));
      assertArrayEquals(new int[] {0, 349, (-100)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'w';
      charArray0[2] = 'h';
      charArray0[3] = 'Q';
      charArray0[4] = '@';
      charArray0[5] = '[';
      charArray0[6] = '`';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'m', 'w', 'h', 'Q', '@', '[', '`'}, charArray0);
      assertArrayEquals(new char[] {'m', 'w', 'h', 'Q', '@', '[', '`'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1434.582));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)1349;
      shortArray0[3] = (short) (-491);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-280));
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-280);
      floatArray0[1] = (float) (short) (-280);
      floatArray0[2] = (float) (short) (-280);
      floatArray0[3] = (float) (short) (-280);
      floatArray0[4] = (float) (short) (-280);
      floatArray0[5] = (float) (short) (-280);
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-280.0F);
      doubleArray0[1] = (double) (byte) (-81);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-1), 1.0);
      assertArrayEquals(new double[] {(-280.0), (-81.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '');
      assertNull(charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-280);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-280L), (-1L), 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-280L), (-1L), 0L, 0L, 0L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer[] integerArray0 = new Integer[7];
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 2131);
      assertArrayEquals(new double[] {2131.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(7, integerArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)97;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)108);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-9), (byte) (-67), (byte)0, (byte)1, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-9), (byte) (-67), (byte)0, (byte)1, (byte)97}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2004, (-2980), (double) 2004);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4306, 48);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-92));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      Byte byte0 = new Byte((byte) (-92));
      assertNotNull(byte0);
      assertEquals((byte) (-92), (byte)byte0);
      
      int int1 = Byte.toUnsignedInt((byte) (-43));
      assertFalse(int1 == int0);
      assertEquals(213, int1);
      
      int int2 = Byte.toUnsignedInt((byte)95);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(95, int2);
      
      Integer integer0 = new Integer(95);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(95, (int)integer0);
      
      Integer integer1 = new Integer((byte)95);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int2));
      assertEquals(95, (int)integer1);
      
      Integer integer2 = Integer.getInteger("+qD9Xd8#n;e/>9");
      assertNull(integer2);
      
      Integer integer3 = new Integer((-645));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int2));
      assertEquals((-645), (int)integer3);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer3;
      int int3 = Integer.compare(88, 1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 2);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = (float) (short)3009;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)95;
      floatArray0[4] = (float) 213;
      floatArray0[5] = (float) 2;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {(-645.0F), 3009.0F, (-1.0F), 95.0F, 213.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-645.0F), 3009.0F, (-1.0F), 95.0F, 213.0F, 2.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Arguments cannot both be null";
      stringArray0[2] = ".Xac'm";
      String[] stringArray1 = ArrayUtils.add(stringArray0, " in an array of ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, 51L);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ".Xac'm";
      objectArray0[1] = (Object) ".Xac'm";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) " in an array of ";
      objectArray0[4] = (Object) ".Xac'm";
      objectArray0[5] = object0;
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)19, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)19, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte)2);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (int) (byte)19, (int) (byte)19);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3570, (-1459));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3570;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1459), (-3367));
      assertArrayEquals(new long[] {3570L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(4, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'n';
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (int) 'n');
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte)87);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1403L);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 2146657374, 3517);
      assertNull(longArray1);
      
      int[] intArray0 = new int[13];
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'B';
      boolean boolean2 = ArrayUtils.isNotEmpty(objectArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = (short)17;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Integer integer0 = new Integer((short)17);
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(object2, integer0);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(boolean0);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2797);
      doubleArray0[1] = (double) 1740;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1995), (-3148));
      assertArrayEquals(new double[] {(-2797.0), 1740.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Short[] shortArray0 = new Short[4];
      Short short1 = new Short((short)17);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)17, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)17);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)17, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-551));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-551), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertEquals((short)17, (short)short4);
      
      shortArray0[3] = short4;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-987.453), 1740, 2480.05211100703);
      assertArrayEquals(new double[] {(-2797.0), 1740.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#N~&&4XJ";
      stringArray0[1] = "#N~&&4XJ";
      stringArray0[3] = "W;@61^_Du7Gz`";
      stringArray0[4] = "#N~&&4XJ";
      stringArray0[5] = "* [aUZJRZ!J m";
      stringArray0[6] = "Arguments cannot both be null";
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray0);
      assertNotNull(map0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(shortArray0, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '#N~&&4XJ', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(2783);
      assertNotNull(integer0);
      assertEquals(2783, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("2783", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3570, (-1459));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3570;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1459), (-3367));
      assertArrayEquals(new long[] {3570L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'R';
      charArray0[3] = 'Z';
      charArray0[5] = 'R';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'Z', 'Z', 'R', 'Z', '\u0000', 'R'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)27073;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)27073}, shortArray0);
      assertArrayEquals(new short[] {(short)27073}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short) (-1), 901);
      assertArrayEquals(new short[] {(short)27073}, shortArray0);
      assertArrayEquals(new short[] {(short)27073}, shortArray1);
      assertTrue(int1 == int0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals((-1), int1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)27073;
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {27073.0}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean2);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, (String) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(abstractMap_SimpleEntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[20];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2146033625);
      assertNotNull(intArray0);
      assertEquals(20, integerArray0.length);
      assertEquals(20, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(intArray0, 17, (-392));
      assertEquals(20, integerArray0.length);
      assertEquals(20, intArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-52);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-67), (byte)0, (byte) (-14), (byte) (-112), (byte)0, (byte) (-52)}, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-267));
      assertNull(shortArray0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 899.28;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 950.156;
      doubleArray0[3] = 659.0;
      doubleArray0[4] = (-1157.7545059271);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3227.0;
      doubleArray0[7] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {899.28, 0.0, 950.156, 659.0, (-1157.7545059271), 0.0, 3227.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 1710;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 1710);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1710, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$'}, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) '$';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {36, 36, 36, 36}, intArray1);
      assertArrayEquals(new int[] {36, 36}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$');
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals(5, int0);
      assertNotSame(charArray0, charArray1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'#', 'u', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, characterArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[0] = (int) 'l';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) 'l';
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '#');
      assertArrayEquals(new char[] {'#', 'u', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float(36.0F);
      assertNotNull(float0);
      assertEquals(36.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(752.9F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(752.9F, (float)float1, 0.01F);
      
      Float float2 = new Float(752.9F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(752.9F, (float)float2, 0.01F);
      
      Integer integer0 = new Integer(512);
      assertNotNull(integer0);
      assertEquals(512, (int)integer0);
      
      Object[] objectArray0 = new Object[4];
      Integer integer1 = Integer.getInteger("<", integer0);
      assertNotNull(integer1);
      assertEquals(512, (int)integer1);
      
      objectArray0[0] = (Object) float2;
      objectArray0[1] = (Object) integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) integer0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 512);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)36);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(int1 == int0);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = ArrayUtils.indexOf(objectArray0, object0, 0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int2);
      assertNotSame(objectArray0, objectArray1);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.sum((-1), (-1.0F));
      assertEquals((-2.0F), float1, 0.01F);
      
      boolean boolean1 = Float.isFinite(1693.61F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float[] floatArray0 = new Float[2];
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, 0.0, 2445.097);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-127);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-127)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-127)}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short) (-897);
      shortArray1[1] = (short) (-897);
      shortArray1[2] = (short) (-897);
      shortArray1[3] = (short) (-897);
      shortArray1[4] = (short) (-897);
      shortArray1[5] = (short) (-897);
      shortArray1[6] = (short) (-897);
      shortArray1[7] = (short)0;
      shortArray1[8] = (short) (-897);
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short) (-897));
      assertArrayEquals(new short[] {(short) (-897), (short) (-897), (short) (-897), (short) (-897), (short) (-897), (short) (-897), (short) (-897), (short)0, (short) (-897)}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)851);
      assertNotNull(short0);
      assertEquals((short)851, (short)short0);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray2, shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(shortArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      Object[] objectArray2 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray2);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertFalse(shortArray0.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray2.length);
      assertNotSame(shortArray0, objectArray2);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(shortArray0, objectArray1);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-!tP=F";
      stringArray0[3] = "#N~&&4XJ";
      stringArray0[3] = "* [a;ZJDZ!J m";
      stringArray0[4] = "The Array must not be null";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)108);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-81), (byte)0, (byte) (-80), (byte)30, (byte) (-81), (byte)30, (byte)0, (byte) (-16), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)0, (byte) (-80), (byte)30, (byte) (-81), (byte)30, (byte)0, (byte) (-16), (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)30;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2261.5397263725954), (double) 0);
      assertArrayEquals(new double[] {30.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1750L);
      longArray0[1] = (-1750L);
      longArray0[2] = (-1750L);
      longArray0[3] = (-1750L);
      longArray0[4] = (-1750L);
      longArray0[5] = (-1750L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1750L));
      assertArrayEquals(new long[] {(-1750L), (-1750L), (-1750L), (-1750L), (-1750L), (-1750L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1750L), (-1750L), (-1750L), (-1750L), (-1750L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1750L), (-1750L), (-1750L), (-1750L), (-1750L), (-1750L), 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(8, longArray0.length);
      assertTrue(boolean2);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)3;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)3}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-85);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)24, (byte)2, (byte)0, (byte)0, (byte) (-1), (byte)102, (byte) (-85)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Arguments cannot both be null";
      stringArray0[2] = ".Xac'm";
      String[] stringArray1 = ArrayUtils.add(stringArray0, " in an array of ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) (-16));
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-2261.5397263725954);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-6013.726);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 0.0, (double) 0);
      assertArrayEquals(new double[] {0.0, (-2261.5397263725954), 0.0, (-6013.726)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1);
      
      Double double0 = new Double((-6013.726));
      assertNotNull(double0);
      assertEquals((-6013.726), (double)double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 46;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte)87;
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 87L;
      floatArray0[1] = (float) (byte)87;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {87.0F, 87.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1830.40591298155;
      doubleArray0[2] = (double) 87.0F;
      doubleArray0[3] = (double) 87L;
      longArray0[1] = (long) (byte)87;
      doubleArray0[5] = 1830.40591298155;
      doubleArray0[7] = (double) 87.0F;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 46, 1.5);
      assertArrayEquals(new double[] {0.0, 1830.40591298155, 87.0, 87.0, 0.0, 1830.40591298155, 0.0, 87.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, int1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)87;
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 6, (int) 87);
      assertNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)87}, shortArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertNotNull(object8);
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object3));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object5));
      
      objectArray0[8] = object8;
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Long[] longArray0 = new Long[9];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(1L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(1L);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertEquals(1L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertEquals(1L, (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long0);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertEquals(1L, (long)long5);
      
      Long long6 = Long.getLong("", long5);
      assertNotNull(long6);
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long4));
      assertEquals(1L, (long)long6);
      
      longArray0[4] = long6;
      Long long7 = new Long(long0);
      assertNotNull(long7);
      assertTrue(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long4));
      assertEquals(1L, (long)long7);
      
      longArray0[5] = long7;
      Long long8 = Long.valueOf(1L);
      assertNotNull(long8);
      assertTrue(long8.equals((Object)long1));
      assertTrue(long8.equals((Object)long4));
      assertTrue(long8.equals((Object)long6));
      assertTrue(long8.equals((Object)long3));
      assertTrue(long8.equals((Object)long2));
      assertTrue(long8.equals((Object)long5));
      assertTrue(long8.equals((Object)long7));
      assertEquals(1L, (long)long8);
      
      longArray0[6] = long8;
      Long long9 = new Long((-733L));
      assertNotNull(long9);
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long8));
      assertEquals((-733L), (long)long9);
      
      longArray0[7] = long9;
      Long long10 = new Long(1333L);
      assertNotNull(long10);
      assertFalse(long10.equals((Object)long9));
      assertFalse(long10.equals((Object)long8));
      assertFalse(long10.equals((Object)long3));
      assertFalse(long10.equals((Object)long5));
      assertFalse(long10.equals((Object)long7));
      assertFalse(long10.equals((Object)long2));
      assertFalse(long10.equals((Object)long6));
      assertFalse(long10.equals((Object)long4));
      assertFalse(long10.equals((Object)long0));
      assertFalse(long10.equals((Object)long1));
      assertEquals(1333L, (long)long10);
      
      longArray0[8] = long10;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      assertNotNull(short0);
      assertEquals((short) (-18), (short)short0);
      
      Short short1 = new Short((byte) (-18));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-18), (short)short1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)26151;
      intArray0[1] = (int) (byte) (-18);
      intArray0[2] = (int) (byte) (-18);
      intArray0[3] = (int) (short)26151;
      intArray0[4] = (int) (short)26151;
      intArray0[5] = (int) (short)26151;
      intArray0[6] = (int) (byte) (-18);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {26151, (-18), (-18), 26151, 26151, 26151, (-18)}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)26151;
      longArray0[1] = (long) 26151;
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-18);
      longArray1[1] = (long) 26151;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {26151L, 26151L}, longArray0);
      assertArrayEquals(new long[] {(-18L), 26151L}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertTrue(boolean1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-18);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-18.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(26151);
      assertNotNull(double0);
      assertEquals(26151.0, (double)double0, 0.01);
      
      double double1 = Double.min(26151, 1.5);
      assertEquals(1.5, double1, 0.01);
      
      doubleArray0[0] = double0;
      Double double2 = new Double(1652.82230773);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1652.82230773, (double)double2, 0.01);
      
      doubleArray0[1] = double2;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)48, (int) (byte) (-18));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertEquals(20, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.reverse((int[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = Integer.remainderUnsigned(1599, (-750));
      assertEquals(1599, int0);
      
      Double double0 = new Double((-22282.0));
      assertNotNull(double0);
      assertEquals((-22282.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(1.5);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1.5, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 57;
      intArray0[1] = 3452;
      intArray0[2] = 0;
      intArray0[3] = (-484);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-484));
      assertArrayEquals(new int[] {57, 3452, 0, (-484)}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 3452);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 57);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3452;
      longArray0[1] = (long) (-484);
      longArray0[2] = (long) 57;
      longArray0[3] = (-933L);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-933L));
      assertArrayEquals(new long[] {3452L, (-484L), 57L, (-933L), 0L, 0L}, longArray0);
      assertFalse(int1 == int0);
      assertEquals(6, longArray0.length);
      assertEquals(3, int1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 11, 11);
      assertArrayEquals(new byte[] {(byte)19, (byte)2, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      ArrayUtils.reverse((float[]) null);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte)2, (byte)2, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, (int) (byte)2);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      assertNotNull(short0);
      assertEquals((short) (-18), (short)short0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)26151;
      intArray0[0] = (int) (byte) (-18);
      intArray0[2] = (int) (byte) (-18);
      intArray0[3] = (int) (short)26151;
      intArray0[5] = (int) (short)26151;
      intArray0[2] = (int) (byte) (-18);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-18), 0, (-18), 26151, 0, 26151, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)26151;
      longArray0[1] = (long) 0;
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {26151L, 0L}, longArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean2);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 26151, 0, 26151, (-18), 0, (-18)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      int int0 = Short.toUnsignedInt((short) (-853));
      assertEquals(64683, int0);
      
      shortArray0[0] = short1;
      int int1 = Short.toUnsignedInt(short0);
      assertFalse(int1 == int0);
      assertEquals(65535, int1);
      
      Short short2 = new Short((short) (-1));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-1), (short)short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-853);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean2);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[22];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      long[] longArray0 = new long[9];
      longArray0[0] = (-933L);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-933L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Double double0 = new Double(1.367717521827989);
      assertNotNull(double0);
      assertEquals(1.367717521827989, (double)double0, 0.01);
      
      Double double1 = new Double((-236.50346921246464));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-236.50346921246464), (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (short)0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double[] doubleArray3 = ArrayUtils.toObject(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-3612));
      assertNotNull(integer0);
      assertEquals((-3612), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (-3148));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-244L);
      longArray0[1] = 1L;
      Byte byte0 = new Byte((byte)89);
      assertNotNull(byte0);
      assertEquals((byte)89, (byte)byte0);
      
      Byte byte1 = new Byte((byte)40);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)40, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-67));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 1L;
      longArray1[1] = (Long) (-244L);
      longArray1[2] = (Long) (-244L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {1L, (-244L), (-244L)}, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (long)longArray1[2];
      floatArray0[1] = (float) (-244L);
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-244.0F), (-244.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-244L);
      longArray0[1] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-244L), 1L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-244L);
      objectArray0[1] = (Object) (-244L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 1L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) (-244L);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1843);
      assertNotNull(integer0);
      assertEquals(1843, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, integerArray0.length);
      assertEquals(1843, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 2;
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 2, int0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(stringArray0, objectArray0);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = Float.valueOf(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[1] = float0;
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[2] = float1;
      Float float2 = new Float((-842.114F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-842.114F), (float)float2, 0.01F);
      
      floatArray0[3] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[1]);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-1.0F), (-842.114F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 601.3002;
      doubleArray0[1] = (-206.9775106);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {601.3002, (-206.9775106)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {601.3002, (-206.9775106)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = new short[9];
      shortArray1[7] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short)1912);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short)851);
      assertNotNull(short0);
      assertEquals((short)851, (short)short0);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray2, shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(shortArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {1L, (-1L), 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1L);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 57;
      intArray0[1] = 3452;
      intArray0[2] = 0;
      intArray0[3] = (-484);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3452;
      doubleArray0[1] = (double) 3452;
      doubleArray0[2] = (double) 3452;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-484), 0);
      assertArrayEquals(new double[] {3452.0, 3452.0, 3452.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      assertNotNull(short0);
      assertEquals((short) (-18), (short)short0);
      
      Short short1 = new Short((byte) (-18));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-18), (short)short1);
      
      Short short2 = new Short((short)26151);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)26151, (short)short2);
      
      Short short3 = new Short((short) (-722));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-722), (short)short3);
      
      Short short4 = new Short((short)22);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)22, (short)short4);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short)22;
      shortArray0[1] = (short)22;
      shortArray0[2] = (short)26151;
      shortArray0[3] = (short)22;
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)22;
      shortArray1[1] = (short) (-722);
      shortArray1[2] = (short) (byte) (-18);
      shortArray1[3] = (short)4500;
      shortArray1[4] = (short)22;
      shortArray1[5] = (short)26151;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)22, (short) (-722), (short) (-18), (short)4500, (short)22, (short)26151}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(17, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) 22, 278);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = Integer.remainderUnsigned(556, 57);
      assertEquals(43, int0);
      
      Integer integer0 = new Integer(2946);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2946, (int)integer0);
      
      Integer integer1 = new Integer(2946);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2946, (int)integer1);
      
      Integer integer2 = Integer.getInteger("u&~CoT?~");
      assertNull(integer2);
      
      Integer integer3 = Integer.getInteger("u&~CoT?~");
      assertNull(integer3);
      
      int int1 = Integer.remainderUnsigned(16, 368);
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 368, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 112;
      intArray0[1] = 65;
      intArray0[2] = 2505;
      intArray0[3] = 65;
      intArray0[4] = 44;
      intArray0[5] = 65;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {112, 65, 2505, 65, 44, 65}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {112, 65, 2505, 65, 44, 65}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, longArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-2162.8772F), 2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals((-1), int0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2146033625);
      assertArrayEquals(new int[] {2}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-84));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-84);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-84);
      floatArray0[6] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-84.0F), (-1.0F), (-1.0F), (-84.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[8];
      Byte byte0 = new Byte((byte)90);
      assertNotNull(byte0);
      assertEquals((byte)90, (byte)byte0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = ':';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f', (-1));
      assertArrayEquals(new char[] {'f', ':', 'f', 'f', 'f', 'f', '\\'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'f', ':', 'f', 'f', 'f', 'f', '\\'}, charArray0);
      assertArrayEquals(new char[] {'f', ':', 'f', 'f', 'f', 'f', '\\'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) byteArray2, (Object[]) byteArray2);
      assertNotNull(objectArray0);
      assertEquals(8, byteArray2.length);
      assertEquals(16, objectArray0.length);
      assertNotSame(byteArray2, objectArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (-92), (-292));
      assertNull(booleanArray1);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) byteArray2, objectArray0);
      assertFalse(byteArray2.equals((Object)objectArray0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(8, byteArray2.length);
      assertEquals(16, objectArray0.length);
      assertFalse(boolean3);
      assertNotSame(byteArray2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'G');
      assertArrayEquals(new char[] {'k', 'k', 'G', 'G'}, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'G'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1924.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1924.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1924.0F, 0.0F, 1924.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)3;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Array element ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2691.657776136;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1618.375453559));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2691.657776136}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1330);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1330)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Byte byte0 = new Byte((byte) (-8));
      assertNotNull(byte0);
      assertEquals((byte) (-8), (byte)byte0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'q';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'M', 'q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = 767.196F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {113.0F, 767.196F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("PE`sb@=LM~uQ>%`+");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3468;
      intArray0[1] = 3468;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 3468;
      intArray0[5] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-742), (-742));
      assertArrayEquals(new int[] {3468, 3468, Integer.MAX_VALUE, Integer.MAX_VALUE, 3468, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3468;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {3468L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-79);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-79)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-79)}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, '$');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals((-1), int1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2305;
      intArray0[1] = 119;
      intArray0[2] = (-2146492740);
      intArray0[3] = (-2302);
      int int0 = ArrayUtils.indexOf(intArray0, 2305, 12);
      assertArrayEquals(new int[] {2305, 119, (-2146492740), (-2302)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146492740);
      intArray1[1] = (-2146492740);
      intArray1[2] = (-2302);
      intArray1[3] = 7;
      intArray1[4] = 2305;
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(0, intArray2.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean0;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean2;
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      booleanArray0[5] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean4);
      assertNotNull(boolean5);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      
      booleanArray0[6] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-656), 2072);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-112);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-9), (byte)2, (byte)36, (byte)119, (byte)0, (byte) (-112)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      stringArray0[2] = "W;@61^_Du7Gz`";
      stringArray0[3] = "W;@61^_Du7Gz`";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "* [aUZJRZ!J m";
      stringArray0[6] = "Arguments cannot both be null";
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 51L;
      longArray0[3] = (-717L);
      longArray0[4] = (-1688L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 51L, (-717L), (-1688L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 1L, 51L, (-717L), (-1688L)}, longArray1);
      assertArrayEquals(new long[] {0L, 1L, 51L, (-717L), (-1688L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-1849));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3862);
      assertNotNull(integer0);
      assertEquals(3862, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-18));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-18), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3005);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(3005, (int)integer2);
      
      Integer integer3 = new Integer(3005);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(3005, (int)integer3);
      
      integerArray0[3] = integer3;
      try { 
        Integer.decode("vWv^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"vWv^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1727L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1727L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2573;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)4934;
      shortArray0[3] = (short)100;
      shortArray0[4] = (short) (-890);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)1328;
      shortArray0[7] = (short) (-1602);
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 899.28;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 950.156;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 899.28;
      objectArray0[1] = (Object) 950.156;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 899.28;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 0.0;
      objectArray0[8] = (Object) 899.28;
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2], 0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(9, objectArray0.length);
      assertEquals(2, int0);
      assertNotSame(objectArray0, objectArray1);
      
      Float float0 = new Float((-1420.23F));
      assertNotNull(float0);
      assertEquals((-1420.23F), (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-1.0F));
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1420.23F), (-1420.23F), (-1420.23F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 813L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2, (-6789L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-16);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)11, (byte) (-68), (byte) (-116), (byte)73, (byte) (-16)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)11, (byte) (-68), (byte) (-116), (byte)73, (byte) (-16)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 65;
      intArray0[1] = 2118;
      intArray0[2] = 2437;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {65, 2118, 2437}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {65, 2118, 2437}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray1);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotSame(shortArray0, objectArray1);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean2 = new Boolean(true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(stringArray0, objectArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[7] = (-6L);
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) (-6L));
      assertNotNull(float0);
      assertEquals((-6.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-69), (-69));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-6L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      intArray0[1] = (-2173);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {64, (-2173)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      intArray0[1] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[0] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'l', 'u', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '\u0000';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'v');
      assertArrayEquals(new char[] {'l', 'u', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-127);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-127)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "#N~&&4XJ";
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertNotNull(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertSame(stringArray0, objectArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[7] = (-6L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1603L, (-3153));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-6L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 'Z';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'A', 'Z'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'A';
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-6L), 0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean1);
      
      Long long0 = new Long(667L);
      assertNotNull(long0);
      assertEquals(667L, (long)long0);
      
      Long long1 = new Long((-2608L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2608L), (long)long1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.indexOf(longArray1, 667L, (-1));
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertEquals(0, longArray1.length);
      assertEquals((-1), int1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)57, (byte) (-1), (byte) (-38), (byte)46, (byte) (-63)}, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-92);
      doubleArray0[1] = (double) (byte) (-92);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2247.8, (int) (byte) (-1));
      assertArrayEquals(new double[] {(-92.0), (-92.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte) (-38);
      floatArray0[2] = (-600.766F);
      floatArray0[3] = 3605.9963F;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte) (-92);
      floatArray0[7] = (float) (byte) (-38);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-38.0F), (-600.766F), 3605.9963F, (-1.0F), (-1.0F), (-92.0F), (-38.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)57;
      shortArray0[2] = (short) (byte) (-38);
      shortArray0[3] = (short) (byte) (-38);
      shortArray0[4] = (short) (byte)57;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)57, (short) (-38), (short) (-38), (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)57, (short) (-38), (short) (-38), (short)57}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2109.40604062156;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {2109.40604062156, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      comparableArray0[0] = (Comparable<Integer>) 1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int1);
      
      comparableArray0[1] = (Comparable<Integer>) 0;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {2109.40604062156, (-1.0)}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int2);
      
      comparableArray0[2] = (Comparable<Integer>) (-1);
      Comparable<Integer>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertNotNull(comparableArray1);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertEquals(3, comparableArray0.length);
      assertEquals(6, comparableArray1.length);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)100);
      assertNotNull(byte0);
      assertEquals((byte)100, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((byte)57);
      assertNotNull(double0);
      assertEquals(57.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1134.844));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1134.844), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(Integer.MAX_VALUE);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(2.147483647E9, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte) (-88));
      assertArrayEquals(new double[] {57.0, (-1134.844), (-1.0), 2.147483647E9}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertArrayEquals(new double[] {57.0, (-1134.844), (-1.0), 2.147483647E9}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      Long[] longArray0 = new Long[1];
      String string0 = "";
      try { 
        Long.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1479);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-2126);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1076);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1688);
      shortArray0[7] = (short) (-240);
      shortArray0[8] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-831), (-309));
      assertArrayEquals(new short[] {(short) (-1479), (short) (-1), (short) (-2126), (short) (-1), (short) (-1076), (short) (-1), (short) (-1688), (short) (-240), (short)2}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1479);
      longArray0[1] = (long) (short) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) (short)2;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-2394.812F);
      floatArray1[2] = (-4561.0F);
      floatArray1[3] = (-2703.732F);
      floatArray1[4] = 218.57735F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-2394.812F), (-4561.0F), (-2703.732F), 218.57735F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean1 = Character.isBmpCodePoint((-2515));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character character1 = Character.valueOf('6');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('6', (char)character1);
      
      characterArray0[1] = character0;
      Character character2 = new Character('5');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('5', (char)character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'^', '^', '5'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)48;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte)48}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)124;
      intArray0[1] = (int) (byte)124;
      intArray0[2] = (int) (byte)124;
      intArray0[3] = (int) (byte)124;
      intArray0[4] = (int) (byte)48;
      intArray0[5] = (int) (byte)124;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 48);
      assertArrayEquals(new int[] {124, 124, 124, 124, 48, 124}, intArray0);
      assertArrayEquals(new int[] {124, 124, 124, 124, 124}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) integerArray0);
      assertNotNull(objectArray1);
      assertFalse(shortArray0.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotSame(shortArray0, objectArray0);
      assertNotSame(shortArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 335L;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FLHp6=9<SJ,";
      stringArray0[1] = "* [a;ZJDZ!J m";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(960L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(960L, (long)long1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) longArray0);
      assertNotNull(objectArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotSame(longArray0, objectArray0);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      Float float0 = new Float((float) 960L);
      assertNotNull(float0);
      assertEquals(960.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'W');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(map0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-2162.8772F), 2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals((-1), int0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = Integer.getInteger("HP-UX");
      assertNull(integer1);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-2162.8772F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1371);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1371)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1371), (short) (-1371)}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertArrayEquals(new short[] {(short) (-1371)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1371), (short) (-1371)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1371), (short) (-1371)}, shortArray2);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, '$');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals((-1), int1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(2145891740);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2145891740, (int)integer0);
      
      Integer integer1 = new Integer(13);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(13, (int)integer1);
      
      Integer integer2 = Integer.getInteger("java.lang.String", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(13, (int)integer2);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) byteArray2, (Object) integer0, (int) (byte)87);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals((-1), int2);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1), 3358);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long((byte)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      float[] floatArray0 = new float[11];
      int[] intArray0 = new int[5];
      intArray0[0] = (-40);
      intArray0[1] = (-40);
      intArray0[2] = (-40);
      intArray0[3] = (-40);
      intArray0[4] = (-40);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-40), (-40), (-40), (-40), (-40)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, (-328), (-1.0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-244L);
      longArray0[1] = (-244L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1349L);
      assertArrayEquals(new long[] {(-244L), (-244L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-244L), (-244L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1748L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1748L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1748L);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-1.0F);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2144.419F);
      assertArrayEquals(new float[] {(-1748.0F), 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 4026;
      intArray0[2] = (-2270);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 64;
      intArray0[5] = (-2270);
      intArray0[6] = (-2173);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, 4026, (-2270), 0, 64, (-2270), (-2173)}, intArray0);
      assertArrayEquals(new int[] {0, 4026, (-2270), 0, 64, (-2270), (-2173)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("Lvht.BzCM");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[2] = boolean0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3926;
      shortArray0[1] = (short)2880;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3926;
      shortArray0[5] = (short)2880;
      shortArray0[6] = (short) (-764);
      shortArray0[7] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)3926, (short)2880, (short)0, (short)0, (short)3926, (short)2880, (short) (-764), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1087L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)31;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)3, (byte)3, (byte)3, (byte)1, (byte)0, (byte)3, (byte)31}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 57;
      intArray0[1] = 3452;
      intArray0[2] = 0;
      intArray0[3] = (-484);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-484));
      assertArrayEquals(new int[] {57, 3452, 0, (-484)}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-484);
      objectArray0[1] = (Object) 3452;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      assertNotNull(short0);
      assertEquals((short) (-18), (short)short0);
      
      Short short1 = new Short((byte) (-18));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-18), (short)short1);
      
      int[] intArray0 = new int[7];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)26151;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {26151.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-100));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-964L);
      longArray0[2] = (-251L);
      longArray0[3] = 2347L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-251L);
      doubleArray0[1] = (double) 2347L;
      doubleArray0[2] = (double) (-251L);
      doubleArray0[3] = (double) 2347L;
      doubleArray0[4] = (double) 2347L;
      doubleArray0[5] = (double) (-964L);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2347.0);
      assertArrayEquals(new double[] {(-251.0), 2347.0, (-251.0), 2347.0, 2347.0, (-964.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-251.0), (-251.0), 2347.0, 2347.0, (-964.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-543);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)512, 1452);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-543)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-801.2028F);
      floatArray1[2] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-801.2028F), 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1753L;
      longArray0[1] = 51L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1067L);
      longArray0[6] = (-1479L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-961), 192);
      assertArrayEquals(new long[] {1753L, 51L, (-1L), (-1L), (-1L), (-1067L), (-1479L)}, longArray0);
      assertArrayEquals(new long[] {1753L, 51L, (-1L), (-1L), (-1L), (-1067L), (-1479L)}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 81.0F;
      floatArray0[1] = (-2162.8772F);
      floatArray0[2] = 1600.2F;
      floatArray0[3] = 945.286F;
      floatArray0[4] = (-1414.1342F);
      floatArray0[5] = 2144.419F;
      floatArray0[6] = (-4293.9775F);
      floatArray0[7] = 1928.1434F;
      floatArray0[8] = 2352.63F;
      boolean boolean3 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {81.0F, (-2162.8772F), 1600.2F, 945.286F, (-1414.1342F), 2144.419F, (-4293.9775F), 1928.1434F, 2352.63F}, floatArray0, 0.01F);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean3);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 0L);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1175.68F);
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, longArray0.length);
      assertTrue(boolean2);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 899.28;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 950.156;
      doubleArray0[3] = 659.0;
      doubleArray0[4] = (-1157.7545059271);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3227.0;
      doubleArray0[7] = 0.0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 512);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(4, int0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte)2);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@7b79d75e', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3009);
      assertArrayEquals(new short[] {(short)3009}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-92));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-92);
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean2);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-92);
      boolean boolean3 = ArrayUtils.isSameLength(byteArray2, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, byteArray2.length);
      assertFalse(boolean3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertArrayEquals(new short[] {(short)3009}, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Short[] shortArray0 = new Short[20];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3009);
      assertNotNull(shortArray1);
      assertEquals(20, shortArray0.length);
      assertEquals(20, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-92));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-92);
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean2);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-92);
      boolean boolean3 = ArrayUtils.isSameLength(byteArray2, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(6, byteArray2.length);
      assertFalse(boolean3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(20, shortArray2.length);
      assertEquals(20, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 2;
      intArray2[4] = 1;
      int int0 = ArrayUtils.lastIndexOf(intArray2, (-1187));
      assertArrayEquals(new int[] {2, 1, 1, 2, 1}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(5, intArray2.length);
      assertEquals((-1), int0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      String string0 = ArrayUtils.toString((Object) "Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannot store ", string0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf((char[]) null, 's', (-1117));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-964L);
      longArray0[2] = (-964L);
      longArray0[3] = (-964L);
      longArray0[4] = (-964L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-251L));
      assertArrayEquals(new long[] {0L, (-964L), (-964L), (-964L), (-964L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-964L), (-964L), (-964L), (-964L)}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'M';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'M');
      assertArrayEquals(new char[] {'F', 'M'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(1, int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[19];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(19, byteArray0.length);
      assertEquals(19, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-254);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)2, (short) (-254), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short) (-254);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short) (-254);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-254.0), 0.0, 2.0, 2.0, (-254.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 64);
      assertArrayEquals(new double[] {0.0, (-254.0), 0.0, 2.0, 2.0, (-254.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('z');
      assertNotNull(character0);
      assertEquals('z', (char)character0);
      
      doubleArray0[0] = (double) (char)character0;
      char char0 = '}';
      Character character1 = Character.valueOf('}');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('}', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('}');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertEquals('}', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertEquals('}', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ';');
      assertArrayEquals(new char[] {';', '}', '}', '}'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)36;
      Byte byte1 = new Byte((byte)36);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)36, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)36, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-60));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-60), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1599;
      floatArray0[2] = (float) (-750);
      floatArray0[3] = (float) 1599;
      floatArray0[4] = (float) (-750);
      floatArray0[5] = (float) 1599;
      floatArray0[6] = (float) 1599;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1599.0F);
      assertArrayEquals(new float[] {(-1.0F), 1599.0F, (-750.0F), 1599.0F, (-750.0F), 1599.0F, 1599.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-750.0F), 1599.0F, (-750.0F), 1599.0F, 1599.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1727L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1727L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 17);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1727L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1727L);
      objectArray0[1] = (Object) (-1727L);
      objectArray0[2] = (Object) (-1727.0F);
      objectArray0[3] = (Object) (-1727.0F);
      objectArray0[4] = (Object) 0.0F;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[4], (-1));
      assertFalse(int1 == int0);
      assertEquals(5, objectArray0.length);
      assertEquals(4, int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1727.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1727.0F));
      assertArrayEquals(new float[] {(-1727.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Arguments cannot both be null";
      stringArray0[2] = ".Xac'm";
      String[] stringArray1 = ArrayUtils.add(stringArray0, " in an array of ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      assertFalse(boolean1);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, 51L);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-4561.0F), (-127));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(599.6385F);
      assertNotNull(float0);
      assertEquals(599.6385F, (float)float0, 0.01F);
      
      Float float1 = new Float(4.417652F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4.417652F, (float)float1, 0.01F);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-1750L));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-1750L);
      doubleArray0[3] = 601.3002;
      doubleArray0[4] = 601.3002;
      doubleArray0[5] = 601.3002;
      doubleArray0[6] = (double) (-1750L);
      doubleArray0[7] = 285.32959058706;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1750.0), 0.0, 601.3002, 601.3002, 601.3002, (-1750.0), 285.32959058706}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1750.0), 0.0, 601.3002, 601.3002, 601.3002, (-1750.0), 285.32959058706}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)15);
      assertNotNull(short0);
      assertEquals((short)15, (short)short0);
      
      Short short1 = new Short((short)15);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)15, (short)short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte) (-29);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)2, (byte) (-29), (byte) (-29), (byte)2, (byte) (-29), (byte) (-29), (byte) (-29), (byte) (-29)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'g';
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray1, (Object) "", (int) (byte)7);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-326), 0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1115;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1115);
      assertArrayEquals(new short[] {(short)1115}, shortArray0);
      assertArrayEquals(new short[] {(short)1115, (short)1115}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1115}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)1115;
      floatArray0[1] = (float) (short)1115;
      floatArray0[2] = (float) (short)1115;
      floatArray0[3] = (float) (short)1115;
      floatArray0[4] = (float) (short)1115;
      floatArray0[5] = (float) (short)1115;
      floatArray0[6] = (float) (short)1115;
      floatArray0[7] = (float) (short)1115;
      floatArray0[8] = (float) (short)1115;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1115.0F, 1115.0F, 1115.0F, 1115.0F, 1115.0F, 1115.0F, 1115.0F, 1115.0F, 1115.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)1115, 1507);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-1.0F), 2);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(2, int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray3 = ArrayUtils.clone(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray3.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 46);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long((-686L));
      assertNotNull(long0);
      assertEquals((-686L), (long)long0);
      
      Float float0 = new Float((-1727.0F));
      assertNotNull(float0);
      assertEquals((-1727.0F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((-1727.0F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1727.0F), (float)float1, 0.01F);
      
      Float float2 = new Float((float) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1727.0F);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1727.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)23);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Integer integer0 = Integer.getInteger("#AAvXIhg|x:^<U.", (int) (short)26151);
      assertNotNull(integer0);
      assertEquals(26151, (int)integer0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-360L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-360L), (long)long1);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Short[] shortArray0 = new Short[13];
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2407.9661732;
      doubleArray0[2] = (-1611.3689662);
      doubleArray0[3] = (-897.0);
      doubleArray0[4] = 1202.38763915;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1611.3689662), 1.0);
      assertArrayEquals(new double[] {1.0, 2407.9661732, (-1611.3689662), (-897.0), 1202.38763915}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      
      comparableArray0[0] = (Comparable<Integer>) 2;
      Comparable<Integer>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertNotNull(comparableArray1);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertEquals(1, comparableArray0.length);
      assertEquals(2, comparableArray1.length);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) comparableArray1, (Object[]) comparableArray1);
      assertNotNull(objectArray0);
      assertFalse(comparableArray0.equals((Object)comparableArray1));
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertEquals(1, comparableArray0.length);
      assertEquals(2, comparableArray1.length);
      assertEquals(4, objectArray0.length);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-360L);
      longArray0[1] = 1L;
      Double double0 = new Double(1L);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2386), 16);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@2758ae3b', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-600L));
      assertNotNull(long0);
      assertEquals((-600L), (long)long0);
      
      longArray0[0] = long0;
      long long1 = (-1L);
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-600L));
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-600L), (long)long3);
      
      longArray0[2] = long3;
      longArray0[3] = long2;
      Long long4 = new Long(long1);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertEquals((-1L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(long1);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long2));
      assertEquals((-1L), (long)long5);
      
      longArray0[5] = long5;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray1, (Object[]) longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertTrue(boolean0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-3539), 't');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3539, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      Float float0 = new Float((float) (byte)19);
      assertNotNull(float0);
      assertEquals(19.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(81.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(81.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((-4295.9927F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-4295.9927F), (float)float2, 0.01F);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = float0;
      floatArray1[1] = float1;
      floatArray1[2] = float0;
      floatArray1[3] = float0;
      floatArray1[4] = float0;
      floatArray1[5] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)100;
      Byte byte1 = new Byte((byte)100);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)100, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)100}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)100;
      shortArray0[4] = (short) byte0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100, (short)100, (short)100}, shortArray0);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)100, (short)100, (short)100}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[1];
      int int0 = Byte.compare((byte)100, byte0);
      assertEquals(0, int0);
      
      floatArray0[0] = (float) (short)100;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Long long0 = new Long((short)100);
      assertNotNull(long0);
      assertEquals(100L, (long)long0);
      
      Long long1 = Long.getLong("T:X`K^4,t", long0);
      assertNotNull(long1);
      assertEquals(100L, (long)long1);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {100L, 100L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)668;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)668}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)668, (int) (short)668);
      assertArrayEquals(new short[] {(short)668}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-824);
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-22282);
      shortArray0[3] = (short) (-2303);
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-824), (short)127, (short) (-22282), (short) (-2303), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'R';
      char[] charArray1 = ArrayUtils.add(charArray0, 'R');
      assertArrayEquals(new char[] {'', 'R'}, charArray0);
      assertArrayEquals(new char[] {'', 'R', 'R'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)91);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)91, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-54));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-54), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)91);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)91, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-118));
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertEquals((byte) (-118), (byte)byte7);
      
      byteArray0[6] = byte7;
      try { 
        Byte.decode("7ic`\"9z,LWi]_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7ic`\"9z,LWi]_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, int0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)3;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j(GYKo=\tNE@*{!2J";
      stringArray0[1] = "=";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String[] stringArray2 = ArrayUtils.addAll(stringArray1, stringArray0);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(6, stringArray2.length);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1750L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1750L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) (-1750L));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1750.0F), (float)float1, 0.01F);
      
      Float float2 = new Float(831.707F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(831.707F, (float)float2, 0.01F);
      
      Float float3 = new Float((float) (-1));
      assertNotNull(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1750L));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 2);
      String string0 = ArrayUtils.toString((Object) null, "u!g:G)42J'.RL^B");
      assertNotNull(string0);
      assertEquals("u!g:G)42J'.RL^B", string0);
      
      comparableArray0[0] = (Comparable<String>) "u!g:G)42J'.RL^B";
      String string1 = ArrayUtils.toString((Object) comparableArray0[0], "u!g:G)42J'.RL^B");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, comparableArray0.length);
      assertEquals("u!g:G)42J'.RL^B", string1);
      
      comparableArray0[1] = (Comparable<String>) "u!g:G)42J'.RL^B";
      Comparable<String>[] comparableArray1 = ArrayUtils.addAll(comparableArray0, comparableArray0);
      assertNotNull(comparableArray1);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      assertEquals(2, comparableArray0.length);
      assertEquals(4, comparableArray1.length);
      assertNotSame(comparableArray0, comparableArray1);
      assertNotSame(comparableArray1, comparableArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(comparableArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'u!g:G)42J'.RL^B', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1349L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(8, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      long[] longArray3 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray3);
      assertNotNull(longArray3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(8, longArray3.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1349L;
      floatArray0[1] = (float) 1349L;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1349.0F, 1349.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 19);
      assertArrayEquals(new int[] {19}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long((-686L));
      assertNotNull(long0);
      assertEquals((-686L), (long)long0);
      
      Float float0 = new Float((-1727.0F));
      assertNotNull(float0);
      assertEquals((-1727.0F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((-1727.0F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1727.0F), (float)float1, 0.01F);
      
      Float float2 = new Float((float) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = 'G';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'>', '>', '>', 'G', '>', '>', '>', '>'}, charArray0);
      assertArrayEquals(new char[] {'>', '>', '>', 'G', '>', '>', '>', '>'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, '$');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals((-1), int1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-244L);
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1349L);
      assertArrayEquals(new long[] {(-244L), 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-244L), 1L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-55));
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-3612));
      assertNotNull(integer0);
      assertEquals((-3612), (int)integer0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3148);
      intArray0[2] = (-3612);
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1349L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(8, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(' ');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = Character.highSurrogate(120);
      assertEquals('\uD7C0', char0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'O');
      assertArrayEquals(new char[] {'1', ' '}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[8];
      Byte byte0 = new Byte((byte)90);
      assertNotNull(byte0);
      assertEquals((byte)90, (byte)byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte)90);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)90, (byte)byte1);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float((float) (byte)19);
      assertNotNull(float0);
      assertEquals(19.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte)19);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(19.0F, (float)float1, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[7] = (-964L);
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2713.163F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2713.163F), (float)float1, 0.01F);
      
      Float float2 = new Float((float) (-964L));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-964.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      floatArray0[2] = float1;
      floatArray0[3] = float2;
      Float float3 = new Float((double) 0L);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[4] = float3;
      Float float4 = new Float(1.5);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float4, 0.01F);
      
      floatArray0[5] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-964.0F), (-1.0F), (-2713.163F), (-964.0F), 0.0F, 1.5F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-2713.163F);
      doubleArray0[4] = (double) (float)floatArray0[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-2713.1630859375), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-2713.1630859375), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 1910.509029470846);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-2713.1630859375), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-2713.1630859375), (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[30];
      charArray0[0] = 'w';
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1209.3456F;
      floatArray0[1] = (float) 'w';
      floatArray0[2] = 1209.3456F;
      floatArray0[3] = 1209.3456F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1209.3456F, 119.0F, 1209.3456F, 1209.3456F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Double double0 = new Double(276.0);
      assertNotNull(double0);
      assertEquals(276.0, (double)double0, 0.01);
      
      Double double1 = new Double(1757.35050921211);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1757.35050921211, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2202.166356386);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1107.7));
      assertNotNull(float0);
      assertEquals((-1107.7F), (float)float0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) floatArray0, (Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1627);
      boolean boolean2 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1627), (short)0, (short)0}, shortArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1627);
      doubleArray0[1] = (double) (short) (-1627);
      doubleArray0[2] = (double) (short) (-1627);
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1627.0), (-1627.0), (-1627.0)}, doubleArray0, 0.01);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short short0 = (short)2702;
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2702);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, ", '");
      assertNotNull(string0);
      
      byte byte0 = (byte)27;
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)27);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      short short1 = (short) (-404);
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (byte)27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(int1 == int0);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) false;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object1, (-2087));
      assertFalse(object1.equals((Object)object0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int2);
      assertNotSame(object1, object0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-2087);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {(-1), (-2087), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2087), (-1), (-1), (-1), (-1), (-1)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-280));
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-280);
      floatArray0[1] = (float) (short) (-280);
      floatArray0[2] = (float) (short) (-280);
      floatArray0[3] = (float) (short) (-280);
      floatArray0[4] = (float) (short) (-280);
      floatArray0[5] = (float) (short) (-280);
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)0;
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-280.0F);
      doubleArray0[1] = (double) (byte) (-81);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-1), 1.0);
      assertArrayEquals(new double[] {(-280.0), (-81.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-280);
      intArray0[1] = (int) (byte) (-81);
      intArray0[2] = 16;
      intArray0[3] = (int) (byte) (-81);
      intArray0[4] = (-5522);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-81.0), (-1857));
      assertArrayEquals(new double[] {(-280.0), (-81.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".Xac'm";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " in an array of ";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) ".Xac'm";
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)28;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)70, (byte)28}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)3298, 36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 6, 3338);
      assertArrayEquals(new char[] {'y', 'Y', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'u';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'%', 'u', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (int) '%';
      intArray0[3] = (int) 'l';
      boolean boolean0 = Float.isFinite(0);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 0, (double) 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1107.7));
      assertNotNull(float0);
      assertEquals((-1107.7F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float float1 = Float.sum((float) floatArray0[0], (float) floatArray0[0]);
      assertEquals(2, floatArray0.length);
      assertEquals((-2215.4F), float1, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-425), (-544));
      assertNull(byteArray0);
      
      Float float2 = new Float((-2215.4F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2215.4F), (float)float2, 0.01F);
      
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) floatArray0[0];
      floatArray1[1] = (float) (-425);
      floatArray1[2] = (float) (-544);
      floatArray1[3] = (float) (-425);
      floatArray1[4] = (float) floatArray0[0];
      floatArray1[5] = (float) (-544);
      floatArray1[6] = (float) (-544);
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-544.0F), (-544.0F), (-1107.7F), (-425.0F), (-544.0F), (-425.0F), (-1107.7F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
      
      Byte byte0 = new Byte((byte) (-83));
      assertNotNull(byte0);
      assertEquals((byte) (-83), (byte)byte0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'E';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'E', 'K', 'K', 'K', 'K'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertArrayEquals(new float[] {(-544.0F), (-544.0F), (-1107.7F), (-425.0F), (-544.0F), (-425.0F), (-1107.7F)}, floatArray1, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, floatArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short short0 = new Short((short) (-605));
      assertNotNull(short0);
      assertEquals((short) (-605), (short)short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)57, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)2, (byte) (-88), (byte)57, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      doubleArray0[1] = (Double) 950.156;
      doubleArray0[2] = (Double) 950.156;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3079.8;
      doubleArray0[1] = 4314.03902;
      doubleArray0[2] = 652.5;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2.0);
      doubleArray0[5] = (-1498.77134);
      doubleArray0[6] = (-248.99736480205414);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {3079.8, 4314.03902, 652.5, 0.0, (-2.0), (-1498.77134), (-248.99736480205414)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3079.8, 4314.03902, 652.5, 0.0, (-2.0), (-1498.77134), (-248.99736480205414)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("zq`k,S.+AfAY7}Dd]C");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("zq`k,S.+AfAY7}Dd]C");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("1+gBP$Nd");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("1+gBP$Nd");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("zq`k,S.+AfAY7}Dd]C");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      
      Boolean boolean6 = new Boolean(true);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean6);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) true;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1843L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-2147483644);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 2;
      intArray0[5] = 8;
      intArray0[6] = (-3122);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-3122), 8, 2, (-1), (-1), (-2147483644), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Arguments cannot both be null";
      stringArray0[2] = ".Xac'm";
      String[] stringArray1 = ArrayUtils.add(stringArray0, " in an array of ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-56), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-56), (byte) (-1)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-56);
      doubleArray0[2] = (double) (byte) (-110);
      doubleArray0[3] = (double) (byte) (-56);
      doubleArray0[4] = (double) (byte)3;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-56.0), (-110.0), (-56.0), 3.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-56.0), (-110.0), (-56.0), 3.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 899.28;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-919));
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 263;
      intArray0[2] = (-567);
      intArray0[3] = 2692;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray1, object0, (-2115));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte)87, (int) (byte)87);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)3;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3, (byte) (-110), (byte)3, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)3;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 46;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte)87;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (byte)87;
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {46L, 87L, (-1L), 87L, (-1L), (-1L), 87L}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2087));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(int1 == int0);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)3;
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'N');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'F';
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {70.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {70.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {70.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-2162.8772F), (-15));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals((-1), int0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = Integer.getInteger("HP-UX");
      assertNull(integer1);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-2162.8772F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)19, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)19, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((float) (byte)19);
      assertNotNull(float0);
      assertEquals(19.0F, (float)float0, 0.01F);
      
      ArrayUtils.reverse((float[]) null);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertArrayEquals(new byte[] {(byte)19, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray2, (Object) null, 298);
      assertArrayEquals(new byte[] {(byte)19, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 3377L;
      longArray0[2] = (-3883L);
      longArray0[3] = (-765L);
      longArray0[4] = 1L;
      longArray0[5] = 1792L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 17, 0);
      assertArrayEquals(new long[] {0L, 3377L, (-3883L), (-765L), 1L, 1792L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-98));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-98), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-98));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-98), (byte)byte2);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)126);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-98), (byte) (-98), (byte)126}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[7] = false;
      booleanArray0[1] = false;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-3612));
      assertNotNull(integer0);
      assertEquals((-3612), (int)integer0);
      
      String string0 = Integer.toUnsignedString((-3612));
      assertNotNull(string0);
      assertEquals("4294963684", string0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, integer0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (int) 'c';
      intArray0[3] = 1;
      intArray0[4] = (-3132);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 1, 99, 1, (-3132), 1, 1, 99, 1, (-3132)}, intArray1);
      assertArrayEquals(new int[] {1, 1, 99, 1, (-3132)}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      char char0 = Character.highSurrogate((-3612));
      assertEquals('\uD7BC', char0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'n';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = 'B';
      charArray0[4] = '$';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '$', '$', 'B', '$'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '$';
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      assertNotSame(objectArray0, objectArray1);
      
      Float float0 = new Float((-1727.0F));
      assertNotNull(float0);
      assertEquals((-1727.0F), (float)float0, 0.01F);
      
      ArrayUtils.reverse((float[]) null);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'K');
      assertArrayEquals(new char[] {'\u0000', '$', '$', 'B', '$'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int2);
      assertNotSame(objectArray0, objectArray1);
      
      int int3 = ArrayUtils.lastIndexOf((Object[]) byteArray2, objectArray0[0]);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Boolean[] booleanArray0 = null;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1701;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 1;
      intArray0[4] = (-2270);
      intArray0[5] = 1093;
      intArray0[6] = (-123);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {1701, 1, 3, 1, (-2270), 1093, (-123)}, intArray0);
      assertArrayEquals(new int[] {1701, 1, 3, 1, (-2270), 1093, (-123)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '!');
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = null;
      Integer integer0 = new Integer(1093);
      assertNotNull(integer0);
      assertEquals(1093, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 1093, (Integer) (-123));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1093, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[3];
      intArray0[1] = (-484);
      intArray0[2] = (-484);
      boolean boolean0 = ArrayUtils.contains(intArray0, 3452);
      assertArrayEquals(new int[] {0, (-484), (-484)}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2146914778;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-555), (-555));
      assertArrayEquals(new double[] {2.146914778E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'n';
      charArray0[1] = 'n';
      charArray0[3] = 'B';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'n', '\u0000', 'B', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      assertNotSame(objectArray0, objectArray1);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short) (byte)87);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1403L);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 2146657374, 3517);
      assertNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 77;
      intArray0[1] = (int) 'B';
      intArray0[2] = 2146657374;
      intArray0[3] = (int) 'B';
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)87, 48);
      assertArrayEquals(new int[] {77, 66, 2146657374, 66}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1902), Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 0, 64);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[2] = 'Z';
      charArray0[3] = 'A';
      charArray0[4] = 'Z';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'A', '\u0000', 'Z', 'A', 'Z'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = 2;
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (-2162.8772F), 2);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals((-1), int1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = int0;
      intArray0[3] = 16;
      intArray0[4] = 2;
      intArray0[5] = int0;
      intArray0[6] = int0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 2, 16, 2, 2, 2}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean boolean2 = true;
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      boolean boolean5 = Boolean.logicalXor(false, false);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = Boolean.logicalAnd(false, false);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean7 = Boolean.valueOf(false);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7);
      
      booleanArray0[0] = boolean7;
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean3;
      boolean boolean8 = Boolean.getBoolean("rjfVN}I+PuIM7u!cOa");
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8);
      
      booleanArray0[3] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      String string0 = ArrayUtils.toString((Object) boolean2);
      assertNotNull(string0);
      assertFalse(boolean2 == boolean8);
      assertFalse(boolean2 == boolean6);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean5);
      assertEquals("true", string0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)87;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (int) (byte)87);
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {87.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-824L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(8, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1737;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1737}, shortArray0);
      assertArrayEquals(new short[] {(short)1737}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int int0 = Byte.compare((byte) (-106), (byte) (-106));
      assertEquals(0, int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-106);
      doubleArray0[1] = (double) (byte) (-106);
      doubleArray0[2] = (double) (byte) (-106);
      doubleArray0[3] = (double) (short)1737;
      doubleArray0[4] = (-947.2);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 193);
      assertArrayEquals(new double[] {(-106.0), (-106.0), (-106.0), 1737.0, (-947.2), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-106.0), (-106.0), (-106.0), 1737.0, (-947.2), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.reverse((boolean[]) null);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-947.2), 1737.0, (-106.0), (-106.0), (-106.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-731), 3828);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((float) 0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float2;
      floatArray0[2] = float0;
      floatArray0[3] = float2;
      floatArray0[4] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[4]);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (float)floatArray0[0];
      doubleArray0[2] = (double) (float)floatArray0[1];
      doubleArray0[3] = 601.3002;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 601.3002}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 601.3002}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)316;
      shortArray0[1] = (short) (-1627);
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-1627);
      shortArray0[4] = (short) (-24338);
      shortArray0[5] = (short) (-1627);
      shortArray0[6] = (short) (-1627);
      shortArray0[7] = (short) (-1627);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)316, (short) (-1627), (short)9, (short) (-1627), (short) (-24338), (short) (-1627), (short) (-1627), (short) (-1627)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1727L);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1727L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1727L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1727L);
      objectArray0[1] = (Object) (-1727L);
      objectArray0[2] = (Object) (-1727.0F);
      objectArray0[3] = (Object) (-1727.0F);
      objectArray0[4] = (Object) 0.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object0, (-1));
      assertTrue(int1 == int0);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1727.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1727.0F));
      assertArrayEquals(new float[] {(-1727.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) (-1727.0F);
      floatArray1[1] = (Float) (-1727.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertArrayEquals(new float[] {(-1727.0F), (-1727.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1792.99614245;
      doubleArray0[1] = 1792.99614245;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1995), (int) (short)3009);
      assertArrayEquals(new double[] {1792.99614245, 1792.99614245, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1792.99614245, 1792.99614245, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 18L);
      assertNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.add((long[]) null, 0L);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[4] = 18L;
      long[] longArray3 = ArrayUtils.removeElement(longArray2, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 18L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 18L}, longArray3);
      assertNotNull(longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray3.length);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)10;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)10);
      assertArrayEquals(new short[] {(short)10, (short)10}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("f");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = new Boolean("f");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[5] = boolean2;
      boolean boolean3 = Boolean.logicalXor(true, false);
      assertTrue(boolean3);
      
      booleanArray0[6] = boolean1;
      booleanArray0[7] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      boolean boolean4 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean4 == boolean3);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'#', 'u', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(10, charArray0.length);
      assertEquals(10, characterArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[0] = (int) 'l';
      Float float0 = new Float((float) 108);
      assertNotNull(float0);
      assertEquals(108.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) 108);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(108.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((-1.0F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float float3 = new Float((-676.477F));
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-676.477F), (float)float3, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 689.61633F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)778);
      assertNotNull(short0);
      assertEquals((short)778, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)778);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)778, (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertArrayEquals(new short[] {(short)778, (short)778}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-79);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-76), (byte)46, (byte)2, (byte)1, (byte)101, (byte) (-79)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleImmutableEntry<String, String>[]) null, (AbstractMap.SimpleImmutableEntry<String, String>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = 'w';
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 950.156;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 950.156}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'i');
      assertTrue(int1 == int0);
      assertEquals(17, charArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) doubleArray1[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[3] = object0;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object0, (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int2);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 35);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(17, charArray0.length);
      assertEquals(17, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 46;
      longArray0[1] = (long) (byte)87;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte)87;
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 87L;
      floatArray0[1] = (float) (byte)87;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {87.0F, 87.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 87.0F;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1), (int) (byte)87);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int1);
      
      Integer integer0 = new Integer((-1733));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-1733), (int)integer0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, (Object) integer0);
      assertNull(objectArray0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-750));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-23));
      assertNotNull(byte0);
      assertEquals((byte) (-23), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-23));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-23), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte4);
      
      Float float0 = new Float((float) 57);
      assertNotNull(float0);
      assertEquals(57.0F, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-857.98F));
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {57.0F, 57.0F, 57.0F, 57.0F, 57.0F, 57.0F, 57.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = 'w';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'#', 'u', 'l'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) 'l';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3050);
      assertArrayEquals(new int[] {35, 108, 35, 108, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'#', 'u', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-3184L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-3184L), (long)long2);
      
      longArray0[1] = long2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 'u';
      doubleArray0[3] = 1539.37573255558;
      doubleArray0[4] = (double) 35;
      doubleArray0[5] = (double) (long)longArray0[1];
      doubleArray0[6] = (double) long0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3452.0, 35);
      assertArrayEquals(new double[] {108.0, 0.0, 117.0, 1539.37573255558, 35.0, (-3184.0), 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 2054L;
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-91), (-91));
      assertArrayEquals(new long[] {1L, 2054L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 2054L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 2054L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-91), (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -91, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1107.7));
      assertNotNull(float0);
      assertEquals((-1107.7F), (float)float0, 0.01F);
      
      float float1 = Float.sum((-2500.6846F), 601.98F);
      assertEquals((-1898.7046F), float1, 0.01F);
      
      floatArray0[0] = float0;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1618.375453559, 0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'#', 'u', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) '#';
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '#');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'#', 'u', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) 'u';
      doubleArray0[3] = (double) 35;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 108);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'a';
      charArray0[2] = 'n';
      charArray0[3] = 'u';
      charArray0[4] = 'Q';
      charArray0[5] = 'd';
      charArray0[6] = 'H';
      charArray0[7] = 'a';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'a', 'H', 'd', 'Q', 'u', 'n', 'a', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      Float float0 = new Float((-30.495724F));
      Float float1 = new Float((-30.495724F));
      Float float2 = new Float((float) 0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-824);
      shortArray0[1] = (short) (-824);
      shortArray0[2] = (short) (-22282);
      shortArray0[4] = (short) (-2303);
      shortArray0[5] = (short) (-3108);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.nullToEmpty(byteArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'u';
      charArray0[2] = '#';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)62;
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'v');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '+';
      charArray0[2] = 'A';
      char[] charArray1 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      Short short1 = new Short((byte) (-18));
      Short short2 = new Short((short)26151);
      Short short3 = new Short((short) (-704));
      Short short4 = new Short((short)22);
      int[] intArray0 = new int[9];
      intArray0[0] = 64;
      intArray0[1] = (int) (short) (-704);
      intArray0[2] = (int) (byte) (-18);
      intArray0[3] = (int) (short)26151;
      intArray0[4] = (int) (short)26151;
      intArray0[5] = (int) (byte) (-18);
      intArray0[6] = (int) (short)26151;
      intArray0[7] = (int) (short)22;
      intArray0[8] = (int) (short) (-704);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-704);
      longArray0[1] = (long) 22;
      longArray0[2] = (long) (short)22;
      longArray0[3] = 1349L;
      longArray0[4] = (long) 22;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-18));
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 22L;
      longArray1[1] = (Long) 1349L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(2, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(14, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)74;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.contains(byteArray0, (byte)87);
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-473), 9);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'F';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {70.0, 70.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      ArrayUtils.isNotEmpty((byte[]) null);
      Character character0 = new Character(' ');
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)27167);
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-430));
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2601));
      shortArray0[2] = short2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1780));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1780, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) shortArray0, (Object[]) shortArray0);
      assertNotSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = Integer.getInteger("", 2131);
      integerArray0[0] = integer0;
      ArrayUtils.toPrimitive((Boolean[]) null, false);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integerArray0[0];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) integerArray0[0];
      objectArray0[4] = (Object) integerArray0[0];
      objectArray0[5] = (Object) integerArray0[0];
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) "";
      Object[] objectArray1 = ArrayUtils.clone(objectArray0);
      assertEquals(8, objectArray1.length);
      
      Float float0 = new Float((float) (short) (-728));
      Float.isFinite((short)4);
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-728.0F)}, floatArray1, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-94.4344), (-1750.0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ArrayUtils.removeElement((short[]) null, (short) (-280));
      ArrayUtils.isNotEmpty((byte[]) null);
      Character.valueOf(' ');
      ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      ArrayUtils.toObject((short[]) null);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = 'l';
      ArrayUtils.toObject(charArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) 'l';
      Float.isFinite(35);
      ArrayUtils.toPrimitive((Float[]) null);
      ArrayUtils.contains((double[]) null, (double) 35, 127.7465856696331);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)87);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'n';
      charArray0[1] = 'n';
      Long long0 = new Long((-1012L));
      Long long1 = Long.getLong("Ma SAa", long0);
      Long long2 = new Long((-1688L));
      Long[] longArray0 = new Long[10];
      Long long3 = new Long((-46L));
      longArray0[0] = long3;
      longArray0[1] = long2;
      longArray0[2] = long0;
      longArray0[3] = long1;
      Long long4 = new Long((-2319L));
      Long.toUnsignedString((long) longArray0[1]);
      longArray0[4] = long4;
      longArray0[5] = long2;
      longArray0[6] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1727L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-46L), (-1688L), (-1012L), (-1012L), (-2319L), (-1688L), (-1012L), (-1727L), (-1727L), (-1727L)}, longArray1);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'n');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-1087L);
      longArray0[2] = 1406L;
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) integerArray0);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Object object0 = new Object();
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.isSameLength((float[]) null, (float[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-628);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-628.0), (-628), 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 586.0F;
      ArrayUtils.indexOf(floatArray0, 0.0F, (-955));
      comparableArray0[0] = (Comparable<Integer>) (-1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.lastIndexOf(booleanArray0, false);
      comparableArray0[1] = (Comparable<Integer>) 0;
      try { 
        Integer.valueOf("<jpwW:F0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<jpwW:F0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = ArrayUtils.isSameType(object0, object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      Object object0 = new Object();
      Integer integer0 = new Integer((-3612));
      ArrayUtils.isSameType(integer0, integer0);
      int int0 = 1;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-3148);
      intArray0[2] = (-3612);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) (-3612);
      integerArray0[2] = (Integer) (-3148);
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) (-3612);
      integerArray0[5] = (Integer) 1;
      integerArray0[6] = (Integer) 1;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-3148), (-3612));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (int)integerArray0[4];
      floatArray0[2] = (float) (-3612);
      floatArray0[3] = (float) (-3612);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) (-3612);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Short short0 = new Short((byte) (-18));
      Short short1 = new Short((byte) (-18));
      Short short2 = new Short((short)26151);
      Short short3 = new Short((short) (-704));
      Short short4 = new Short((short)22);
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short4;
      shortArray0[1] = short3;
      ArrayUtils.toPrimitive(shortArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (int) (byte)78);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 6, 3338);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)121;
      byteArray0[3] = (byte) (-18);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-3834), (int) (byte) (-51));
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ArrayUtils.addAll((Object[]) null, (Object[]) null);
      Object object0 = new Object();
      Object object1 = new Object();
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-244), (-3612));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      ArrayUtils.toPrimitive((Double[]) null);
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1107.7));
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 0L, 100);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3973;
      shortArray0[1] = (short)17;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3973);
      assertArrayEquals(new short[] {(short)17}, shortArray1);
      
      Float float0 = new Float(584.07F);
      Float float1 = new Float(1.0F);
      Float float2 = new Float((float) (short)17);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)17;
      longArray0[1] = (long) (short)17;
      longArray0[2] = (long) (short)3973;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {17L, 17L, 3973L, 17L, 17L, 3973L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1750L);
      ArrayUtils.reverse(longArray0);
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      
      Boolean boolean0 = new Boolean(false);
      Boolean.valueOf(true);
      Boolean boolean1 = Boolean.TRUE;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      
      String string0 = ArrayUtils.toString((Object) ">tBIK=H");
      assertEquals(">tBIK=H", string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1871.488106897763);
      doubleArray0[1] = 917.98373231;
      doubleArray0[2] = (double) (-1750L);
      doubleArray0[3] = (double) (-1750L);
      doubleArray0[4] = (double) (-1750L);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1750L);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-7));
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:15:10 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UnionType_ESTest extends UnionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "VQ48");
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) templateType0, (JSType) allType0, (JSType) errorFunctionType0, (JSType) allType0, (JSType) errorFunctionType0, (JSType) unionType0, (JSType) allType0, (JSType) allType0, jSType0);
      UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType1.hasAnyTemplateInternal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      boolean boolean0 = unionType0.hasAnyTemplate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) numberType0, (JSType) instanceObjectType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.matchConstraint(instanceObjectType0);
      assertFalse(instanceObjectType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      NoType noType0 = new NoType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, (JSType) numberType0, (JSType) numberType0, (JSType) parameterizedType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.collapseUnion();
      assertFalse(jSType1.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.collapseUnion();
      assertFalse(jSType1.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.collapseUnion();
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) unknownType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.collapseUnion();
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      JSType jSType0 = unionType0.collapseUnion();
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      boolean boolean0 = unionType0.setValidator(predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      String string0 = unionType0.toDebugHashCodeString();
      assertEquals("{({1})}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) numberType0, (JSType) instanceObjectType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      numberType0.setResolvedTypeInternal(instanceObjectType0);
      unionType0.resolveInternal((ErrorReporter) null, instanceObjectType0);
      assertTrue(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) numberType0, (JSType) instanceObjectType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.resolveInternal((ErrorReporter) null, instanceObjectType0);
      assertTrue(instanceObjectType0.isResolved());
      assertTrue(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(numberType0);
      JSType.TypePair jSType_TypePair1 = unionType0.getTypesUnderShallowInequality(jSType_TypePair0.typeA);
      assertFalse(jSType_TypePair1.equals((Object)jSType_TypePair0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(numberType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType1.isConstructor());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality(numberType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.getPropertyType("");
      boolean boolean0 = unionType0.isSubtype(jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      String string0 = unionType0.toString();
      assertEquals("(Number|number)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType1 = noResolvedType0.getPropertyType("Sbr{");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, jSType0, (JSType) numberType0, jSType1, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType2 = unionType0.getRestrictedUnion(jSType0);
      assertFalse(jSType2.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.contains(numberType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.contains(unionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, unionType0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of(jSType0, jSType0, (JSType) unionType0, (JSType) unionType0, (JSType) proxyObjectType0, (JSType) unionType0);
      UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList1);
      JSType jSType1 = unionType1.getLeastSupertype(proxyObjectType0);
      assertFalse(jSType1.equals((Object)unionType0));
      assertNotSame(jSType1, unionType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType jSType2 = unionType0.getLeastSupertype(jSType1);
      assertFalse(jSType2.equals((Object)unionType0));
      assertFalse(jSType2.equals((Object)jSType1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isEquivalentTo((JSType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unionType0, (List<JSType>) immutableList0);
      unionType0.meet(functionType0);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) immutableList0);
      unionType0.meet(functionType0);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.meet(numberType0);
      assertSame(jSType1, numberType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      JSType jSType0 = unionType0.meet(numberType0);
      assertFalse(jSType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType jSType2 = unionType0.meet(jSType1);
      assertFalse(jSType2.isConstructor());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.base.CharMatcher$6");
      JSType jSType0 = errorFunctionType0.getPropertyType("com.google.javascript.rhino.jstype.UnionType");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0, (JSType) errorFunctionType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getLeastSupertype(recordType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, unionType0);
      JSType jSType1 = unionType0.getLeastSupertype(proxyObjectType0);
      assertSame(jSType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.getLeastSupertype(jSType0);
      assertSame(jSType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) numberType0, (JSType) templateType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType0 = unionType0.getLeastSupertype(templateType0);
      assertNotSame(jSType0, unionType0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) unknownType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      UnknownType unknownType1 = (UnknownType)unionType0.meet(unionType0);
      assertFalse(unknownType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) noType0, (JSType) numberType0, (JSType) noType0, (JSType) noType0, (JSType) numberType0, (JSType) numberType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNullable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNullable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.testForEquality(unionType0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0, (JSType) objectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.restrictByNotNullOrUndefined();
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ObjectType objectType0 = unionType0.dereference();
      assertFalse(objectType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      boolean boolean0 = unionType0.canBeCalled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canBeCalled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) null, "(", "Named type with empty name component", 0, 0);
      linkedList0.add(jSType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(objectType0);
      boolean boolean0 = unionType0.canAssignTo(jSType_TypePair0.typeB);
      assertTrue(boolean0);
      assertFalse(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.canAssignTo(jSType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = (JSType) numberType0;
      jSTypeArray0[2] = (JSType) numberType0;
      jSTypeArray0[3] = (JSType) numberType0;
      JSType jSType1 = jSTypeRegistry0.createUnionType(jSTypeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, (JSType) voidType0, (JSType) numberType0, jSType1, jSType1);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType2 = unionType0.findPropertyType("Named type with empty name component");
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType jSType2 = jSType1.findPropertyType("Named type with empty name component");
      assertNull(jSType2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      NoType noType0 = new NoType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, jSType0, (JSType) numberType0, (JSType) numberType0, (JSType) parameterizedType0, (JSType) noType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType jSType1 = unionType0.findPropertyType("");
      assertEquals(BooleanLiteralSet.EMPTY, jSType1.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesObjectContext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      boolean boolean0 = unionType0.matchesObjectContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.getReturnType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, jSType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesStringContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      boolean boolean0 = unionType0.matchesStringContext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.matchesInt32Context();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      boolean boolean0 = unionType0.matchesInt32Context();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      boolean boolean0 = hashSet0.add(unionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality(allType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, (JSType) numberType0, jSType0, (JSType) numberType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      Visitor<BooleanType> visitor0 = (Visitor<BooleanType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn(booleanType0).when(visitor0).caseUnionType(any(com.google.javascript.rhino.jstype.UnionType.class));
      BooleanType booleanType1 = unionType0.visit(visitor0);
      assertTrue(booleanType1.matchesObjectContext());
  }
}

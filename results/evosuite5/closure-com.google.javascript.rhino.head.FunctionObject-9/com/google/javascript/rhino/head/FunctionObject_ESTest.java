/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:35:08 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FieldAndMethods;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.MemberBox;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeParameters");
      assertNotNull(method0);
      
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "getTypeParameters");
      FunctionObject functionObject0 = new FunctionObject("getTypeParameters", method0, nativeJavaMethod0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(25, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getAnnotatedReturnType");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "getAnnotatedReturnType");
      FunctionObject functionObject0 = new FunctionObject("getAnnotatedReturnType", method0, nativeJavaMethod0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeJavaMethod0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.reflect.Method
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClass");
      MemberBox memberBox0 = new MemberBox(method0);
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(memberBox0, "getClass");
      Context context0 = Context.enter();
      FunctionObject functionObject0 = new FunctionObject("invoke", method0, nativeJavaMethod0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeJavaMethod0, nativeJavaMethod0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      Context context0 = Context.getContext();
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeObject0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeObject0, nativeObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "hashCode");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "hashCode");
      FunctionObject functionObject0 = new FunctionObject("hashCode", method0, nativeJavaMethod0);
      functionObject0.call((Context) null, (Scriptable) null, (Scriptable) null, methodArray0);
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getName");
      Context context0 = Context.getCurrentContext();
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("getName", method0, nativeObject0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeObject0, nativeObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getName\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getName");
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeObject0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, nativeObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"error reporter\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeParameters");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "getTypeParameters");
      FunctionObject functionObject0 = new FunctionObject("getTypeParameters", method0, nativeJavaMethod0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, (Scriptable) null, (Scriptable) null, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getTypeParameters\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "equals");
      MemberBox memberBox0 = new MemberBox(method0);
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(memberBox0, "equals");
      Context context0 = Context.enter();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeJavaMethod0);
      Object object0 = functionObject0.call(context0, nativeJavaMethod0, nativeJavaMethod0, methodArray0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) null, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toString\" occurs multiple times in class \"java.lang.Integer\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Method[] methodArray0 = new Method[3];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, (String) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeParameters");
      assertNotNull(method0);
      
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "getTypeParameters");
      FunctionObject functionObject0 = new FunctionObject("getTypeParameters", method0, nativeJavaMethod0);
      functionObject0.getMethodOrConstructor();
      assertEquals(25, methodArray0.length);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClass");
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeIterator_StopIteration0);
      String string0 = functionObject0.getFunctionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      NativeObject nativeObject0 = new NativeObject();
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) nativeObject0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Integer integer0 = new Integer((-2402));
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) integer0, (Class<?>) class0);
      assertEquals((-2402), object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaTopPackage0, (Object) nativeJavaTopPackage0, 1);
      assertEquals("[JavaPackage ]", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeObject0, (Object) "getName", 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "equals");
      Context context0 = Context.enter();
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("equals", method0, nativeObject0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeObject0, nativeObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<FieldAndMethods> class0 = FieldAndMethods.class;
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getName");
      assertNotNull(method0);
      
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "getName");
      FunctionObject functionObject0 = new FunctionObject("getName", method0, nativeJavaMethod0);
      Class<String> class1 = String.class;
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) functionObject0, (Object) "getName", (Class<?>) class1);
      assertEquals("getName", object0);
      assertEquals(25, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = new Context(contextFactory0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) context0.generateObserverCount, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getName");
      assertNotNull(method0);
      
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("getName", method0, nativeObject0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(25, methodArray0.length);
      assertEquals("getName", string0);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Class<InterpretedFunction> class0 = InterpretedFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, nativeJavaMethod0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getTypeParameters");
      assertNotNull(method0);
      
      NativeObject nativeObject0 = new NativeObject();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeObject0);
      functionObject0.addAsConstructor(nativeObject0, nativeObject0);
      assertEquals(25, methodArray0.length);
  }
}

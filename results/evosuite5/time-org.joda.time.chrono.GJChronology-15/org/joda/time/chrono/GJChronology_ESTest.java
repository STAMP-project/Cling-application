/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:44:24 GMT 2019
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Years;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class GJChronology_ESTest extends GJChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.EIGHT;
      GJChronology gJChronology0 = GJChronology.getInstance();
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-2171L), (long) (-854));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.EIGHT;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-35718201518739L), (-1462));
      assertEquals((-66476515118739L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) (-851), (-851));
      assertEquals((-6713795972851L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.EIGHT;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (long) (-842), (-842));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-17713207172842L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.TEN;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-50491123200000L), (-259L));
      assertArrayEquals(new int[] {19200}, intArray0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Months months0 = Months.MAX_VALUE;
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-50491123199992L), (-62040124800000L));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {(-4391)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-2023));
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-62416051200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1314L, 4);
      Years years0 = Years.years(12);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, 1388534400012L, (long) 11);
      assertArrayEquals(new int[] {(-44)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (-61246956630996L), 5);
      LocalDate localDate0 = new LocalDate((-61246956630996L), (Chronology) gJChronology0);
      assertEquals(5, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      MonthDay monthDay0 = new MonthDay(1, 1, gJChronology0);
      assertEquals(1, monthDay0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate((long) 4, (Chronology) gJChronology0);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 31;
      // Undeclared exception!
      try { 
        gJChronology0.validate(localDate0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth must not be larger than 30
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      LocalDate localDate0 = new LocalDate((long) 2, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 19 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 4, 4);
      LocalDate localDate0 = new LocalDate((long) 4, (Chronology) gJChronology0);
      LocalDate localDate1 = localDate0.withDayOfMonth(4);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      Period period0 = Period.ZERO;
      MonthDay monthDay1 = monthDay0.withPeriodAdded(period0, 1);
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(29);
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      String string0 = gJChronology1.toString();
      assertEquals("GJChronology[+29:00,cutover=2014-02-14]", string0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 2, 2);
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Europe/Amsterdam,cutover=1970-01-01T00:00:00.002Z,mdfw=2]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[Europe/Amsterdam]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      long long0 = gJChronology0.getDateTimeMillis(10, 10, 10, 10, 10, 10, 10);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals((-61827371389990L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(1073L, (Chronology) gJChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis((-1), (-1), (-1), (-1), (-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      try { 
        gJChronology0.getDateTimeMillis(2, 2, 2, 2, 2, 2, (-2104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2104 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      try { 
        gJChronology0.getDateTimeMillis(29, 2, 29, 14, 29, 29, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = gJChronology0.getDateTimeMillis(4, 4, 4, 4);
      assertEquals((-62033041171996L), long0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      LocalDateTime localDateTime1 = new LocalDateTime(localDateTime0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertTrue(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone((DateTimeZone) null);
      assertEquals(4, gJChronology1.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (-12219292800000L), 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 11
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Months months0 = Months.TWELVE;
      long long0 = gJChronology0.add((ReadablePeriod) months0, (-35718201518724L), 1516);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(12121735253276L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.TEN;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 4, 4);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) months0, (-50491123200010L), (long) 4);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertArrayEquals(new int[] {19200}, intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      long long0 = lenientChronology0.getDateTimeMillis(1531L, 292272984, 292272984, 292272984, 292272984);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1070011679496984L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear((-2652));
      assertEquals((-145822637972000L), dateMidnight1.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Integer integer0 = new Integer(0);
      gJChronology0.equals(integer0);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(4);
      DateMidnight dateMidnight2 = dateMidnight1.withWeekyear(5587);
      assertEquals(114144768000000L, dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.hashCode();
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 09:45:22 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Type;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ClassEmitter_ESTest extends ClassEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-681));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Type type0 = Type.SHORT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "R[6]I/_Z:_YhH?S-a", type0, (Object) null);
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(58, "R[6]I/_Z:_YhH?S-a", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@58cf0659
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-668));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "F,hGqxy=d_890'lrU", type0, "F,hGqxy=d_890'lrU");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(6, "F,hGqxy=d_890'lrU", type0, classEmitter_FieldInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.mockito.cglib.core.ClassEmitter$FieldInfo@96b784a
         //
         verifyException("org.mockito.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(610, "~kn58eGQA@}<+\"{jr", type0, "~kn58eGQA@}<+\"{jr");
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(610, "~kn58eGQA@}<+\"{jr", type0, pipedInputStream0);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "0An", type0, (Object) null);
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo(1, "0An", type0, classEmitter_FieldInfo0);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1, "0An", type0, (Object) null);
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo((-814), "0An", (Type) null, object0);
      ClassEmitter.FieldInfo classEmitter_FieldInfo1 = new ClassEmitter.FieldInfo((-814), "R[6]I/_Z:_YhH?S-a", (Type) null, "0An");
      boolean boolean0 = classEmitter_FieldInfo0.equals(classEmitter_FieldInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      classEmitter0.setTarget(classEmitter0);
      Type type0 = Type.LONG_TYPE;
      classEmitter0.declare_field(10, "classInfo is null! ", type0, "classInfo is null! ");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(5, "classInfo is null! ", type0, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"classInfo is null! \" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(5, "classInfo is null! ", type0, type0);
      boolean boolean0 = classEmitter_FieldInfo0.equals(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = new ClassEmitter.FieldInfo(1067, "F,hG.qxy=d_Z890'lrU", (Type) null, "F,hG.qxy=d_Z890'lrU");
      boolean boolean0 = classEmitter_FieldInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      // Undeclared exception!
      try { 
        classEmitter1.getFieldInfo("classInfo is null! ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      classEmitter0.setTarget(classEmitter0);
      Type type0 = Type.LONG_TYPE;
      classEmitter0.declare_field(10, "classInfo is null! ", type0, "classInfo is null! ");
      ClassEmitter.FieldInfo classEmitter_FieldInfo0 = classEmitter0.getFieldInfo("classInfo is null! ");
      assertNotNull(classEmitter_FieldInfo0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      classEmitter0.setTarget(classEmitter0);
      Type type0 = Type.LONG_TYPE;
      classEmitter0.declare_field(10, "classInfo is null! ", type0, "classInfo is null! ");
      boolean boolean0 = classEmitter0.isFieldDeclared("classInfo is null! ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      boolean boolean0 = classEmitter1.isFieldDeclared((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      classEmitter0.setTarget(classEmitter0);
      Type type0 = Type.LONG_TYPE;
      Type type1 = Type.getObjectType("%/KLcVy;3/");
      // Undeclared exception!
      try { 
        classEmitter0.declare_field(1, "%/KLcVy;3/", type1, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field \"%/KLcVy;3/\" has been declared differently
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2040109463));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      classEmitter0.begin_class(8, (-2040109463), "R[6]I/_Z:_YhH?S-a", type0, (Type[]) null, "R[6]I/_Z:_YhH?S-a");
      CodeEmitter codeEmitter0 = classEmitter0.begin_static();
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.visitMethod(0, "$sUK9;baBn#\"B)b<V", "j3\":(3BJK=oWupNA3gH", "j3\":(3BJK=oWupNA3gH", (String[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2040109510));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      classEmitter0.begin_class(8, 0, "ch\"F}Ocx>y.7wcp", type0, (Type[]) null, "ch\"F}Ocx>y.7wcp");
      classEmitter0.getStaticHook();
      classEmitter0.end_class();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2040109463));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      classEmitter0.end_class();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-681));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      classEmitter0.begin_class(10, 3, "SM\"OV3+oMA'kcB", type0, typeArray0, "SM\"OV3+oMA'kcB");
      CodeEmitter codeEmitter0 = classEmitter0.getStaticHook();
      CodeEmitter codeEmitter1 = classEmitter0.getStaticHook();
      assertSame(codeEmitter1, codeEmitter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2040109463));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      classEmitter0.begin_class(8, (-2040109463), "R[6]I/_Z:_YhH?S-a", type0, (Type[]) null, "R[6]I/_Z:_YhH?S-a");
      // Undeclared exception!
      try { 
        classEmitter0.getStaticHook();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // static hook is invalid for this class
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type[] typeArray0 = new Type[9];
      // Undeclared exception!
      try { 
        classEmitter0.begin_class(1925, 1925, "", (Type) null, typeArray0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        classEmitter0.getSuperType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2040109463));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      Class<String> class0 = String.class;
      Type type0 = Type.getType(class0);
      ClassEmitter classEmitter1 = new ClassEmitter(classEmitter0);
      classEmitter1.begin_class(8, 0, "ch\"Fcx>y.7xwcp", type0, (Type[]) null, "ch\"Fcx>y.7xwcp");
      classEmitter1.begin_static();
      classEmitter1.end_class();
      assertNotSame(classEmitter0, classEmitter1);
  }
}

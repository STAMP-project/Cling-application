/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 23:03:47 GMT 2019
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(115, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      InputId inputId0 = new InputId("0uBCE_mQSMUT");
      node0.setInputId(inputId0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      node0.setDirectives(set0);
      node0.isDefaultCase();
      node0.isAnd();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber(307.980915775887);
      node0.isAssign();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("'r;QrA~_`)R/Wk[");
      Node node1 = Node.newNumber((-1.274944891676121), 8506, 39);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isObjectLit();
      Node node1 = new Node(48, node0, node0);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(54, nodeArray0, 46, 50);
      node1.addChildAfter(node2, node0);
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable((Node) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(19, 19, 83);
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString("'r;QrA~_`)R/Wk[");
      node0.getInputId();
      node0.isTrue();
      node0.isCatch();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(39, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString("|jds![I=,<");
      Node node1 = Node.newString(45, "|jds![I=,<", 8, 2134);
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.detachChildren();
      node0.isAdd();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      node0.isTry();
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(36, 49, 48);
      node0.setSourceFileForTesting("");
      Node node2 = new Node(16, node0, 112, 4);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node_NodeMismatch1);
      node1.isEquivalentToTyped(node1);
      node0.isString();
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("direct_eval", "direct_eval", (-4619), 124);
      simpleErrorReporter0.warning("direct_eval", "com.google.common.collect.AbstractMultimap$KeySet", 0, 0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isString();
      node0.isFor();
      node0.isHook();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.srcref(node1);
      node0.isAssign();
      node0.isAdd();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.setLineno((-1764));
      node0.isAdd();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(38, "");
      node0.isUnscopedQualifiedName();
      node0.isQualifiedName();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.getQualifiedName();
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(32);
      node0.isEquivalentTo(node0);
      node0.useSourceInfoFrom(node0);
      int int0 = 41;
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(41);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(153, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      node0.setOptionalArg(false);
      InputId inputId0 = new InputId("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      node0.setInputId(inputId0);
      Node node1 = Node.newString(29, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", 0, 45);
      node1.isNew();
      node1.isOr();
      Node node2 = Node.newNumber((-3189.9915091));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeArray0[0] = jSType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry1.createAnonymousObjectType();
      jSTypeArray0[1] = (JSType) objectType0;
      EnumType enumType0 = jSTypeRegistry1.createEnumType("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", node1, jSTypeArray0[1]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      jSTypeArray0[2] = (JSType) enumElementType0;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      // Undeclared exception!
      try { 
        node3.removeChild(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.valueOf();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newNumber((double) 22);
      node0.getStaticSourceFile();
      node0.isQualifiedName();
      node0.setStaticSourceFile((StaticSourceFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isCatch();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2.2910735575192707));
      Node node1 = Node.newString((-756), "no next sibling.", 113, 54);
      node0.addChildrenToBack(node1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.setSourceEncodedPositionForTree(12);
      node2.checkTreeEquals(node0);
      node0.isTry();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, true);
      node2.setStaticSourceFile(simpleSourceFile0);
      node1.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(39);
      node_SideEffectFlags0.areAllFlagsSet();
      node1.isScript();
      node2.addChildToBack(node0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("incrdecr");
      Node node1 = new Node(37, node0, node0);
      Node node2 = Node.newString("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", 32, 36);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      Node node1 = new Node(92, node0);
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newString(" is not a string node", 1, 1);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(" is not a string node");
      node0.isTypeOf();
      Node node1 = Node.newNumber((double) 50);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString("7nRZ</3I");
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("nV");
      node0.isTry();
      Node[] nodeArray0 = new Node[4];
      Node node1 = new Node(35, node0);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node2 = null;
      try {
        node2 = new Node(4095, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = node0.copyInformationFromForTree(node0);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91, 91, 91);
      node0.isName();
      Node node1 = new Node(35, node0, node0, 44, 91);
      Node node2 = new Node(2, node1, 1528, 45);
      node1.isGetElem();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETELEM 44 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = Node.newNumber((double) 22);
      node0.isFunction();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(37, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.toString();
      node2.setSourceEncodedPositionForTree(37);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(85);
      node0.setIsSyntheticBlock(false);
      node0.siblings();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(83, 83, 83);
      node0.isAdd();
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(46);
      simpleSourceFile0.getLineOffset(54);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(54, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.getSourceOffset();
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newString(112, "com.google.common.base.CharMatcher$14", 112, 112);
      Node node1 = Node.newString("nt");
      node1.setCharno(32);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(102, nodeArray0, 125, 54);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(15);
      node0.hasChild(node1);
      Node node2 = new Node(38, 54, 1736);
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 54 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$1");
      Node node1 = new Node(37, node0, node0, 43, 42);
      node1.isSwitch();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(2040, 0, 0);
      node0.setSourceFileForTesting((String) null);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-2232), 146, 5746);
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(117);
      node0.isVar();
      node0.toStringTree();
      node0.setLength(98);
      Node node1 = new Node(12, node0);
      node1.toStringTree();
      Node node2 = Node.newString("com.google.javascript.rhino.jstype.FunctionType", 48, 4095);
      node2.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Ix%#y^CD,");
      Node node1 = new Node(35, node0, node0, 49, 16);
      node0.isUnscopedQualifiedName();
      Node node2 = new Node(39);
      node1.addChildBefore(node2, node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isHook();
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(117, 117, 117);
      node0.isVar();
      node0.getLength();
      node0.isAdd();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CONTINUE 117 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = node0.copyInformationFromForTree(node0);
      node0.copyInformationFromForTree(node1);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node((-784));
      node0.addChildToBack(node0);
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newString("$BA,Y~IcYtNM}X");
      Node node1 = new Node(4095, node0, node0, node0, 36, 1);
      InputId inputId0 = new InputId("$BA,Y~IcYtNM}X");
      inputId0.toString();
      node1.setInputId(inputId0);
      Node node2 = null;
      try {
        node2 = new Node(54, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newNumber((-1627.8120496096553));
      node0.isOptionalArg();
      node0.setWasEmptyNode(false);
      node0.getQualifiedName();
      Node node1 = new Node(49, node0, node0, node0);
      Node node2 = node1.srcrefTree(node0);
      node2.isThrow();
      node2.isInstanceOf();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-347));
      node0.isIf();
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(421, "f+C3-Tp%jCOCq'");
      node0.setType(37);
      node0.isCall();
      node0.setString("O G");
      node0.hasOneChild();
      node0.setLineno((-3699));
      Node node1 = new Node(115, node0);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber(4680.581165152);
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((-0.8170422043830424));
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isAssign();
      node0.isAdd();
      node0.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node.newString("/`Yl!C}>|6L-");
      Node node0 = new Node(36, 49, 48);
      Node node1 = new Node(4095, 44, 40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(49, node0, 2, 1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node2 = new Node(38, 54, 1736);
      node2.addSuppression("X+%#$TIJ`");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InputId inputId0 = new InputId("com.google.common.collect.Lists$TransformingRandomAccessList");
      Node node0 = Node.newString("com.google.common.collect.Lists$TransformingRandomAccessList");
      Node node1 = new Node(2091, node0, 43, 40);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node1, node0);
      node_NodeMismatch0.equals(node_NodeMismatch1);
      node1.isEquivalentToTyped(node0);
      node0.isCall();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber((-1669.4544373812205));
      node0.isName();
      node0.isNull();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isObjectLit();
      Node node1 = new Node(48, node0, node0);
      node1.isComma();
      Node node2 = Node.newString(52, "com.google.common.collect.AbstraGtMultifap$RandomAcces.WrappedList");
      node1.hasChild(node2);
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setSourceFileForTesting("");
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node((-784), (-784), (-784));
      node0.isFor();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = Node.newString("}i$7%L'crB7HtqLN");
      Node node1 = Node.newString("}i$7%L'crB7HtqLN", 31, 30);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node0 = new Node(98, 98, 98);
      node0.getAncestors();
      node0.isNumber();
      Node node1 = Node.newString("");
      node1.setCharno(98);
      node1.isVar();
      node0.isComma();
      Node node2 = Node.newString((-373), "");
      Node node3 = new Node(54, node0, node2, 49, 0);
      node0.hasChild(node3);
      Node node4 = new Node((-2505), 1024, 111);
      node4.setSourceFileForTesting("com.google.javascript.rhino.jstype.StringType");
      node4.isCase();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newString(85, "com.google.common.base.CharMatcher$14", 85, 85);
      Node node1 = new Node(29, node0, 8, 44);
      node1.setCharno(32);
      node0.isInstanceOf();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node[] nodeArray0 = new Node[9];
      Node node0 = null;
      try {
        node0 = new Node(112, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isBlock();
      InputId inputId0 = new InputId("com.google.common.base.CharMatcher$12");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isParamList();
      node0.isDo();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000265] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node(1008, 1008, 1008);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = null;
      try {
        node1 = new Node(37, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newNumber((-2238.97));
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$1");
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.RegularImmutableSet");
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("'r;QrA~_)RWk[");
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 'r;QrA~_)RWk[ is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString("'r;QrA~_`)R/Wk[");
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 111;
      Node node0 = new Node(111, 111, (-1249));
      Node node1 = new Node(111, node0, node0, node0, node0);
      int int1 = 3000;
      Node node2 = node0.detachFromParent();
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CASE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(42, 105, (-1345));
      node0.isCatch();
      node0.getQualifiedName();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getString();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((-3035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(126, "j[|MP3kb", 126, 126);
      node0.isVar();
      Node node1 = new Node(29, node0, node0, node0, node0);
      node1.isString();
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(115);
      node0.isInc();
      node0.isFor();
      Node node1 = new Node(120, node0, node0, node0, (-377), 50);
      boolean boolean0 = false;
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CATCH is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(" is not a string node", 1, 1);
      Node node1 = new Node(8232, node0, node0, node0, 15, 43);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8232
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString(329, "\":}h~\"", 329, 329);
      Node node1 = new Node(329, node0, node0, node0, node0, 39, (-1658));
      Node node2 = null;
      try {
        node2 = new Node(329, node1, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node.newString("com.google.common.io.PatternFilenameFilter");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(112, "com.google.common.base.CharMatcher$14", (-5277), (-5277));
      Node node1 = Node.newString("nt");
      node1.setCharno(32);
      node1.checkTreeEqualsImpl(node0);
      InputId inputId0 = new InputId("com.google.common.base.CharMatcher$14");
      node0.setInputId(inputId0);
      node0.isDefaultCase();
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newNumber(16.0);
      Node node1 = new Node((-571), node0, node0);
      node1.isBlock();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(3269, 3269, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSType.toMaybeTemplateType((JSType) null);
      node0.isWith();
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString(114, "/5OK~-");
      node0.isWith();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("$K[:6\"SZ");
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Multimaps$Entries", (-2233), 1);
      node0.cloneNode();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(";^");
      Node node1 = new Node(48);
      node1.isEmpty();
      node1.isOnlyModifiesThisCall();
      Node node2 = new Node(1826, node0, node0, node0);
      Node node3 = node2.useSourceInfoFrom(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.isAssign();
      Node[] nodeArray0 = new Node[0];
      Node node5 = new Node(47, nodeArray0, 36, 1897);
      node5.isNull();
      node2.getJSDocInfo();
      node2.isEquivalentToTyped(node5);
      Node node6 = Node.newNumber((-2109.680393264), 120, 4);
      node3.srcref(node6);
      node5.isRegExp();
      int int0 = Node.FLAG_GLOBAL_STATE_UNMODIFIED;
      node6.isFunction();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(110, "com.google.common.base.CharMatcher$14", (-5284), (-5284));
      Node node1 = new Node(29, node0, 8, 44);
      node0.isComma();
      node1.isIn();
      node0.isBlock();
      node0.isInstanceOf();
      node1.replaceChild(node0, node1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Node node0 = new Node(2);
      InputId inputId0 = new InputId("PRIVATE");
      inputId0.toString();
      Node node1 = new Node(42, node0, node0);
      InputId inputId1 = new InputId("InputId: PRIVATE");
      inputId1.toString();
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      Node.newString("PRIVATE");
      node1.isThis();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      Node node1 = new Node(54);
      node0.isEquivalentToTyped(node1);
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = node0.cloneTree();
      try { 
        node1.setString("_");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 337.719726 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("-U\"RD\"32\"AvFP,rN,B");
      node0.isBlock();
      Node node1 = new Node(15, node0, node0, node0);
      node1.isInstanceOf();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newString("<$K[\"SZ");
      node0.isContinue();
      node0.isSwitch();
      node0.isExprResult();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node((-352));
      node0.isQuotedString();
      Node node1 = new Node(12, node0, node0, node0);
      node0.isEquivalentTo(node1);
      node1.children();
      node0.isVar();
      node0.isSwitch();
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -352
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("}i$7%L'crB7HtqLN");
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newString((-1501), "var_args_name");
      node0.setLineno(302);
      Node node1 = new Node(31, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      Node node1 = null;
      try {
        node1 = new Node(41, node0, node0, node0, 15, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((-1.274944891676121));
      node0.isQuotedString();
      Node node1 = Node.newNumber(3815.82686602);
      node0.addChildToFront(node1);
      node0.isVar();
      node1.isCall();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = Node.newString("bx]nm_Io:q$", 85, 29);
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.TAIWAN;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.setSourceFileForTesting("<invalid>");
      node0.isAssignAdd();
      node0.isDelProp();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("$BA,Y~2cYtN.}X");
      Node node1 = new Node(1, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(54, nodeArray0, (-1367), (-1367));
      node0.isComma();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(52);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(46);
      node_SideEffectFlags1.setMutatesArguments();
      node0.isDec();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(1872);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(152, "com.google.common.base.CharMatcher$14", 344, 82);
      node0.setString("com.google.common.base.CharMatcher$14");
      InputId inputId0 = new InputId("com.google.javascript.rhino.jstype.JSTypeNative");
      inputId0.toString();
      inputId0.toString();
      inputId0.toString();
      inputId0.toString();
      node0.getInputId();
      node0.setInputId(inputId0);
      node0.isDebugger();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(112, "com.google.common.base.CharMatcher$14", 112, 112);
      Node node1 = new Node(29, node0, 8, 44);
      node1.setCharno(32);
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newNumber((double) 58);
      node0.isSwitch();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2911);
      node0.setSourceFileForTesting("");
      try { 
        node0.setString("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 2911.0 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.isIn();
      node0.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(103);
      node0.isHook();
      MockFile mockFile0 = new MockFile("v", "com.google.javascript.rhino.jstype.ParameterizedType");
      mockFile0.mkdirs();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-781));
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(483);
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setMutatesThis();
      node0.isDec();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(364);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newString(112, "com.google.common.base.CharMatcher$14", 112, 112);
      node0.isComma();
      node0.isDelProp();
      node0.isOnlyModifiesThisCall();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("<$K[\"SZ");
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node((-2819), node0, node0, node0, 2636, 30);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(85);
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(89);
      Node node1 = new Node(98, node0, node0, node0, node0, 48, 16);
      node1.isHook();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber((-1627.8120496096553));
      node0.getAncestor(101);
      Node node1 = Node.newString("W");
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newString("-U\"RD\"32\"AvFP,rN,B");
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(36, 49, 48);
      node1.isGetElem();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node((-767), (-767), (-767));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node((-1504));
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(118);
      Node node1 = new Node(118, node0);
      node1.isEquivalentTo(node0);
      Node node2 = Node.newString("slash_v");
      Node node3 = new Node(54, node1, node2, 53, 53);
      // Undeclared exception!
      try { 
        node3.addChildBefore(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(42, node0, node0, node0, 1, 35);
      node0.isQuotedString();
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(38, 54, 1736);
      node1.isFalse();
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(42, node0, node0, node0, 1, 35);
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(38, 54, 1736);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(89);
      node0.setSourceEncodedPositionForTree((-4544));
      Node node1 = new Node(98, node0, node0, node0, 51, (-122));
      node1.putProp(87855567, simpleErrorReporter0);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpect prop id 87855567
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber((-3189.9915091));
      node0.isEmpty();
      Node node1 = Node.newNumber((double) 8);
      Node node2 = new Node(102, node1, node1);
      node2.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.Predicates$ContainsPatternPredicate");
      Node node1 = Node.newString(54, "UNKNOWN_TYE", 48, 0);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString("'r;\u0007rA~_`)R/Wk[");
      node0.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newString("mr3/!,^#IN>Msn");
      node0.isTrue();
      Node node1 = new Node(48);
      node1.isNoSideEffectsCall();
      node1.isReturn();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newNumber((-1629.95));
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1629.95 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(86, nodeArray0, 86, 2277);
      node0.isDec();
      node0.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("com.google.common.base.CharMatcher$12");
      Node node1 = new Node(21, node0, node0, node0, 318, 40);
      Node node2 = Node.newString(46, "TRUE", 1022, 31);
      Node node3 = null;
      try {
        node3 = new Node((-533), node1, node1, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(36, 49, 48);
      node0.setSourceFileForTesting("");
      Node node2 = node0.copyInformationFrom(node1);
      node0.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isWith();
      node2.isGetProp();
      node2.isArrayLit();
      node1.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node((-1309));
      node0.isVarArgs();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString(673, "GREATEST_FUNCTION_TYPE", 36, 673);
      node0.isComma();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(4, node0, node0);
      node1.isIn();
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(89);
      Node node1 = Node.newString(49, "n BY.", 54, 248);
      node1.isFunction();
      node0.isParamList();
      Node node2 = new Node(8, node0, node0, node1, node0);
      // Undeclared exception!
      try { 
        node2.removeChild(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isIf();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-332));
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node0.isDec();
      node0.getChildAtIndex((-332));
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("|jds![I=,<");
      node0.setOptionalArg(true);
      Node node1 = Node.newString(45, "no next sibling.", 8, 3315);
      node1.addChildrenToBack(node0);
      node0.checkTreeEquals(node1);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setSourceEncodedPositionForTree(2421);
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString("this");
      Node node1 = new Node(4, node0, node0, node0, node0);
      node0.addChildrenToBack(node1);
      Node node2 = node0.removeFirstChild();
      node2.isEquivalentToTyped(node1);
      node2.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.isAnd();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString("gi@R");
      node0.isSyntheticBlock();
      Node node1 = new Node(8303, node0);
      node0.addChildrenToFront(node1);
      node0.isNull();
      node0.isWhile();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(102, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("?/R5IRSf'eH)=SNM~");
      try { 
        node0.setDouble((-1.0));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING ?/R5IRSf'eH)=SNM~ is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(245, "4^|<LkYBis5EvWnyA", 245, 673);
      node0.isComma();
      node0.setLineno(512);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(52, node0, node0);
      node1.isBlock();
      node1.isInstanceOf();
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString(" is not a string node", 1, 1);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(36, 49, 48);
      node0.setSourceFileForTesting("");
      Node node2 = new Node(16, node0, 112, 4);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node_NodeMismatch1);
      node1.isEquivalentToTyped(node1);
      node0.isIn();
      node0.isBlock();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(19, 19, 83);
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = Node.newString("|jds![I=,<");
      Node node1 = Node.newString(45, "no next sibling.", 8, 180315);
      node1.addChildrenToBack(node0);
      node1.detachChildren();
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setSourceEncodedPositionForTree(248);
      node2.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node((-784));
      node0.setSourceEncodedPosition((-2324));
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(120);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 120
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = new Node(153, 153, 153);
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString(" (");
      node0.getAncestors();
      node0.isNumber();
      node0.isFalse();
      Node.newNumber((double) 52);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(42, node0, node0, node0, 1, 35);
      node1.cloneTree();
      node0.isQuotedString();
      node1.isUnscopedQualifiedName();
      Node node2 = new Node(38, 54, 1736);
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newString("}i$7%L'crB7HtqLN");
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newNumber((-1643.4001657859546));
      Node node1 = new Node(2, node0, node0, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isFunction();
      node0.isDefaultCase();
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber(833.4442484598, (-1549), (-1549));
      node0.isTry();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString(126, "FOR", 22, 126);
      node0.isHook();
      node0.isVar();
      Node node1 = node0.clonePropsFrom(node0);
      node1.copyInformationFrom(node0);
      node0.isBlock();
      node0.isEquivalentTo(node0, true, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isWith();
      node1.isOr();
      node0.isSwitch();
      node0.isLabel();
      node0.isNot();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node((-1), 83, (-1));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newString(31, "com.google.common.collect.Lists$TransformingRandomAccessList", (-5314), (-725));
      node0.setString("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      Node node1 = Node.newString("");
      node1.setCharno(6158);
      node0.isDo();
      node1.hasChildren();
      node1.isBlock();
      node0.isComma();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node2 = new Node(53, 12, 35);
      Node node3 = new Node(49, node2, node0);
      node3.addChildrenToFront(node1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(3648);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString(45, "~Yyg3JL2O^k$y@=/Z");
      node0.removeChildren();
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newNumber((double) 22);
      Node node1 = Node.newString((-1608), "X&>[`v/L");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.getJSDocInfo();
      InputId inputId0 = new InputId("X&>[`v/L");
      inputId0.toString();
      node1.setInputId(inputId0);
      Node node2 = Node.newNumber((-2448.1270088), 48, 16);
      Node node3 = new Node(17, node1, node1, node1, node2);
      node3.isParamList();
      node3.isDo();
      Node.newNumber((-3327.25653));
      node3.removeChild(node2);
      node3.isAdd();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(117, 117, 117);
      node0.isContinue();
      node0.toStringTree();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(5059);
      Node node1 = Node.newString(41, "G;?R3Lea", 16, 37);
      node0.isFunction();
      Node node2 = new Node(37, node1, node1, (-1495), (-816));
      node2.isParamList();
      Node node3 = null;
      try {
        node3 = new Node(54, node2, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      Node node1 = node0.removeFirstChild();
      node0.isEquivalentToTyped(node1);
      node1.addChildToFront(node0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(112, "com.google.common.base.CharMatcher$14", 112, 112);
      node0.setType(979);
      Node node1 = new Node(35, node0);
      node1.isNew();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber((-1643.4001657859546));
      node0.isNull();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      InputId inputId0 = new InputId("`@,9+?'");
      inputId0.toString();
      node0.setInputId(inputId0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INC 102 [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = Node.newNumber((-1.274944891676121));
      node0.isQuotedString();
      Node node1 = Node.newNumber((double) 48, 39, 16);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = Node.newNumber(3815.82686602);
      node0.addChildToFront(node2);
      node0.isVar();
      node2.isCall();
      node2.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("", "direct_eval", 1175, 0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isString();
      node0.isFor();
      Node node1 = node0.getAncestor(0);
      node1.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(77, 77, 77);
      node0.isDefaultCase();
      node0.isAnd();
      node0.isCall();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Ix%#y^CDq,");
      Node node1 = new Node(35, node0, node0, 49, 16);
      node1.addChildBefore(node1, node0);
      Node node2 = null;
      try {
        node2 = new Node(29, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      simpleSourceFile0.getLineOffset(54);
      node0.setStaticSourceFile(simpleSourceFile0);
      Node node1 = new Node(2, node0, node0, 37, 2);
      Node node2 = node1.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString("|jds![I=,<");
      node0.isComma();
      node0.isSwitch();
      node0.isOnlyModifiesThisCall();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber((double) 111);
      Node node1 = new Node(111, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(111, node1, node0, (-1), 72);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber((-716.5648298182));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newNumber((double) 54, 118, (-1532));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("\"J", false);
      simpleSourceFile0.getLineOffset(8);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = new Node(4095, node1, node0, 12, (-486));
      Node node3 = node0.copyInformationFromForTree(node1);
      Node.newString("BOOLEAN_OBJECT_TYPE", 2529, 16);
      node3.isQuotedString();
      node3.isThis();
      node3.isTypeOf();
      node3.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(118, 118, (-759));
      Node node1 = new Node(2968, node0, node0, 35, 48);
      node1.setLength(93);
      node1.isUnscopedQualifiedName();
      node1.isAnd();
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = Node.newNumber((-2752.606), 116, 1508);
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = Node.newNumber((-3189.9915091), 1121, 1121);
      node0.getIntProp(1);
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newString("3JX]C]hzeSz2n");
      Node node1 = Node.newString("3JX]C]hzeSz2n", 54, 4);
      node1.cloneTree();
      node1.toString();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node2 = new Node(41, nodeArray0);
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(1379, 1379, 132);
      Node node1 = new Node(132, node0, 50, 31);
      node1.isVar();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = node1.copyInformationFrom(node2);
      node3.isBlock();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isWith();
      Node node4 = Node.newNumber(1310.636, 47, 8);
      node4.isDec();
      Node node5 = Node.newString(35, "com.google.common.base.CharMatcher$12", 32, (-957));
      node5.isGetProp();
      node3.isArrayLit();
      node3.isScript();
      try { 
        node4.setString(" is not a string node");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 1310.636 47 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.base.CharMatcher$1");
      node0.getJsDocBuilderForNode();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 1
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = Node.newString("$BA,Y~2cYtN.}X");
      node0.isSyntheticBlock();
      node0.isAdd();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(116, "p'qraV_jK;$n@];/\"");
      Node node1 = Node.newString(10, "OBJECT_TYPE");
      node0.siblings();
      node0.isBreak();
      node0.isNE();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-352), (-352));
      node0.isRegExp();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(153, 153, 153);
      Node node1 = new Node(51, 8, 2270);
      node0.setSourceEncodedPositionForTree(47);
      Node node2 = new Node(35, node0, node0, node1, 0, 262144);
      node2.putProp(50, node0);
      node2.checkTreeEquals(node0);
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber((-1023.430366949), 43, 43);
      node0.setCharno(43);
      node0.getIntProp(43);
      node0.isFor();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(42, 4095, (-979));
      node0.isQuotedString();
      node0.getChildCount();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Ix%#y^CDq,");
      Node node1 = new Node(35, node0, node0, 49, 16);
      Node node2 = Node.newNumber((double) 43, 47, 8);
      node1.srcrefTree(node2);
      node0.isInc();
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-2.2910735575192707));
      Node node1 = Node.newString((-756), "no next sibling.", 36, 54);
      node0.addChildrenToBack(node1);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.setSourceEncodedPositionForTree(12);
      node2.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(98, 98, 98);
      node0.isDefaultCase();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(117, "X+%#$TIJ`", 105, 105);
      node0.isFunction();
      node0.isParamList();
      Node node1 = new Node(2, node0, node0);
      Node.newString(47, "y&EtcOq");
      node1.hasChild(node0);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(103);
      Node node1 = new Node(42, 4095, (-979));
      node0.isCall();
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91);
      node0.isFromExterns();
      node0.isAssignAdd();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newString(92, "co.google.common.collect.AbstractMultimap$RandomAccessWrapedList");
      node0.isQuotedString();
      node0.setString("0uBCE_mQSMUT");
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newNumber((double) 22);
      node0.isQualifiedName();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry1.createParameters((List<JSType>) linkedList0);
      node1.isSwitch();
      Node.newNumber((double) 2);
      Node node2 = new Node(1488, node1, node0, 46, 36);
      Node node3 = node2.cloneTree();
      node3.isVoid();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = jSTypeRegistry2.createParametersWithVarArgs((List<JSType>) linkedList0);
      node4.isObjectLit();
      try { 
        node4.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString(38, "");
      node0.isUnscopedQualifiedName();
      node0.isAnd();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}HxL{r>{?3q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber((-3645.7911659094248));
      node0.toStringTree();
      node0.isTrue();
      node0.isRegExp();
      node0.isParamList();
      node0.getSourceOffset();
      node0.isThis();
      node0.isBlock();
      node0.isNew();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.type = (-1);
      node_FileLevelJsDocBuilder0.append("NUMBER -3645.7911659094248\n");
      node_FileLevelJsDocBuilder0.append("}HxL{r>{?3q");
      node0.isLabel();
      node0.isCall();
      node0.getIntProp((-1673));
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(733, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(153, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList", 153, 153);
      node0.setOptionalArg(false);
      Node node1 = new Node(43, node0, node0, 38, 77);
      node1.isUnscopedQualifiedName();
      node0.isAnd();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString(126, "j[|MP3kb", 126, 912);
      Node node1 = Node.newString("j[|MP3kb");
      node0.setCharno(44);
      node1.isVar();
      node1.isComma();
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(64, 50, 1);
      node2.addChildrenToBack(node1);
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(89);
      Node node1 = new Node(0, node0, node0, node0, 4095, 1);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      jSTypeArray0[0] = jSType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Not declared as a constructor", node0, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      enumElementType1.getParameterType();
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = (JSType) enumElementType1;
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.toStringTree();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = Node.newString(105, "*Riffw$t ]W*.~}F", 105, (-1692));
      node0.isFunction();
      node0.isString();
      node0.isSetterDef();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newNumber((double) 421, 421, 421);
      node0.children();
      Node node1 = new Node(421, node0);
      // Undeclared exception!
      try { 
        node1.setDouble(38);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 421
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = new Node(48, node0, node0, node0, node0);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(49, (-2911), (-2911));
      node0.toString(false, false, false);
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setSourceFileForTesting("");
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node1 = new Node(8, node0);
      node1.hasChildren();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node((-767));
      Node node1 = new Node(47, node0, node0);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newNumber((-1643.4001657859546));
      node0.isName();
      node0.setOptionalArg(false);
      node0.isNull();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.getInputId();
      node0.isOptionalArg();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber((double) 31);
      node0.isNumber();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node[] nodeArray0 = new Node[1];
      Node node0 = null;
      try {
        node0 = new Node(295, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber((-0.23509397833673895));
      node0.isTry();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1280));
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newString(421, "f+C3-Tp%jCOCq'");
      node0.setType(4095);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node1.getDirectives();
      node0.isScript();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node3 = new Node(154, node0, node1, node2);
      Node node4 = new Node(41, node3, 30, 33);
      node4.getLength();
      Node.extractCharno(44);
      node2.getJSType();
      node3.getSourceFileName();
      node3.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber((double) 20);
      node0.getProp(20);
      node0.hasMoreThanOneChild();
      node0.isComma();
      Node node1 = Node.newNumber((double) 53);
      node1.srcrefTree(node0);
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isSwitch();
      node0.isFunction();
      node0.isParamList();
      Node node1 = Node.newString("UNKNOWN_TYE", (-677), 43);
      Node node2 = new Node(65023, node0, node0, node1, node1);
      node2.removeChild(node0);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = Node.newString((-904), "", (-904), (-904));
      node0.setOptionalArg(true);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node node0 = Node.newString("|jds![I=,<");
      Node node1 = Node.newString(45, "|jds![I=,<", 8, 180315);
      node1.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node1.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = Node.newString(31, "com.google.common.collect.Lists$TransformingRandomAccessList", (-5314), (-725));
      node0.setCharno(48);
      node0.isDo();
      node0.isBlock();
      node0.isComma();
      node0.getAncestors();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isQualifiedName();
      node0.isTry();
      node0.isUnscopedQualifiedName();
      node0.isFalse();
      node0.isArrayLit();
      node0.isStringKey();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = Node.newString("-U\"RD\"32\"AvFP,rN,B");
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(117);
      node0.isVar();
      node0.toStringTree();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(83, 83, (-1826));
      node0.isAdd();
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(42, node0, node0, node0, 1, 35);
      node1.getAncestors();
      node0.hasChild(node1);
      Node node2 = new Node(38, 54, 1736);
      node2.addSuppression("X+%#$TIJ`");
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME 54 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000006] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(31, "com.google.common.collect.Lists$TransformingRandomAccessList", (-5314), (-724));
      node0.setString("com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      node0.setCharno(48);
      node0.isDo();
      node0.hasChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(29);
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.areAllFlagsSet();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(31);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newNumber(20.397013654927033);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString("X+%#$TIJ`");
      node0.isSwitch();
      node0.isOnlyModifiesThisCall();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString(147, "Qko{UC`D", 199, 199);
      node0.isName();
      Node node1 = new Node(30, node0, node0, 35, 2258);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node((-1959));
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91, 91, 91);
      node0.isName();
      Node node1 = new Node(35, node0, node0, 44, 91);
      node1.isGetProp();
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.setLength(19);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(117, "X+%#$TIJ`", 105, 105);
      node0.isFor();
      Node node1 = Node.newNumber(2951.1221, 56, 4095);
      node1.isParamList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(44, node0, node0, node1, 1, 16);
      node1.setVarArgs(false);
      node2.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX96/Y");
      node0.addChildrenToBack(node0);
      node0.setString("X_lD$3FiX96/Y");
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newString("IF");
      node0.setIsSyntheticBlock(true);
      node0.isWith();
      Node node1 = new Node(49, node0);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      node0.wasEmptyNode();
      Node node1 = null;
      try {
        node1 = new Node(48, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(153);
      InputId inputId0 = new InputId("h[Ha");
      inputId0.toString();
      node0.isSetterDef();
      node0.isName();
      node0.isStringKey();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newString(126, "j[|MP3kb", 126, 126);
      node0.isVar();
      Node node1 = new Node(29, node0, node0, node0, node0);
      node0.setSourceEncodedPositionForTree(35);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      Node node1 = node0.removeFirstChild();
      node0.isEquivalentToTyped(node1);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString("UNKNOWN_TYE");
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1415);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      int int0 = 37;
      Node node0 = new Node(3335, 37, 0);
      Node node1 = null;
      try {
        node1 = new Node(43, node0, node0, (Node) null, node0, 2834, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(63);
      node0.isDebugger();
      Node node1 = new Node(37, node0, 4095, 4);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isDo();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("?/R5IRSf'eH)=SNM~");
      node0.isLocalResultCall();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString(40, "0TqA", 40, 98);
      Node node1 = Node.newString("O G");
      node0.setCharno(22);
      node1.checkTreeEqualsImpl(node0);
      node0.isSwitch();
      node1.isArrayLit();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString(3023, "");
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(87, 87, 87);
      node0.isInc();
      Node node1 = new Node(36, node0, node0, 12, 39);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newString(45, "~Yyg3JL2O^k$y@=/Z");
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.isThis();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // RSH 19 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(19, 19, 19);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(1061, "A1)yr");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[9];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSType jSType0 = jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) functionType0, (List<JSType>) linkedList0);
      jSTypeArray0[0] = jSType0;
      ObjectType objectType0 = ObjectType.cast(jSTypeArray0[0]);
      jSTypeArray0[1] = (JSType) objectType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseNoType();
      jSTypeArray0[2] = jSType1;
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeArray0[3] = (JSType) functionType1;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, jSTypeArray0[3]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getParentScope();
      jSTypeArray0[4] = (JSType) null;
      JSType.toMaybeParameterizedType((JSType) null);
      jSTypeArray0[5] = (JSType) null;
      JSType jSType2 = modificationVisitor0.caseNoType();
      jSTypeArray0[6] = jSType2;
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSTypeArray0[5], (List<JSType>) linkedList1);
      jSTypeArray0[7] = (JSType) functionType2;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.UnionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString("}i$E7%L'crBHtqN");
      node0.toString();
      JSType.toMaybeTemplateType((JSType) null);
      node0.isString();
      node0.isTrue();
      node0.getBooleanProp(0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      Node node1 = new Node(42, node0, node0, node0, 1, 35);
      node1.getAncestors();
      node0.hasChild(node1);
      node1.isInstanceOf();
      node1.isAssignAdd();
      node1.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString("$BA,Y~2cYtN.}X");
      node0.setQuotedString();
      Node node1 = new Node(1, node0, node0);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.isTypeOf();
      node0.isThrow();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber((-1627.8120496096553));
      node0.isOptionalArg();
      node0.setWasEmptyNode(false);
      node0.getQualifiedName();
      node0.isLabel();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newString(421, "f+C3-Tp%jCOCq'");
      node0.setType(37);
      Node node1 = new Node(51, node0, node0, 4095, 2);
      node1.getQualifiedName();
      Node node2 = new Node(42);
      node1.isAnd();
      Node node3 = new Node(8, node1, 31, 10);
      node0.isEquivalentTo(node3);
      node0.setSideEffectFlags(12);
      node1.checkTreeEquals(node2);
      node1.isSetterDef();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newString(3023, "");
      Node node1 = new Node(116, node0, node0, node0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString("4?bw:");
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("");
      InputId inputId0 = new InputId("");
      inputId0.toString();
      inputId0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(44, node0, node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Node.FLAG_LOCAL_RESULTS;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newString("?");
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((-510), (String) null, (-510), (-510));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(16, node0, 112, 4);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node_NodeMismatch1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isFalse();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node((-2819), node0, node0, node0, 4, 24);
      node1.getInputId();
      node1.hasMoreThanOneChild();
      node1.isBlock();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(2898, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.getIndexOfChild(node0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newNumber(38.0);
      node0.setDouble((-3126.23070542));
      Node node1 = Node.newNumber(1395.0);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString("<$K[\"SZ");
      node0.getDirectives();
      node0.detachChildren();
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(36, 49, 48);
      node0.setSourceFileForTesting("");
      Node node2 = new Node(16, node0, 112, 4);
      Node node3 = node0.useSourceInfoFrom(node2);
      node2.useSourceInfoFromForTree(node0);
      node3.addChildrenToBack(node1);
      node3.isObjectLit();
      node3.isStringKey();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = Node.newNumber(337.719726);
      try { 
        node0.setString("_");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 337.719726 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node.extractCharno(10);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.removeFirstChild();
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((-1627.8120496096553));
      node0.isOptionalArg();
      node0.setWasEmptyNode(false);
      node0.isSetterDef();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Ix%#y^CDq,");
      Node node1 = new Node(35, node0, node0, 49, 16);
      node1.addChildBefore(node1, node0);
      node0.getQualifiedName();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newNumber(0.22385486858946485);
      node0.isEmpty();
      Node node1 = Node.newNumber(0.0);
      node0.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(86, "6zr96>", 86, (-2753));
      node0.isLocalResultCall();
      node0.isVar();
      Node node1 = new Node(40, 2, 3711);
      node1.getInputId();
      node0.checkTreeEqualsImpl(node1);
      node1.isSetterDef();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString("<$K[\"SZ");
      Node node1 = new Node(29, node0, node0, node0);
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node((-1537));
      node0.getSourceFileName();
      // Undeclared exception!
      try { 
        node0.getAncestor((-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node((-1520));
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(117, 117, 117);
      node0.setWasEmptyNode(true);
      node0.isVar();
      node0.toStringTree();
      node0.isGetterDef();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newNumber((double) 22);
      node0.isQualifiedName();
      Node node1 = new Node(39, node0, node0, 393, 36);
      node0.isGetProp();
      node1.getDirectives();
      node0.isScript();
      node1.getLength();
      Node.newString("is_namespace", 21, 41);
      Node.extractCharno(35);
      // Undeclared exception!
      try { 
        node1.setDouble(1.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(91);
      node0.isInstanceOf();
      node0.isAssignAdd();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString("Ix%#y^CD,");
      Node node1 = new Node(35, node0, node0, 49, 16);
      node0.isUnscopedQualifiedName();
      Node node2 = new Node(39);
      node1.addChildBefore(node2, node0);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isIn();
      node1.isBlock();
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = Node.newString((-481), "FOR", 3657, (-481));
      Node node1 = new Node(3657, node0, node0, node0, node0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("FOR", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T;&%rN1nb.P");
      node0.isEquivalentTo(node1, true, true);
      node2.isInc();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString(126, "j[|MP3kb", 126, 126);
      node0.isVar();
      Node node1 = new Node(29, node0, node0, node0, node0);
      node1.removeChildren();
      node0.isVar();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString(38, "");
      Node node1 = new Node(47, node0, node0, 38, 16);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Node.INPUT_ID;
      node0.isName();
      Node node2 = null;
      try {
        node2 = new Node(40, node0, node1, node0, node0, 37, 2383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newNumber((-3189.9915091), 1121, 1121);
      node0.getIntProp(1);
      node0.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString(112, "com.google.common.base.CharMatcher$14", (-5264), (-5264));
      Node node1 = new Node(29, node0, 8, 44);
      node1.setCharno(32);
      node1.isObjectLit();
      node0.isComma();
      Node node2 = null;
      try {
        node2 = new Node(111, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("<$K[\"SZ");
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-3054), (-3054), 1812);
      Node node1 = new Node((-3054), node0, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(147, node1, node0, node0, 44, (-725));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newString("@#z:H,R`e_!w5");
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newNumber((double) 41, (-104), 2262);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(2243, "", 31, 2243);
      InputId inputId0 = new InputId(":6alt");
      inputId0.toString();
      inputId0.toString();
      inputId0.toString();
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isWith();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType.cast((JSType) null);
      jSTypeRegistry0.createObjectType((ObjectType) null);
      Node.mergeLineCharNo(1077, (-1796));
      node0.isGetProp();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = Node.newString(126, "j[|MP3kb", 42, 126);
      node0.isVar();
      node0.clonePropsFrom(node0);
      Node.newNumber((double) 53);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = Node.newNumber((-1.0));
      node0.copyInformationFromForTree(node1);
      node0.setSourceEncodedPositionForTree(53);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newString("}i$7%L'crB7HtqLN");
      Node node1 = Node.newNumber((double) 49, 36, 29);
      Node node2 = node1.srcrefTree(node0);
      node2.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node2.setWasEmptyNode(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node2.isString();
      node3.isFor();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseVoidType();
      // Undeclared exception!
      try { 
        node2.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("X_lD$3FiX+96/Y");
      node0.addChildrenToBack(node0);
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(91, 91, 91);
      node0.isIf();
      boolean boolean0 = node0.isEquivalentTo(node0, false, false);
      assertTrue(boolean0);
      
      node0.isReturn();
      assertEquals(91, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(372827, node0.getSourcePosition());
  }
}

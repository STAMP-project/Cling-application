/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:04:15 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.ArrayDeque;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.safeResolve((JSType) null, simpleErrorReporter0, noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, instanceObjectType0, instanceObjectType0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(parameterizedType0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.differsFrom(stringType0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
      boolean boolean0 = stringType0.differsFrom(namedType0);
      assertTrue(boolean0);
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
      JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderEquality(stringType0);
      boolean boolean0 = namedType0.differsFrom(jSType_TypePair0.typeB);
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry1.createDefaultObjectUnion(noResolvedType0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderShallowInequality(jSType0);
      jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      stringType0.getTypesUnderInequality(jSType0);
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noObjectType0, noObjectType0);
      noObjectType0.getTypesUnderEquality(parameterizedType0);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 1, 1);
      namedType0.getTypesUnderEquality(unionType0);
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(unionType0.isUnionType());
      assertFalse(namedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isAllType());
      
      JSType jSType1 = jSType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      JSType.getLeastSupertype((JSType) noResolvedType0, jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(jSType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, stringType0);
      JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "--rEU2-+SFw0t");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, allType0, "lb~^WPI!u");
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Unknown class name", 1, 1);
      namedType0.getTypesUnderShallowEquality(stringType0);
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) stringType0, (JSType) stringType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(stringType0);
      JSType jSType1 = stringType0.getLeastSupertype(jSType0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertSame(jSType1, jSType0);
      assertFalse(jSType1.isNoObjectType());
      assertFalse(jSType1.isResolved());
      assertFalse(jSType1.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Unknown class name", 1, 1);
      JSType.TypePair jSType_TypePair0 = namedType0.getTypesUnderEquality(stringType0);
      JSType jSType0 = jSType_TypePair0.typeB.getLeastSupertype(namedType0);
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "Unknown class name");
      stringType0.getTypesUnderEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = stringType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.autoboxesTo();
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "Not declared as a constructor");
      boolean boolean0 = noType0.canTestForEqualityWith(stringType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      noResolvedType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderShallowInequality(jSType0);
      jSType_TypePair0.typeA.canTestForEqualityWith(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getTypesUnderInequality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "Not declared as a constructor", 0, 0);
      stringType0.getTypesUnderInequality(namedType0);
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.testForEqualityHelper(allType0, allType0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.autoboxesTo();
      ObjectType objectType0 = jSType0.dereference();
      assertTrue(objectType0.hasCachedValues());
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "qOb*<ys3>=\" uv");
      JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
      boolean boolean0 = errorFunctionType0.canAssignTo(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.autoboxesTo();
      boolean boolean0 = jSType0.canAssignTo(stringType0);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.findPropertyType("opt_arg");
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = templateType0.equals(stringType0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.equals(jSTypeRegistry0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      boolean boolean0 = JSType.isEquivalent(jSType0, jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, instanceObjectType0, instanceObjectType0);
      assertTrue(instanceObjectType0.hasCachedValues());
      
      boolean boolean0 = parameterizedType0.differsFrom(instanceObjectType0);
      assertTrue(boolean0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(templateType0);
      assertTrue(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "G#$qQ=u2");
      Node node0 = Node.newString(1, "", (-2), 1207);
      errorFunctionType0.setSource(node0);
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noObjectType0);
      boolean boolean0 = jSType0.canTestForEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[8];
      TemplateType templateType0 = JSType.toMaybeTemplateType(jSTypeArray0[1]);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) stringType0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "yZ");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isParameterizedType();
      assertFalse(boolean0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.autoboxesTo();
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Named type with empty name component");
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isGlobalThisType();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "+UwG(");
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, errorFunctionType0);
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = stringType0.canTestForShallowEqualityWith(recordType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "Named type with empty name component", 0, 1);
      boolean boolean0 = namedType0.hasDisplayName();
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(namedType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "Named type with empty name component", 0, 1);
      boolean boolean0 = namedType0.hasDisplayName();
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isAllType());
      assertFalse(boolean0);
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      String string0 = jSType0.toString();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertEquals("(null|string)", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.clearResolved();
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "w");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
      jSType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isNumberValueType();
      assertFalse(boolean0);
      assertFalse(unionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isEnumType();
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      stringType0.matchConstraint(instanceObjectType0);
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.matchesUint32Context();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.googlw.javascript.rhino.jstype.JSType");
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(objectType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(parameterizedType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isInstanceType();
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesInt32Context();
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unknownType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(unknownType0);
      boolean boolean0 = jSType_TypePair0.typeA.isNamedType();
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(boolean0);
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = stringType0.dereference();
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNoResolvedType());
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      boolean boolean0 = unionType0.isOrdinaryFunction();
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      unionType0.isNumber();
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      boolean boolean0 = jSType0.hasDisplayName();
      assertFalse(jSType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canBeCalled();
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
      boolean boolean0 = unionType0.isBooleanValueType();
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      instanceObjectType0.setValidator(predicate0);
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isNominalConstructor();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.unboxesTo();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(stringType0);
      assertFalse(jSType0.isEnumElementType());
      
      boolean boolean0 = stringType0.canTestForEqualityWith(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isTemplateType());
      assertTrue(jSType0.isUnionType());
      assertFalse(boolean0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "~9\"~NV@x.2QZ>Xq");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.matchesStringContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) stringType0);
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.toAnnotationString();
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(noResolvedType0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderShallowInequality(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isString();
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.collapseUnion();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test84()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      String string0 = stringType0.toDebugHashCodeString();
      assertEquals("{262}", string0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getJSDocInfo();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      arrowType0.findPropertyType((String) null);
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "+UwG(");
      boolean boolean0 = errorFunctionType0.matchesStringContext();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      boolean boolean0 = objectType0.isStringValueType();
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "Not declared as a type name", 1, 0);
      assertFalse(namedType0.isResolved());
      
      JSType.safeResolve(namedType0, simpleErrorReporter0, namedType0);
      assertTrue(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getTypesUnderShallowEquality(stringType0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.googlw.javascript.rhino.jstype.JSType");
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }
}

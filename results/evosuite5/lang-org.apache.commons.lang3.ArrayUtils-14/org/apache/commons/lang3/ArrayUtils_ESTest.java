/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:35:26 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte[] byteArray0 = new Byte[1];
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[15];
      longArray0[0] = 0L;
      longArray0[1] = (long) ',';
      int int0 = ArrayUtils.indexOf(byteArray1, byte0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)835;
      shortArray0[2] = (short) (-2255);
      shortArray0[3] = (short) (-4064);
      shortArray0[4] = (short) (-3472);
      shortArray0[5] = (short)1544;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)1481;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)835, (short) (-2255), (short) (-4064), (short) (-3472), (short)1544, (short)0, (short)1481}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-3472);
      floatArray0[1] = (float) (short)835;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)835, (int) (short) (-2255));
      assertArrayEquals(new float[] {(-3472.0F), 835.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1544;
      intArray0[1] = (-2132);
      intArray0[2] = (int) (short)1544;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2146769431));
      assertArrayEquals(new int[] {1544, (-2132), 1544}, intArray1);
      assertArrayEquals(new int[] {1544, (-2132), 1544}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1574.6), (-188));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-553.8595F);
      floatArray0[1] = (-1688.917F);
      floatArray0[2] = (-2492.97F);
      floatArray0[3] = 3887.6294F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {3887.6294F, (-2492.97F), (-1688.917F), (-553.8595F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 'w';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 119L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("java.io.tmpdir");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(false, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[15];
      longArray0[0] = 0L;
      longArray0[1] = (long) ',';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 30L);
      assertEquals(15, longArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1678.056F;
      floatArray0[1] = (-1728.0F);
      Double double0 = new Double((-1728.0F));
      assertNotNull(double0);
      assertEquals((-1728.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(1.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      Double double3 = new Double((-1728.0F));
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-1728.0), (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1728.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 142;
      doubleArray0[1] = (double) 142;
      doubleArray0[2] = (double) 142;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 142.0);
      assertArrayEquals(new double[] {142.0, 142.0, 142.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {142.0, 142.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[6];
      doubleArray0[1] = (double) (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)10;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte)0, (byte)10, (byte) (-12), (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte)0, (byte)10, (byte) (-12), (byte)10}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte)0, (byte)10, (byte) (-12), (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-12), (byte)0, (byte)10, (byte) (-12), (byte)10}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertNotNull(byteArray2);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1006);
      intArray0[1] = (-1878);
      intArray0[2] = 369;
      intArray0[2] = (-1880);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1006), (-1878), (-1880), 0}, intArray0);
      assertArrayEquals(new int[] {(-1006), (-1878), (-1880), 0, (-1006), (-1878), (-1880), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2806;
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-67));
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-434.973679163), (-434.973679163));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = Integer.getInteger("java.lang.Object");
      assertNull(integer1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, (-5227));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '\\';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2276L;
      charArray0[1] = 'e';
      longArray0[3] = (-839L);
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 'e';
      longArray0[7] = (long) 'e';
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 2998L);
      assertArrayEquals(new long[] {2276L, 0L, 0L, (-839L), 101L, 101L, 0L, 101L}, longArray0);
      assertArrayEquals(new long[] {2998L, 2276L, 0L, 0L, (-839L), 101L, 101L, 0L, 101L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-536.8368197750646);
      doubleArray0[1] = (double) 101L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '\\';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2276L;
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) '\\';
      longArray0[3] = (-839L);
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) '\\';
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 2998L);
      assertArrayEquals(new long[] {2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 92L}, longArray0);
      assertArrayEquals(new long[] {2998L, 2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 92L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSameType("os.name", "os.name");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1967;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      intArray0[3] = (int) (byte)8;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)111;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte) (-45), (byte)111}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)0, (byte) (-45), (byte)111}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {1967, 0, 0, 8}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, intArray0);
      assertArrayEquals(new int[] {1967, 0, 0, 8}, intArray0);
      assertArrayEquals(new int[] {1967, 0, 0, 8}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2806;
      intArray0[1] = 2806;
      intArray0[2] = 988;
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, (int) (byte) (-72));
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte)9}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2806);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2806, (int)integer0);
      
      Integer integer1 = new Integer(540);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(540, (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 2806;
      integerArray0[1] = (Integer) 2806;
      integerArray0[2] = integer1;
      Integer integer2 = Integer.getInteger((String) null);
      assertNull(integer2);
      
      integerArray0[3] = null;
      integerArray0[4] = (Integer) 2806;
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      Integer integer4 = Integer.getInteger("l.c?j9>", integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      intArray0[1] = 2806;
      integerArray0[6] = integer1;
      integerArray0[7] = integer1;
      integerArray0[8] = (Integer) 988;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 1857);
      assertArrayEquals(new int[] {2806, 2806, 540, 1857, 2806, 1857, 540, 540, 988}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(intArray1);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('_');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('_', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'G');
      assertArrayEquals(new char[] {'m', '_'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)86;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 28, (byte) (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1922.0));
      assertNotNull(double0);
      assertEquals((-1922.0), (double)double0, 0.01);
      
      Double double1 = new Double((-3000.91));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-3000.91), (double)double1, 0.01);
      
      Double double2 = new Double((-1922.0));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1922.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-3000.91));
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals((-3000.91), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3000.91));
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals((-3000.91), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2189;
      intArray0[2] = 961;
      intArray0[4] = (-2637);
      intArray0[5] = 2240;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 2189, 961, 0, (-2637), 2240}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2240;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 2189;
      doubleArray0[5] = (double) 961;
      doubleArray0[6] = 616.1966197038512;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2762.1180352, 2133);
      assertArrayEquals(new double[] {0.0, 2240.0, 0.0, 0.0, 2189.0, 961.0, 616.1966197038512}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 961;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2130.0F);
      assertArrayEquals(new float[] {961.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {961.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, (-32));
      assertArrayEquals(new float[] {961.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(int1 == int0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (int) '(', (int) 'o');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer[] integerArray0 = new Integer[18];
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 142;
      doubleArray0[1] = (double) 142;
      doubleArray0[2] = (double) 142;
      doubleArray0[4] = (double) 142;
      doubleArray0[5] = (double) 142;
      doubleArray0[3] = (double) 142;
      Double double0 = new Double(142.0);
      assertNotNull(double0);
      assertEquals(142.0, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {142.0, 142.0, 142.0, 142.0, 142.0, 142.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, 142, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 142, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-207);
      intArray2[1] = (-207);
      intArray2[2] = (-1);
      intArray2[3] = (-1);
      intArray2[4] = 2660;
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean3);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-207);
      doubleArray1[1] = (double) 2660;
      boolean boolean4 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-207.0), 2660.0}, doubleArray1, 0.01);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Integer integer1 = new Integer((short)0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      String string0 = Integer.toUnsignedString(984);
      assertNotNull(string0);
      assertEquals("984", string0);
      
      long long0 = Integer.toUnsignedLong((short)0);
      assertEquals(0L, long0);
      
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 661.3, (int) (short)0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '\\';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2276L;
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) '\\';
      longArray0[3] = (-839L);
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) '\\';
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 2998L);
      assertArrayEquals(new long[] {2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 92L}, longArray0);
      assertArrayEquals(new long[] {2998L, 2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 92L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-536.8368197750646);
      doubleArray0[1] = (double) 92L;
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = (double) 2276L;
      doubleArray0[4] = (double) 101L;
      doubleArray0[5] = (double) 92L;
      doubleArray0[6] = (double) 2276L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2313, 0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-536.8368197750646), 92.0, 101.0, 2276.0, 101.0, 92.0, 2276.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1330.0892045681514);
      doubleArray0[2] = 2928.8;
      doubleArray0[3] = 100.0;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2109);
      shortArray0[1] = (short)5293;
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-1863));
      assertArrayEquals(new short[] {(short) (-2109), (short)5293, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)46;
      ArrayUtils.reverse((float[]) null);
      Float float0 = new Float((-32.0));
      assertNotNull(float0);
      assertEquals((-32.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)4;
      longArray0[2] = (long) (byte) (-48);
      longArray0[3] = (long) (byte) (-48);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 4L, (-48L), (-48L)}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-32.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1922.0));
      assertNotNull(double0);
      assertEquals((-1922.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((-1922.0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1922.0), (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      Double double3 = new Double((-3000.91));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-3000.91), (double)double3, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("p;R@Go1KQOu(k");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(true, true);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("p;R@Go1KQOu(k");
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = Boolean.valueOf("");
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      boolean boolean6 = Boolean.logicalAnd(true, false);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 387.210616859, 2129735849);
      assertEquals((-1), int0);
      
      boolean boolean7 = ArrayUtils.contains((Object[]) stringArray1, (Object) boolean4);
      assertTrue(boolean4.equals((Object)boolean6));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(boolean7);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) doubleArray0[1], 387.210616859);
      assertTrue(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      charArray0[3] = 'S';
      charArray0[4] = '@';
      charArray0[5] = 'U';
      charArray0[6] = '~';
      charArray0[7] = '@';
      charArray0[8] = '`';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertArrayEquals(new char[] {'x', ',', '\u0000', 'S', '@', 'U', '~', '@', '`'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[0];
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertSame(longArray2, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.reverse(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertSame(longArray2, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3377L);
      longArray0[1] = 1L;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-3377L), 1L}, longArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) 'o', (int) '(');
      assertArrayEquals(new char[] {'o', '(', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '@';
      charArray0[4] = '6';
      charArray0[5] = '$';
      charArray0[6] = '6';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'b', '6', '6', '@', '6', '$', '6'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'l');
      assertNull(charArray1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 32.0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 81.0F;
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte) (-34);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte)4;
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)5, (int) (byte) (-48));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)4, (byte)46, (byte) (-34), (byte) (-1), (byte)4, (byte)4}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Object, Object>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'T';
      charArray0[2] = '=';
      charArray0[3] = '2';
      charArray0[4] = 'D';
      charArray0[5] = '5';
      charArray0[6] = 'r';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'r');
      assertArrayEquals(new char[] {'R', 'T', '=', '2', 'D', '5', 'r'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap((Object[]) null);
      assertNull(map1);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 987);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short) (-32);
      objectArray0[3] = (Object) (short) (-32);
      objectArray0[4] = (Object) (short)0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.contains((byte[]) null, (byte) (-69));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float((double) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float float1 = new Float(2619.870873579);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2619.8708F, (float)float1, 0.01F);
      
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2619.8708F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short) (-32));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'e';
      charArray0[2] = 'q';
      charArray0[3] = '^';
      charArray0[5] = 'h';
      charArray0[6] = '$';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {' ', 'e', 'q', '^', '\u0000', 'h', '$'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1514), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-2), (byte) (-12), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = (double) ' ';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1514), (-1661.32704754));
      assertArrayEquals(new double[] {(-1.0), 0.0, 104.0, 32.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte) (-2));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-2L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3516);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3516)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3516), (short)0, (short) (-3516)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 123);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-3516);
      objectArray0[1] = (Object) (short)0;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[1] = object0;
      Object[] objectArray2 = ArrayUtils.addAll(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray1, objectArray2);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertEquals(4, objectArray2.length);
      assertNotNull(objectArray2);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, 123, (int) (short)0);
      assertNull(booleanArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-3516));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3516)}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short) (-3516)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3516), (short)0, (short) (-3516)}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Short short0 = new Short((short) (-3833));
      assertNotNull(short0);
      assertEquals((short) (-3833), (short)short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)605);
      assertArrayEquals(new short[] {(short) (-3833), (short) (-3833), (short)605}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, 534.3664283995248, (double) 0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)34;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)34);
      assertArrayEquals(new short[] {(short)34, (short)34}, shortArray0);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)34}, shortArray0);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)34, (short)34}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)34, (short)34}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(shortArray1, (short)34);
      assertArrayEquals(new short[] {(short)34, (short)34}, shortArray0);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean3);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-925));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-32);
      Double double0 = new Double((short) (-32));
      assertNotNull(double0);
      assertEquals((-32.0), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double double2 = new Double((-1.0));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      Double double3 = new Double(250.70129806255545);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(250.70129806255545, (double)double3, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2146034056));
      assertNotNull(integer0);
      assertEquals((-2146034056), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-32));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-32), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = Integer.remainderUnsigned((short) (-32), (short) (-32));
      assertEquals(0, int0);
      
      Integer integer2 = new Integer((-2146079492));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2146079492), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int)  (-32), 4);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-32)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-32), (short)0, (short) (-32)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-89);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)42, (byte)61}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)42, 48);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(int1 == int0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short) (-1);
      shortArray1[1] = short0;
      shortArray1[2] = short0;
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      double[] doubleArray0 = new double[7];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 294.44371811);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray0, object0, (int) (short)34);
      assertFalse(int1 == int0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'q';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-8), 1);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-2), 122.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType("", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("java.io.tmpdir");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[3] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[9];
      try { 
        Integer.valueOf((String) null, 57);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)73, (int) (byte)73);
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (int) (byte)73);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 73, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2806;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) 2806;
      doubleArray0[2] = (double) (-2805);
      doubleArray0[3] = (double) 2806;
      doubleArray0[4] = (double) 2806;
      doubleArray0[5] = (double) (-2805);
      doubleArray0[6] = (double) 2806;
      doubleArray0[7] = (double) (-2805);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.5, 2806.0, (-2805.0), 2806.0, 2806.0, (-2805.0), 2806.0, (-2805.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 2806.0, (-2805.0), 2806.0, 2806.0, (-2805.0), 2806.0, (-2805.0)}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer(558);
      assertNotNull(integer0);
      assertEquals(558, (int)integer0);
      
      Integer integer1 = new Integer(2806);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2806, (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1412);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 558;
      floatArray0[3] = 431.15F;
      floatArray0[4] = (float) 2806;
      floatArray0[5] = (float) 2806;
      floatArray0[6] = (float) 558;
      floatArray0[7] = (float) (-2805);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1412.0F), 0.0F, 558.0F, 431.15F, 2806.0F, 2806.0F, 558.0F, (-2805.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) "", 0);
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '[Ljava.lang.Object;@32711059', has a length less than 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1928;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {1928, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) null, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 967);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short) (-32);
      objectArray0[4] = (Object) (short) (-32);
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(14, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-32), (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-32));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(17, shortArray2.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray2);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short) (-32));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2682.345174691759;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40, 6048);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (int) (byte)3);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1094);
      shortArray0[1] = (short) (byte)48;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (-1064);
      shortArray0[5] = (short) (byte)3;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-1));
      assertArrayEquals(new short[] {(short) (-1094), (short)48, (short)0, (short) (-1064), (short)3}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1094), (short)48, (short) (-1), (short)0, (short) (-1064), (short)3}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-834);
      intArray0[1] = (int) (short)48;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {48, (-834)}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-834);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-834L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-834L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte)17);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      int int0 = Byte.toUnsignedInt(byte0);
      assertEquals(2, int0);
      
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) byte0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) byte0;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char char0 = 'q';
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('l');
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      Character character1 = Character.valueOf('m');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      Character character2 = Character.valueOf('m');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('m', (char)character2);
      
      Character[] characterArray0 = new Character[6];
      Character character3 = new Character('l');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('l', (char)character3);
      
      characterArray0[0] = character3;
      characterArray0[1] = (Character) 'q';
      characterArray0[2] = (Character) 'q';
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character2;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'l', 'q', 'q', 'l', 'l', 'm'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-756);
      shortArray0[1] = (short) (-649);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short) (-756)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short) (-756)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.contains(shortArray1, (short) (-756));
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-756), 64);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer((byte)72);
      assertNotNull(integer0);
      assertEquals(72, (int)integer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)72;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte) (-106);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)72, (byte)72, (byte)72, (byte)72, (byte)0, (byte)72, (byte)72, (byte) (-106)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'0'}, charArray1);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (float) 'f';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {102.0F, 102.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {102.0F, 102.0F, 102.0F, 102.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short) (-32);
      objectArray0[4] = (Object) (short) (-32);
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(14, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-32), (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-32));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(17, shortArray2.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(17, shortArray2.length);
      assertEquals(18, shortArray1.length);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short) (-32), 46);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(int1 == int0);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertEquals(11, int1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, 's', (int) (byte)48);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-67);
      shortArray0[1] = (short) (byte)48;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)48;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (byte)48;
      shortArray0[7] = (short) (byte)48;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-67), (short)48, (short) (-1), (short)48, (short) (-1), (short) (-1), (short)48, (short)48}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(8, shortArray0.length);
      assertEquals(5, int1);
      
      boolean boolean1 = ArrayUtils.contains(charArray1, 'w');
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)48;
      intArray0[3] = (-2062);
      intArray0[4] = (-1);
      boolean boolean2 = ArrayUtils.contains(intArray0, 2949);
      assertArrayEquals(new int[] {(-1), (-1), 48, (-2062), (-1)}, intArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, intArray0.length);
      assertFalse(boolean2);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[7] = ',';
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte)72);
      assertNotNull(integer0);
      assertEquals(72, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ',', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = new Integer('x');
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(120, (int)integer1);
      
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      intArray0[4] = (int) ',';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {44, 120, 120, 0, 44}, intArray0);
      assertArrayEquals(new int[] {44, 120, 120, 0, 44, 44, 120, 120, 0, 44}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2146822494);
      floatArray0[1] = (float) (-2146822494);
      floatArray0[2] = (float) (-2146822494);
      floatArray0[3] = (float) (-2146822494);
      floatArray0[4] = (float) (-2146822494);
      floatArray0[5] = (float) (-2146822494);
      floatArray0[6] = (float) (-2146822494);
      floatArray0[7] = (float) (-2146822494);
      floatArray0[8] = (float) (-2146822494);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3295), (-3295));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F), (-2.14682253E9F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1935;
      floatArray0[1] = (float) 2146724755;
      floatArray0[2] = (float) 1935;
      floatArray0[3] = (float) 1935;
      floatArray0[4] = (float) 2146724755;
      floatArray0[5] = (float) 2146724755;
      floatArray0[6] = (float) 1935;
      floatArray0[7] = (float) 1935;
      floatArray0[8] = (float) 2146724755;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1935.0F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1935.0F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "I`|u6{+g";
      stringArray0[1] = "nzN,d-";
      stringArray0[2] = "nzN,d-";
      stringArray0[3] = "nzN,d-";
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-2551.0F), 2146724755);
      assertArrayEquals(new float[] {1935.0F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1935.0F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F, 2.14672474E9F, 1935.0F, 1935.0F, 2.14672474E9F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray1, (short) (-32));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-1), 0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.reverse((short[]) null);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      int int0 = Short.compare((short) (-1824), (short)2);
      assertEquals((-1826), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)68);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) short0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1330.0892045681514);
      doubleArray0[1] = 147.32704753999997;
      doubleArray0[2] = 2928.8;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 1110.49;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2928.8);
      assertArrayEquals(new double[] {(-1330.0892045681514), 147.32704753999997, 2928.8, 100.0, 1110.49}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {2L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1514);
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[2] = (double) 'q';
      doubleArray0[0] = 2014.0;
      doubleArray0[4] = (double) 'q';
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = 2862.052460634395;
      doubleArray0[7] = (-1661.32704754);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2862.052460634395);
      assertArrayEquals(new double[] {2014.0, 0.0, 113.0, 0.0, 113.0, (-1.0), 2862.052460634395, (-1661.32704754)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, int0);
      
      Integer integer0 = new Integer(2634);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2634, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2145926371));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long(1035L);
      assertNotNull(long0);
      assertEquals(1035L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) longArray0, (Object[]) null);
      assertNotSame(longArray0, objectArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      Object[] objectArray1 = ArrayUtils.addAll((Object[]) null, objectArray0);
      assertFalse(longArray0.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(longArray0, objectArray1);
      assertNotSame(longArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'W';
      longArray0[1] = (long) 'W';
      longArray0[2] = (long) 'W';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {87L, 87L, 87L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {87L, 87L, 87L}, longArray0);
      assertArrayEquals(new long[] {87L, 87L, 87L}, longArray2);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      assertNotNull(longArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      byte[] byteArray0 = new byte[1];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      int int0 = ArrayUtils.indexOf(objectArray0, object4, 0);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotSame(object4, object2);
      assertNotSame(object4, object1);
      assertNotSame(object4, object0);
      assertNotSame(object4, object3);
      assertEquals(5, objectArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Long long0 = Long.getLong("ZEc5$#|xG|>3");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2159);
      shortArray0[1] = (short) (-2141);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)100;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)3424;
      shortArray0[7] = (short) (-2344);
      shortArray0[8] = (short)5188;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-2141), (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2141, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1709.9264;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {(-1.0), 1709.9264}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 18, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2198);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)26;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short)26}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'f';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertArrayEquals(new char[] {'Y', 'f', 'D', 'D', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'f', 'D', 'D', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'Y', 'f', 'D', 'D', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short[] shortArray0 = new Short[9];
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray1 = new short[3];
      shortArray1[1] = (short) short0;
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = (Object) 'X';
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      objectArray0[6] = (Object) 'X';
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, objectArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1469);
      shortArray0[1] = (short)125;
      shortArray0[2] = (short)2926;
      shortArray0[3] = (short)398;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1469), (short)125, (short)2926, (short)398}, shortArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2345.79);
      doubleArray0[1] = 1697.0450345399;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 435.8488;
      doubleArray0[4] = (-2071.63);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2613.8);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1696);
      assertArrayEquals(new double[] {(-2345.79), 1697.0450345399, 0.0, 435.8488, (-2071.63), 0.0, (-2613.8)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1696;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) 5;
      longArray0[4] = (long) 1696;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1075), 1696);
      assertArrayEquals(new long[] {1696L, 5L, 5L, 5L, 1696L}, longArray1);
      assertArrayEquals(new long[] {1696L, 5L, 5L, 5L, 1696L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1696;
      intArray0[1] = 1696;
      intArray0[2] = 1696;
      intArray0[3] = 2;
      intArray0[4] = (-1075);
      intArray0[5] = 5;
      intArray0[6] = 1696;
      intArray0[7] = 1696;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {1696, 1696, 1696, 2, (-1075), 5, 1696, 1696}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1696L, 5L, 5L, 5L, 1696L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '|');
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray1, (Object[]) characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 310.82F);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "G{", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 10);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)375);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)375}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)34;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)34);
      assertArrayEquals(new short[] {(short)34, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)34, (short)0, (short)34}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      String[] stringArray0 = ArrayUtils.add((String[]) null, "org.apache.commons.lang3.ArrayUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((short[]) null);
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1471);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)73, (int) (byte)73);
      assertArrayEquals(new byte[] {(byte)73, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      String[] stringArray0 = new String[1];
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse((short[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2189.0;
      doubleArray0[1] = (double) (-851);
      floatArray0[0] = (float) (-851);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2189.0, 802);
      assertArrayEquals(new double[] {2189.0, (-851.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 802);
      assertArrayEquals(new float[] {(-851.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-851.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (-386.45F), (-2637));
      assertArrayEquals(new float[] {(-851.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-851.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(int1 == int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-851.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2637);
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertArrayEquals(new long[] {(-2637L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1931));
      assertNotNull(integer0);
      assertEquals((-1931), (int)integer0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-999.67F), (-1931));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int1 = ArrayUtils.indexOf((Object[]) longArray1, (Object) integer0, (-1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(true, false);
      assertTrue(boolean3);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'W', 566);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)115;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-12), (byte)71, (byte)86, (byte) (-81), (byte)38, (byte) (-1), (byte)115}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)38;
      intArray0[2] = 566;
      intArray0[3] = (int) (byte)71;
      intArray0[4] = (int) (byte) (-12);
      intArray0[5] = (int) 'W';
      intArray0[6] = (int) (byte)38;
      intArray0[7] = 566;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 38, 566, 71, (-12), 87, 38, 566}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 987);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 987;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short)0, (int) (short)0);
      assertArrayEquals(new long[] {987L}, longArray0);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object1;
      boolean boolean1 = ArrayUtils.isNotEmpty(objectArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(36, shortArray2.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      ArrayUtils.reverse((short[]) null);
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1603.1589F));
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 64;
      intArray0[1] = 64;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 64;
      intArray1[1] = 64;
      intArray1[2] = 64;
      intArray1[3] = 64;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {64, 64}, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)53;
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) (byte)53;
      floatArray0[2] = (float) (byte)53;
      floatArray0[3] = (float) (byte)53;
      floatArray0[4] = (float) (byte)53;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {53.0F, 53.0F, 53.0F, 53.0F, 53.0F}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {53.0F, 53.0F, 53.0F, 53.0F, 53.0F}, floatArray0, 0.01F);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'I';
      charArray0[2] = 'z';
      charArray0[3] = 'W';
      charArray0[4] = '';
      charArray0[5] = 'X';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-372));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -372, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "Cannot store ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-2446.0F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-2446.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1709.9264;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1491.03994528);
      doubleArray0[5] = 387.210616859;
      doubleArray0[6] = 2628.977110125727;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1390.08657), 3770, 2708.0);
      assertArrayEquals(new double[] {(-1.0), 1709.9264, 1.0, (-1.0), (-1491.03994528), 387.210616859, 2628.977110125727}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte) (-103);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-103), (byte) (-99), (byte) (-103), (byte) (-99), (byte)59, (byte) (-99), (byte) (-103), (byte) (-103)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)59;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-103));
      assertArrayEquals(new byte[] {(byte)59}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)46;
      shortArray0[2] = (short) (-32);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)46;
      objectArray0[1] = (Object) (short) (-32);
      objectArray0[2] = (Object) (short) (-32);
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '=');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(boolean1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'W', 566);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'W';
      floatArray0[1] = (-975.6255F);
      floatArray0[2] = (-975.6255F);
      floatArray0[3] = (-975.6255F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-975.6255F));
      assertArrayEquals(new float[] {87.0F, (-975.6255F), (-975.6255F), (-975.6255F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {87.0F, (-975.6255F), (-975.6255F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2481;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      Character[] characterArray0 = new Character[7];
      char char0 = 'E';
      Character character0 = new Character('E');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('=');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('=', (char)character1);
      
      characterArray0[1] = character1;
      char char1 = 'R';
      Character character2 = new Character('R');
      assertTrue(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char1);
      assertFalse(char1 == char0);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('R', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char1);
      assertFalse(char1 == char0);
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      assertEquals('R', (char)character4);
      
      characterArray0[4] = character4;
      char char2 = Character.lowSurrogate(char0);
      assertFalse(char0 == char1);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertEquals('\uDC45', char2);
      
      Character character5 = new Character(char1);
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)char1));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)char2));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(char1 == char2);
      assertFalse(char1 == char0);
      assertNotNull(character5);
      assertEquals('R', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(',');
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character4));
      assertNotNull(character6);
      assertEquals(',', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertNotNull(characterArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) char1;
      floatArray0[1] = (float) char1;
      floatArray0[2] = (float) char1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {82.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 82.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[0];
      Character[] characterArray2 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray2, characterArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray2.length);
      assertNotNull(characterArray2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4503;
      shortArray0[1] = (short)1378;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1924);
      shortArray0[4] = (short)0;
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 5L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 's', (int) (short)0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)341);
      assertArrayEquals(new short[] {(short)4503, (short)1378, (short)0, (short) (-1924), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '(';
      charArray0[2] = 'X';
      charArray0[3] = '#';
      charArray0[4] = '8';
      charArray0[5] = 'X';
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1075));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      charArray0[5] = 'o';
      longArray0[2] = (long) 'o';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1075));
      assertArrayEquals(new long[] {(-1L), 0L, 111L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalXor(true, false);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("java.lang.Object");
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "java.lang.Object";
      objectArray0[1] = (Object) boolean3;
      objectArray0[2] = (Object) boolean3;
      objectArray0[3] = (Object) ',';
      objectArray0[4] = (Object) boolean3;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean4 == boolean1);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean4);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[2] = (int) ',';
      int int0 = ArrayUtils.indexOf(intArray0, (-164), (-164));
      assertArrayEquals(new int[] {44, 44, 44}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0089';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '\u0000';
      longArray0[2] = (long) '\u0089';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 137L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf("java.io.tmpdir");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[7];
      longArray0[2] = 137L;
      doubleArray0[1] = (double) '\u0089';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '\u0089';
      intArray0[1] = (int) '\u0089';
      intArray0[2] = (int) '\u0089';
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {137, 137, 137}, intArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, 137L}, longArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(3, longArray0.length);
      assertFalse(boolean3);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true, (-769));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = 3;
      String string0 = "";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, 3, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer[] integerArray0 = new Integer[15];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2057.872333547367;
      doubleArray1[1] = 1716.2662101;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2057.872333547367, 1716.2662101}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1716.2662101;
      doubleArray0[1] = 1716.2662101;
      doubleArray0[2] = 1716.2662101;
      doubleArray0[3] = 1716.2662101;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1716.2662101);
      assertArrayEquals(new double[] {1716.2662101, 1716.2662101, 1716.2662101, 1716.2662101, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1716.2662101, 1716.2662101, 1716.2662101, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long((byte)10);
      assertNotNull(long0);
      assertEquals(10L, (long)long0);
      
      Long long1 = new Long(1035L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1035L, (long)long1);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {1716.2662101, 1716.2662101, 1716.2662101, 1716.2662101, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1);
      
      Double[] doubleArray2 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-649);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short)100}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short)100}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short) (-649), (int) (short) (-649));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[2] = (int) (short) (-649);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-649);
      intArray0[5] = (int) (short)100;
      intArray0[6] = (int) (short)100;
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1838);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse((short[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 4703.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {4703.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4703.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3923;
      shortArray0[1] = (short) (-779);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-89);
      shortArray0[4] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short)3923, (short) (-779), (short)1, (short) (-89), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)3923, (short) (-779), (short)1, (short) (-89), (short)1}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) 961.0F;
      doubleArray0[5] = (double) 961.0F;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)1;
      doubleArray0[8] = (double) 2129735849;
      AbstractMap.SimpleImmutableEntry<Integer, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      boolean boolean0 = ArrayUtils.isNotEmpty(abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((int[]) null);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(30, doubleArray1.length);
      assertEquals(15, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[7] = ',';
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte)72);
      assertNotNull(integer0);
      assertEquals(72, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'x', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ',', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      
      Integer integer1 = new Integer('x');
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(120, (int)integer1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) ',';
      doubleArray0[1] = (double) 'x';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) ',';
      floatArray0[2] = (float) (byte)72;
      floatArray0[3] = (float) ',';
      floatArray0[4] = (-152.462F);
      floatArray0[5] = (float) ',';
      floatArray0[6] = (float) (byte)72;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {120.0F, 44.0F, 72.0F, 44.0F, (-152.462F), 44.0F, 72.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (-2488.16F), (int) (byte)72);
      assertArrayEquals(new float[] {120.0F, 44.0F, 72.0F, 44.0F, (-152.462F), 44.0F, 72.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Index: ";
      stringArray0[1] = "java.util.AbstractMap$SimpleImmutableEntry";
      stringArray0[2] = "33H_KOT{/";
      stringArray0[3] = "A)|W=E)uMO '";
      stringArray0[4] = "+-OX0Ca&Ph>";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "A)|W=E)uMO '");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("java.lang.String", "b/v+z");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>((String) null, (String) null);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<String, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
      assertEquals(2, abstractMap_SimpleEntryArray1.length);
      assertNotNull(abstractMap_SimpleEntryArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
      assertEquals(2, abstractMap_SimpleEntryArray1.length);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1715.8358254100597;
      doubleArray0[1] = 1715.8358254100597;
      doubleArray0[2] = (-34.797217215);
      doubleArray0[3] = 1422.03100352;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-34.797217215));
      assertArrayEquals(new double[] {1715.8358254100597, 1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1715.8358254100597, 1715.8358254100597, 1422.03100352, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1454;
      shortArray0[1] = (short) (-315);
      shortArray0[2] = (short)3;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1034));
      assertArrayEquals(new short[] {(short)1454, (short) (-315), (short)3}, shortArray0);
      assertArrayEquals(new short[] {(short)1454, (short) (-315), (short)3, (short) (-1034)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "org.apache.commons.lang3.ArrayUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(13, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1709.9264;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {(-1.0), 1709.9264, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (short)729);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float float0 = new Float(686.01609053709);
      assertNotNull(float0);
      assertEquals(686.0161F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = float0;
      floatArray1[1] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '`';
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '686.0161', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[1] = (-1.0);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)29);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)29}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-2155.516976157627));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-2155.516976157627), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.5);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1.5, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3320.5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2155.516976157627), 1.5}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (int) (short)0, (int) (short)0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap((Object[]) null);
      assertNull(map1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      
      Map<Object, Object> map2 = ArrayUtils.toMap((Object[]) null);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1), (int) (byte) (-34));
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Object, Object>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-17));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'C';
      charArray0[2] = 'i';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-9), 1408);
      assertArrayEquals(new char[] {'j', 'C', 'i', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'j', 'C', 'i', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-9));
      assertNotNull(integer0);
      assertEquals((-9), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(46);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(46, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(46);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(46, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(815);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(815, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(10);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(10, (int)integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-9), 46, 2, 46, 815, 10}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'x', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) ',';
      characterArray0[1] = (Character) 'x';
      characterArray0[2] = (Character) ',';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertArrayEquals(new char[] {',', 'x', ','}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-553.8595F);
      floatArray0[1] = (-1688.917F);
      floatArray0[2] = (-2492.97F);
      floatArray0[3] = 3887.6294F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {3887.6294F, (-2492.97F), (-1688.917F), (-553.8595F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = (Float) (-553.8595F);
      floatArray1[1] = (Float) 3887.6294F;
      floatArray1[2] = (Float) (-1688.917F);
      Float float0 = new Float((double) (-1688.917F));
      assertNotNull(float0);
      assertEquals((-1688.917F), (float)float0, 0.01F);
      
      floatArray1[3] = float0;
      floatArray1[4] = (Float) (-553.8595F);
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)13);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@3efc30bd', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1716.2662101;
      doubleArray0[1] = 1110.49;
      doubleArray0[2] = (-34.797217215);
      doubleArray0[3] = 1422.03100352;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1583.7388569));
      assertArrayEquals(new double[] {1716.2662101, 1110.49, (-34.797217215), 1422.03100352, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1716.2662101, 1110.49, (-34.797217215), 1422.03100352, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-207);
      doubleArray1[1] = (double) (-207);
      doubleArray1[2] = (double) (-207);
      doubleArray1[3] = (double) (-207);
      doubleArray1[4] = (double) (-207);
      doubleArray1[5] = (double) (-207);
      doubleArray1[6] = (double) (-207);
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-207);
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-207.0), (-207.0), (-207.0), (-207.0), (-207.0), (-207.0), (-207.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-207.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-207.0);
      objectArray0[1] = (Object) (-207.0);
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray1.length);
      assertEquals(2, objectArray0.length);
      assertNotNull(objectArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-207.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      int int0 = Boolean.compare(false, false);
      assertEquals(0, int0);
      
      booleanArray0[1] = (Boolean) boolean0;
      Boolean boolean2 = new Boolean(boolean0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(boolean0, boolean0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-17', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1325;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1325);
      assertArrayEquals(new int[] {1325}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2806;
      intArray0[1] = (-2805);
      intArray0[2] = 988;
      intArray0[1] = 0;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-9), (-111));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1197.518376583);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1197.518376583)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1197.518376583)}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1197.518376583)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1197.518376583)}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)48;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)46, (byte)48, (byte)22, (byte) (-21), (byte) (-121), (byte)48}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = (Short) (short)(byte)48;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (byte) (-21);
      doubleArray0[2] = (double) (byte)22;
      doubleArray0[3] = (double) (byte)48;
      doubleArray0[4] = (double) (byte)22;
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) shortArray0[0], (int) (byte)22, 0.0);
      assertArrayEquals(new double[] {0.0, (-21.0), 22.0, 48.0, 22.0, 0.0}, doubleArray0, 0.01);
      assertSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 22.0, 48.0, 22.0, (-21.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-456), (-456));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      try { 
        Long.parseUnsignedLong("", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'W', 566);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 566, (-2505));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, object0, (int) (short)34);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-649);
      shortArray0[2] = (short)0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'r';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'r';
      charArray0[7] = 'r';
      charArray0[8] = 'F';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'F', 512);
      assertArrayEquals(new char[] {'F', 'r', 'F', 'F', 'F', 'F', 'r', 'r', 'F'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(8, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 32.0, 512, 1739.79385);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('5');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      characterArray0[2] = characterArray0[1];
      Character character2 = Character.valueOf('@');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('@', (char)character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character('c');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('c', (char)character3);
      
      Character character4 = Character.valueOf('t');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('t', (char)character4);
      
      characterArray0[5] = character4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      Double double0 = new Double((-1724.6582F));
      assertNotNull(double0);
      assertEquals((-1724.658203125), (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-122.0F));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-2155.516976157627));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-2155.516976157627), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(intArray1, 347, (int) (byte) (-6));
      assertArrayEquals(new int[] {(-6)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-191.08399960408428), (-191.08399960408428));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1931));
      assertNotNull(integer0);
      assertEquals((-1931), (int)integer0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1931), (-1931));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1931));
      assertNotNull(long0);
      assertEquals((-1931L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '*';
      charArray0[2] = 'Z';
      charArray0[3] = 'D';
      int int0 = ArrayUtils.indexOf(charArray0, '5', 2146724766);
      assertArrayEquals(new char[] {'-', '*', 'Z', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) shortArray1, object0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray1, objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) 'D';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {42.0F, 68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {42.0F, 68.0F, 42.0F, 68.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)46;
      shortArray0[2] = (short) (-32);
      shortArray0[3] = (short) (-2807);
      shortArray0[4] = (short)252;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)252;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short) (-32));
      assertArrayEquals(new int[] {252}, intArray0);
      assertArrayEquals(new int[] {252}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'e';
      charArray0[2] = '9';
      charArray0[3] = 'h';
      charArray0[4] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'l');
      assertArrayEquals(new char[] {'r', 'e', '9', 'h', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2481;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '\\';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2276L;
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) '\\';
      longArray0[3] = (-839L);
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) '\\';
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 2998L);
      assertArrayEquals(new long[] {2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 92L}, longArray0);
      assertArrayEquals(new long[] {2998L, 2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 92L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-536.8368197750646);
      doubleArray0[1] = (double) 92L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 1229, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1229, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "Uu{}1Uuubj>ZG \"eC");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = ArrayUtils.add((String[]) null, "O_kRuc}ezykKk");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "v", (-130));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      Character character0 = Character.valueOf('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      Integer integer0 = new Integer(15);
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      int int0 = Integer.min((-34), 15);
      assertEquals((-34), int0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 2106965088);
      assertNull(intArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("S'7$b");
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-124), (int) (short) (-1));
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Object, Object>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-85), (-1083));
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertTrue(boolean0);
      
      int[] intArray2 = ArrayUtils.addAll((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '%');
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Float[] floatArray0 = new Float[1];
      float float0 = Float.min(2.14672474E9F, 4981.917F);
      assertEquals(4981.917F, float0, 0.01F);
      
      float float1 = Float.min((short) (-1), 119.93934F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      float float2 = Float.min((short) (-1), 743.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 961.0F);
      assertArrayEquals(new float[] {961.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2481;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) integerArray0, (Object[]) integerArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertNotSame(integerArray0, objectArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(2, objectArray0.length);
      assertNotNull(objectArray0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)objectArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, objectArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2345.79);
      doubleArray0[1] = 1697.0450345399;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 435.8488;
      doubleArray0[4] = (-2071.63);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2613.8);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1696);
      assertArrayEquals(new double[] {(-2345.79), 1697.0450345399, 0.0, 435.8488, (-2071.63), 0.0, (-2613.8)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1696;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) 5;
      Float float0 = new Float((-77.79855));
      assertNotNull(float0);
      assertEquals((-77.79855F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1696);
      assertArrayEquals(new double[] {(-2345.79), 1697.0450345399, 0.0, 435.8488, (-2071.63), 0.0, (-2613.8)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray1 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      
      Object[] objectArray2 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
      assertSame(objectArray0, objectArray2);
      assertSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray2.length);
      assertNotNull(objectArray2);
      
      Object[] objectArray3 = ArrayUtils.nullToEmpty(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray2);
      assertSame(objectArray1, objectArray3);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray3, objectArray2);
      assertNotSame(objectArray3, objectArray0);
      assertSame(objectArray3, objectArray1);
      assertEquals(0, objectArray1.length);
      assertEquals(0, objectArray3.length);
      assertNotNull(objectArray3);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Object[] objectArray4 = ArrayUtils.addAll(objectArray0, objectArray2);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray0.equals((Object)objectArray3));
      assertFalse(objectArray2.equals((Object)objectArray3));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray0));
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertNotSame(objectArray0, objectArray1);
      assertSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray4);
      assertNotSame(objectArray0, objectArray3);
      assertNotSame(objectArray2, objectArray3);
      assertSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray4);
      assertNotSame(objectArray4, objectArray1);
      assertNotSame(objectArray4, objectArray0);
      assertNotSame(objectArray4, objectArray3);
      assertNotSame(objectArray4, objectArray2);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray2.length);
      assertEquals(2, objectArray4.length);
      assertNotNull(objectArray4);
      
      Object[] objectArray5 = ArrayUtils.addAll(objectArray4, objectArray4);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray0.equals((Object)objectArray4));
      assertFalse(objectArray0.equals((Object)objectArray3));
      assertFalse(objectArray2.equals((Object)objectArray3));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray4));
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray0));
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray1));
      assertFalse(objectArray5.equals((Object)objectArray0));
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray5);
      assertSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray4);
      assertNotSame(objectArray0, objectArray3);
      assertNotSame(objectArray2, objectArray3);
      assertSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray5);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray4);
      assertNotSame(objectArray4, objectArray1);
      assertNotSame(objectArray4, objectArray5);
      assertNotSame(objectArray4, objectArray0);
      assertNotSame(objectArray4, objectArray3);
      assertNotSame(objectArray4, objectArray2);
      assertNotSame(objectArray5, objectArray3);
      assertNotSame(objectArray5, objectArray1);
      assertNotSame(objectArray5, objectArray0);
      assertNotSame(objectArray5, objectArray2);
      assertNotSame(objectArray5, objectArray4);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray2.length);
      assertEquals(2, objectArray4.length);
      assertEquals(4, objectArray5.length);
      assertNotNull(objectArray5);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray0[0] = short1;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 64;
      intArray0[3] = (int) short0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 64;
      intArray0[6] = (int) short0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 64, 0);
      assertArrayEquals(new int[] {0, 0, 64, 0, 0, 64, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 2471.9097F, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)10880;
      shortArray0[2] = (short) (-2566);
      shortArray0[3] = (short) (-1497);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)45, (short)10880, (short) (-2566), (short) (-1497)}, shortArray0);
      assertArrayEquals(new short[] {(short)45, (short)10880, (short) (-2566), (short) (-1497)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)39;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46, (int) (short)10880);
      assertArrayEquals(new byte[] {(byte)100, (byte)21, (byte)73, (byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1716.2662101;
      doubleArray0[1] = 1110.49;
      doubleArray0[2] = (-34.797217215);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {1716.2662101, 1110.49, (-34.797217215), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, int0);
      
      Long long0 = new Long(3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      Long long1 = new Long((-961L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-961L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long(0);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long long4 = new Long((-1L));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      Long long5 = new Long(984L);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(984L, (long)long5);
      
      Long long6 = new Long(861L);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals(861L, (long)long6);
      
      Long[] longArray0 = new Long[6];
      Long long7 = new Long((-1033L));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertNotNull(long7);
      assertEquals((-1033L), (long)long7);
      
      longArray0[0] = long7;
      longArray0[1] = long3;
      longArray0[2] = long0;
      longArray0[3] = long2;
      longArray0[4] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1L));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4503;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2397);
      assertArrayEquals(new short[] {(short)4503, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)4503, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)4, (byte)4, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1715.8358254100597;
      doubleArray0[1] = 1715.8358254100597;
      doubleArray0[2] = (-34.797217215);
      doubleArray0[3] = 1422.03100352;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1715.8358254100597);
      assertArrayEquals(new double[] {1715.8358254100597, 1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte) (-12);
      intArray0[2] = (int) (byte)10;
      intArray0[3] = (int) (byte)10;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {10, (-12), 10, 10}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 10);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1716.2662101;
      doubleArray0[1] = 1716.2662101;
      doubleArray0[2] = (-34.797217215);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1583.7388569));
      assertArrayEquals(new double[] {1716.2662101, 1716.2662101, (-34.797217215), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1716.2662101, 1716.2662101, (-34.797217215), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)10}, byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte)10}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[2] = 44L;
      longArray0[4] = 2998L;
      longArray0[6] = 2276L;
      longArray0[7] = 2276L;
      longArray0[8] = 2998L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (-1L));
      assertArrayEquals(new long[] {0L, 0L, 44L, 0L, 2998L, 0L, 2276L, 2276L, 2998L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 44L, 0L, 2998L, 0L, 2276L, 2276L, 2998L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '6';
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null, 2276L);
      assertNull(longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1917));
      assertNotNull(integer0);
      assertEquals((-1917), (int)integer0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-999.67F), (-1917));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-536.8368197750646);
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-536.8368197750646), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-536.8368197750646), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer[] integerArray0 = new Integer[10];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(10, integerArray0.length);
      assertEquals(20, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1486.26;
      doubleArray0[1] = 32.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 9.0, 92.0);
      assertArrayEquals(new double[] {1486.26, 32.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 1486.26, 488.73013126);
      assertArrayEquals(new double[] {1486.26, 32.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[5] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[6] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      objectArray0[7] = object6;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1469);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1469)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1469)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1), (int) (byte) (-34));
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.toArray((AbstractMap.SimpleImmutableEntry<Object, Object>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2211), (byte)58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2211, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (-3024));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'q', 1224);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2492;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2492}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      char[] charArray0 = new char[1];
      intArray0[0] = (int) '(';
      short[] shortArray3 = new short[6];
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray3[0] = (short)2694;
      shortArray3[1] = (short)2694;
      shortArray3[2] = (short)2694;
      shortArray3[3] = (short)2694;
      shortArray3[4] = (short)2694;
      shortArray3[5] = (short)2694;
      short[] shortArray4 = new short[8];
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray2));
      
      shortArray4[0] = (short)2694;
      shortArray4[1] = (short)2694;
      shortArray4[2] = (short)2694;
      shortArray4[3] = (short)2694;
      shortArray4[4] = (short)2694;
      shortArray4[5] = (short) (-5040);
      shortArray4[6] = (short)2694;
      shortArray4[7] = (short)2694;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray3, shortArray4);
      assertArrayEquals(new short[] {(short)2694, (short)2694, (short)2694, (short)2694, (short)2694, (short) (-5040), (short)2694, (short)2694}, shortArray4);
      assertArrayEquals(new short[] {(short)2694, (short)2694, (short)2694, (short)2694, (short)2694, (short)2694}, shortArray3);
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray3.equals((Object)shortArray4));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertEquals(8, shortArray4.length);
      assertEquals(6, shortArray3.length);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, (int) (short)2694);
      assertArrayEquals(new int[] {40}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(13);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer0, 13);
      assertArrayEquals(new int[] {40}, intArray0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 967);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 967;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short) (-32);
      longArray0[3] = (long) (short)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {967L, 0L, (-32L), 0L}, longArray0);
      assertArrayEquals(new long[] {967L, 0L, (-32L), 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      short[] shortArray3 = ArrayUtils.toPrimitive((Short[]) null, (short)0);
      assertNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)7, (-1494));
      assertArrayEquals(new byte[] {(byte)111, (byte)7, (byte) (-20), (byte)39, (byte)48, (byte) (-128), (byte)64, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = new Boolean[0];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      
      boolean[] booleanArray4 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertEquals(21, booleanArray4.length);
      assertNotNull(booleanArray4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
      
      short[] shortArray3 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(0, shortArray3.length);
      assertNotNull(shortArray3);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray2, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray3));
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)108);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-110), (byte)3, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-110), (byte)3, (byte) (-1), (byte)108}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      byte[] byteArray0 = new byte[1];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-99);
      byte byte1 = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-99), (byte) (-103), (byte) (-120), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray1 = new Byte[17];
      byteArray1[0] = (Byte) (byte) (-120);
      byteArray1[1] = (Byte) (byte) (-103);
      byteArray1[2] = (Byte) byte1;
      byteArray1[3] = (Byte) (byte) (-99);
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte) (-103);
      byteArray1[6] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertEquals(17, byteArray2.length);
      assertEquals(17, byteArray1.length);
      assertNotNull(byteArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-120);
      longArray0[1] = 773L;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) byte1;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) byte1;
      longArray0[7] = (long) (byte) (-120);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {(-120L), 773L, 0L, 2L, (-103L), 0L, (-103L), (-120L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(5, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-103);
      doubleArray0[1] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-103.0), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '5');
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1110.49;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1671.8F;
      floatArray0[2] = 1671.8F;
      floatArray0[3] = 1671.8F;
      floatArray0[4] = (-1889.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1889.0F), 321);
      assertArrayEquals(new float[] {1671.8F, 0.0F, 1671.8F, 1671.8F, (-1889.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = '5';
      charArray0[2] = 'I';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-4516), (byte) (-65));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4516, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2481;
      intArray0[1] = 2481;
      intArray0[2] = 2481;
      intArray0[3] = 2481;
      intArray0[4] = 2481;
      intArray0[5] = 2481;
      intArray0[6] = 2481;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481, 2481, 2481, 2481, 2481, 2481, 2481}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2682.345174691759;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40, 6048);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1757.997564, 0.0);
      assertArrayEquals(new double[] {2682.345174691759, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object0, (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(doubleArray0, (-1428.6427173481839), (int) (byte) (-1));
      assertArrayEquals(new double[] {2682.345174691759, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte)48;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte)3;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 48L, (-1L), 3L, (-1L), (-1L), 48L, (-1L), 3L}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 48L, (-1L), 3L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-1), 1193);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'U';
      charArray0[2] = 'r';
      charArray0[3] = 'F';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'U', 0);
      assertArrayEquals(new char[] {'j', 'U', 'r', 'F'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'j';
      doubleArray0[1] = (double) 'r';
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 'F';
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0, (-1), 106.0);
      assertArrayEquals(new double[] {106.0, 114.0, 106.0, (-1.0), (-1.0), 70.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'f';
      charArray0[3] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertArrayEquals(new char[] {'Y', 'f', '\u0000', 'D', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'f', '\u0000', 'D', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'Y', 'f', '\u0000', 'D', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'f';
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) 'f';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) '\u0000', (int) (short) (-1));
      assertArrayEquals(new double[] {102.0, 0.0, (-1.0), 102.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'Y';
      longArray0[1] = (-1L);
      boolean boolean3 = ArrayUtils.contains(longArray0, (long) 'Y');
      assertArrayEquals(new long[] {89L, (-1L)}, longArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(2, longArray0.length);
      assertTrue(boolean3);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean4 = ArrayUtils.contains(intArray0, (int) (short) (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-434.973679163), (-434.973679163));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-32);
      floatArray0[1] = (float) (short) (-32);
      floatArray0[2] = (float) (short) (-32);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 2);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F), (-32.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean("obt(e&/J1_.{NU4;|");
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[2] = boolean3;
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-32.0F));
      assertNotNull(double0);
      assertEquals((-32.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-32.0F));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-32.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-32.0F));
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-32.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1952.89416);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(1952.89416, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-83.0));
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals((-83.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[5]);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double6);
      assertEquals((-83.0), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[5]);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double7);
      assertEquals((-83.0), (double)double7, 0.01);
      
      Double double8 = new Double((double) doubleArray0[2]);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(double8);
      assertEquals((-32.0), (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[2]);
      assertArrayEquals(new double[] {(-32.0), (-32.0), (-32.0), 0.0, 1952.89416, (-83.0), (-83.0), (-32.0), (-32.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      long[] longArray0 = new long[15];
      longArray0[1] = (long) ',';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)2);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)46;
      shortArray0[3] = (short)46;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2807);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (short)46;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 46.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1827.838108266972);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-12);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'`', '`'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) '`';
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) '`';
      objectArray0[4] = (Object) '`';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = (Object) (byte)10;
      objectArray0[7] = (Object) (byte) (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean(boolean0);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      boolean boolean4 = Boolean.logicalXor(boolean0, (boolean) boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean4);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte) (-28), (int) (byte) (-28));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1715.8358254100597;
      doubleArray0[1] = 1715.8358254100597;
      doubleArray0[2] = (-34.797217215);
      doubleArray0[3] = 1422.03100352;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1715.8358254100597);
      assertArrayEquals(new double[] {1715.8358254100597, 1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-12)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((byte)10);
      assertNotNull(short0);
      assertEquals((short)10, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2033));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-2033), (short)short1);
      
      shortArray0[0] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 2.0, (int) (short) (-2033), 0.0);
      assertArrayEquals(new double[] {1715.8358254100597, 1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1715.8358254100597, (-34.797217215), 1422.03100352, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1422.03100352, (-34.797217215), 1715.8358254100597, 1715.8358254100597}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1', (-673));
      assertArrayEquals(new char[] {'x', ',', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-673);
      doubleArray0[1] = (double) 'S';
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1), (-673), 1.0);
      assertArrayEquals(new double[] {(-673.0), 83.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-975.6255F));
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}J$1OQrZ";
      stringArray0[1] = "}J$1OQrZ";
      stringArray0[2] = "}J$1OQrZ";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "}J$1OQrZ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1323L));
      assertNotNull(long0);
      assertEquals((-1323L), (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3570L;
      doubleArray0[1] = (double) 3570L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2954.6541197050424), (-2032));
      assertArrayEquals(new double[] {3570.0, 3570.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) long0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-9);
      shortArray0[1] = (short)5680;
      shortArray0[2] = (short) (byte) (-9);
      shortArray0[3] = (short) (byte) (-9);
      shortArray0[4] = (short)646;
      shortArray0[5] = (short) (byte) (-9);
      shortArray0[6] = (short) (byte) (-9);
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-9), (short)5680, (short) (-9), (short) (-9), (short)646, (short) (-9), (short) (-9)}, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[2] = 2276L;
      longArray0[5] = 2276L;
      longArray0[6] = 2276L;
      longArray0[7] = 2276L;
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '$');
      assertNull(charArray0);
      
      String[] stringArray0 = ArrayUtils.subarray((String[]) null, 22, (-3094));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-839L);
      longArray0[2] = 44L;
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(" in an array of ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      boolean boolean3 = Boolean.logicalXor(true, true);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      boolean boolean6 = Boolean.logicalOr(true, true);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6);
      
      boolean boolean7 = Boolean.getBoolean("S)8PP&tc");
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7);
      
      boolean boolean8 = Boolean.getBoolean((String) null);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8);
      
      Boolean boolean9 = new Boolean((String) null);
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean7));
      assertFalse(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean5));
      assertFalse(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean2));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2095, 2095);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean10 = ArrayUtils.isNotEmpty((Object[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean6);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean10);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1409.2;
      doubleArray0[1] = (-2243.6728962815328);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1409.2, (-2243.6728962815328)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)438;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)4, (short)438}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@bdb7097', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(false, false);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean0;
      booleanArray0[2] = boolean0;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[3] = boolean2;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[7] = boolean3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      objectArray0[8] = (Object) 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 1, 0);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3940);
      shortArray0[2] = (short)928;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)928, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-3940), (short)928}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (short) (-32));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)83;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-62)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[1] = 1L;
      longArray0[2] = (long) (byte)83;
      longArray0[3] = (long) (byte)83;
      longArray0[4] = (long) (short)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short)0, (int) (byte) (-62));
      assertArrayEquals(new long[] {0L, 1L, 83L, 83L, 0L}, longArray0);
      assertTrue(int1 == int0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) 1L, (int) (short)0, 1.0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-62)}, byteArray0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, 's', (int) (byte)48);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-67);
      shortArray0[1] = (short) (byte)48;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)48;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (byte)48;
      shortArray0[7] = (short) (byte)48;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-67), (short)48, (short) (-1), (short)48, (short) (-1), (short) (-1), (short)48, (short)48}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(8, shortArray0.length);
      assertEquals(5, int1);
      
      boolean boolean1 = ArrayUtils.contains(charArray1, 'w');
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)48;
      intArray0[3] = (-2062);
      intArray0[4] = (-1);
      boolean boolean2 = ArrayUtils.contains(intArray0, 2949);
      assertArrayEquals(new int[] {(-1), (-1), 48, (-2062), (-1)}, intArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean3);
      
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2062), (-1041));
      assertArrayEquals(new short[] {(short) (-67), (short)48, (short) (-1), (short)48, (short) (-1), (short) (-1), (short)48, (short)48}, shortArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 17);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = new Boolean(false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-536.8368197750646);
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-839L), (int) byte0, 10.404237);
      assertArrayEquals(new double[] {(-536.8368197750646), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = byte0;
      byteArray2[3] = (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray2, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, byteArray2.length);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-536.8368197750646), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(14, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray1);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e', 'e'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(6, charArray2.length);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "java.lang.Integer");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(false, true);
      assertTrue(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-756);
      shortArray0[1] = (short) (-649);
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-756), (short) (-649), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.contains(shortArray1, (short)0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertFalse(boolean1);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-756), 64);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      String[] stringArray0 = null;
      String[] stringArray1 = ArrayUtils.add((String[]) null, "org.apache.commons.lang3.ArrayUtils");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray1, (Object) "org.apache.commons.lang3.ArrayUtils", (int) (short)0);
      assertEquals(1, stringArray1.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'org.apache.commons.lang3.ArrayUtils', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {5, 5, 0, 5, 5, 5}, intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {5, 5, 0, 5, 5, 5}, intArray1);
      assertArrayEquals(new int[] {5, 5, 0, 5, 5, 5}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 3234L;
      longArray0[1] = (long) 1;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 5;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 5);
      assertArrayEquals(new long[] {3234L, 1L, (-1L), 5L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 32.0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 81.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {81.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-191.08399960408428);
      doubleArray0[1] = (-2072.1994852571);
      doubleArray0[2] = (-191.08399960408428);
      doubleArray0[3] = (-191.08399960408428);
      doubleArray0[4] = (-191.08399960408428);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-191.08399960408428);
      doubleArray0[7] = (-191.08399960408428);
      doubleArray0[8] = (-191.08399960408428);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1204.5), 1.5);
      assertArrayEquals(new double[] {(-191.08399960408428), (-2072.1994852571), (-191.08399960408428), (-191.08399960408428), (-191.08399960408428), 0.0, (-191.08399960408428), (-191.08399960408428), (-191.08399960408428)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '4';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'\'', '4'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertArrayEquals(new char[] {'\'', '4'}, charArray0);
      assertArrayEquals(new char[] {'\'', '4'}, charArray1);
      assertArrayEquals(new char[] {'\'', '4', '\'', '4'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(4, charArray2.length);
      assertNotNull(charArray2);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1532);
      ArrayUtils.reverse(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Character[] characterArray0 = new Character[6];
      char char0 = 't';
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('5');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('t', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('@');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('@', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('c');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      assertEquals('c', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('t');
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('t', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'t', '5', 't', '@', 'c', 't'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1648));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1648);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3948.0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1648.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1648.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1648.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1648.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-793), 100);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "1.7");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)8, (byte) (-39), (byte) (-80)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)8, (byte) (-39), (byte) (-80)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2806;
      intArray0[1] = (-2805);
      intArray0[2] = 961;
      intArray0[3] = 0;
      Long long0 = new Long(3570L);
      assertNotNull(long0);
      assertEquals(3570L, (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3570L, 3570L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-9), (-111));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) longArray0, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'W';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {87}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long(87);
      assertNotNull(long0);
      assertEquals(87L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 358L);
      assertArrayEquals(new long[] {87L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 87;
      doubleArray0[1] = 1422.03100352;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {87.0, 1422.03100352}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {87.0, 1422.03100352}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)0;
      shortArray0[2] = (short) (-1877);
      shortArray0[3] = (short) (-2807);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2807);
      intArray0[1] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2807), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1035L);
      assertNotNull(long0);
      assertEquals(1035L, (long)long0);
      
      longArray0[0] = long0;
      longArray0[2] = longArray0[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-3707.184585778974);
      doubleArray0[4] = (double) (short) (-2807);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1.0), (-3707.184585778974), 0.0, (-2807.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1.0), (-3707.184585778974), 0.0, (-2807.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)46;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)10, (byte)57, (byte)70, (byte)2, (byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)10, (byte)57, (byte)70, (byte)2, (byte)46}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2481;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 3984);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2481', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 294.44371811, (-500.649));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) null, (-1));
      assertTrue(int1 == int0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      char char0 = 'q';
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('l');
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      Character character1 = Character.valueOf('m');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      Character character2 = new Character('l');
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('l', (char)character2);
      
      Character[] characterArray0 = new Character[20];
      Character character3 = new Character('l');
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('l', (char)character3);
      
      characterArray0[0] = character3;
      characterArray0[1] = (Character) 'q';
      characterArray0[2] = (Character) 'q';
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character2;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(20, characterArray0.length);
      assertEquals(20, charArray1.length);
      assertNotNull(charArray1);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = '\'';
      charArray0[2] = 'T';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      int int0 = ArrayUtils.indexOf(charArray0, '\'', 580);
      assertArrayEquals(new char[] {'T', '\'', 'T', '\'', '\''}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'T', '\'', 'T', '\'', '\''}, charArray0);
      assertArrayEquals(new char[] {'T', '\'', 'T', '\'', '\'', 'T', '\'', 'T', '\'', '\''}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) null);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '\'';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) '\'';
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 580;
      longArray0[6] = (long) '\'';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 855);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 855, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2379.344F), (-851));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-851);
      longArray0[3] = (long) (-851);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-851L), (-851L), (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertArrayEquals(new long[] {(-851L), (-851L), (-1L), (-1L)}, longArray0);
      assertSame(longArray1, objectArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      objectArray0[8] = (Object) 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals(9, objectArray0.length);
      assertEquals(0, int0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48, (byte)48, (byte)48}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 's', (-935));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf((short[]) null, (short) (-19));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-3377);
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertArrayEquals(new int[] {0, (-3377), 1}, intArray0);
      assertArrayEquals(new int[] {0, (-3377), 1, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) (-3377);
      char[] charArray0 = new char[9];
      charArray0[0] = 'U';
      charArray0[1] = '@';
      charArray0[2] = '`';
      charArray0[3] = 'U';
      charArray0[4] = '~';
      charArray0[5] = '@';
      charArray0[6] = 'U';
      charArray0[7] = '`';
      charArray0[8] = 'U';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (-3377));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'U', '@', '`', 'U', '~', '@', 'U', '`', 'U'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '`';
      longArray0[1] = (long) 1;
      longArray0[2] = (long) '`';
      longArray0[3] = (long) (-3377);
      int int0 = ArrayUtils.indexOf(longArray0, (-3377L), (-3377));
      assertArrayEquals(new long[] {96L, 1L, 96L, (-3377L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2481;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2481}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-108);
      shortArray0[1] = (short) (byte) (-108);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)48;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-108), (short) (-108), (short) (-1), (short)48, (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (byte) (-108);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 512);
      assertArrayEquals(new int[] {(-1), (-108)}, intArray0);
      assertArrayEquals(new int[] {(-108)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-105));
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      Integer integer0 = new Integer(6234);
      assertNotNull(integer0);
      assertEquals(6234, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray1, (Object) integer0);
      assertEquals(0, longArray1.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean2);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, 396);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'G';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'{', 'G', 'Y', '9'}, charArray0);
      assertArrayEquals(new char[] {'{', 'G', 'Y', '9'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) longArray1, (Object[]) longArray1);
      assertNotSame(longArray1, objectArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'W', (int) 'W');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = 0.0F;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-32);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short) (-32), (short)0, (short)0, (short)0, (short)0, (short) (-32)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-32), (short)0, (short)0, (short)0, (short)0, (short) (-32)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 4051);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-32);
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2177, (int) (short)0);
      assertNull(booleanArray0);
      
      short[] shortArray2 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3028.962330426);
      doubleArray0[1] = 2128.01732531019;
      doubleArray0[2] = 3798.72766;
      doubleArray0[3] = 2128.01732531019;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 3798.72766;
      doubleArray0[6] = 0.0;
      doubleArray0[1] = 3798.72766;
      doubleArray0[8] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3028.962330426), 3798.72766, 3798.72766, 2128.01732531019, 1.0, 3798.72766, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertNotNull(float0);
      assertEquals(1.5F, (float)float0, 0.01F);
      
      Float float1 = new Float((-903.9F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-903.9F), (float)float1, 0.01F);
      
      Float float2 = new Float(0.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = new Float((-500.218F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-500.218F), (float)float3, 0.01F);
      
      Float float4 = new Float(106.0);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(106.0F, (float)float4, 0.01F);
      
      Float float5 = new Float((-3472.0F));
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals((-3472.0F), (float)float5, 0.01F);
      
      Float float6 = new Float(695.9154F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      assertEquals(695.9154F, (float)float6, 0.01F);
      
      float float7 = Float.sum(49.0F, (-3472.0F));
      assertEquals((-3423.0F), float7, 0.01F);
      
      Float float8 = new Float(1397.86F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotNull(float8);
      assertEquals(1397.86F, (float)float8, 0.01F);
      
      Float float9 = new Float(114.304857236);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotNull(float9);
      assertEquals(114.304855F, (float)float9, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float1;
      floatArray0[1] = float3;
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-903.9F), (-500.218F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '`';
      charArray1[2] = 'W';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {'w', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'`', '`', 'W'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[7];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)1152);
      assertArrayEquals(new short[] {(short)1152}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short)1152;
      longArray1[1] = (long) (short)1152;
      longArray1[2] = (long) (short)1152;
      longArray1[3] = (-3801L);
      longArray1[4] = 1117L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1152L, 1152L, 1152L, (-3801L), 1117L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(boolean0);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      long[] longArray3 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)0;
      shortArray0[2] = (short)46;
      shortArray0[3] = (short) (-2807);
      Double double0 = new Double((-2074.79532501635));
      assertNotNull(double0);
      assertEquals((-2074.79532501635), (double)double0, 0.01);
      
      Double double1 = new Double((short) (-2807));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2807.0), (double)double1, 0.01);
      
      Double double2 = new Double(840.1829494157);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(840.1829494157, (double)double2, 0.01);
      
      Double double3 = new Double((short)46);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(46.0, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double3;
      Double double4 = new Double((short) (-2807));
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals((-2807.0), (double)double4, 0.01);
      
      doubleArray0[1] = double4;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1422.03100352);
      assertArrayEquals(new double[] {46.0, (-2807.0), (-2074.79532501635)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)117);
      assertArrayEquals(new byte[] {(byte)0, (byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 892.72394F;
      floatArray0[2] = 1229.3F;
      floatArray0[3] = 884.0F;
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      ArrayUtils.reverse((long[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[3] = (int) 'S';
      intArray0[4] = (int) 'S';
      intArray0[5] = (int) 'S';
      intArray0[6] = (int) 'S';
      intArray0[7] = (int) 'S';
      intArray0[8] = (int) 'S';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {83, 83, 0, 83, 83, 83, 83, 83, 83}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(18, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)34;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)34, (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'h', 'm', '$', '$', '$'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 2572.755);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.isSameType("", "java.lang.Integer");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'$', '$', '$', 'm', 'h'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-88), (-2129985514));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      Double double0 = new Double(387.210616859);
      assertNotNull(double0);
      assertEquals(387.210616859, (double)double0, 0.01);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1751, 4299);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.vendor";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "java.vm.specification.vendor";
      stringArray0[3] = "java.lang.Long";
      stringArray0[4] = "java.lang.Long";
      stringArray0[5] = " in an array of ";
      stringArray0[6] = "Arguments cannot both be null";
      stringArray0[7] = "oAblb";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "java.lang.Long");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      Character[] characterArray1 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray1);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 985);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1350L, (-3516));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1716.2662101, 1716.2662101);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(2658);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2658, (int)integer0);
      
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2921.857F);
      floatArray0[1] = (-2921.857F);
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (-2921.857F);
      floatArray0[4] = (float) ',';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-2921.857F), (-2921.857F), 108.0F, (-2921.857F), 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2921.857F), (-2921.857F), 108.0F, (-2921.857F), 44.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 44.0F, 967);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float float0 = new Float(686.01609053709);
      assertNotNull(float0);
      assertEquals(686.0161F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = float0;
      floatArray1[1] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty((Float[]) null);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '`';
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray2.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1695, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-2);
      doubleArray0[1] = (double) (byte) (-12);
      doubleArray0[2] = 122.0;
      doubleArray0[3] = 122.0;
      doubleArray0[4] = 122.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2.0), (-484.2));
      assertArrayEquals(new double[] {(-2.0), (-12.0), 122.0, 122.0, 122.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameType("", object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(object1, object0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'r');
      assertNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = 0.0F;
      Byte byte0 = new Byte((byte)19);
      assertNotNull(byte0);
      assertEquals((byte)19, (byte)byte0);
      
      Byte byte1 = new Byte((byte)19);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)19, (byte)byte1);
      
      Byte byte2 = new Byte((byte)19);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)19, (byte)byte2);
      
      Byte byte3 = Byte.valueOf((byte)19);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)19, (byte)byte3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-19), (byte)19, (byte) (-1), (byte)19, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-19), (byte)19, (byte) (-1), (byte)19, (byte) (-1)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-19), (byte)19, (byte) (-1), (byte)19, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-19), (byte)19, (byte) (-1), (byte)19, (byte) (-1)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-111), 2130303778);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, object0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long long0 = Short.toUnsignedLong((short)2042);
      assertEquals(2042L, long0);
      
      long long1 = Short.toUnsignedLong((short)2042);
      assertTrue(long1 == long0);
      assertEquals(2042L, long1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-122.0F));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-12));
      assertNotNull(byte0);
      assertEquals((byte) (-12), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-8);
      Byte byte2 = new Byte((byte) (-8));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-8), (byte)byte2);
      
      long long2 = Byte.toUnsignedLong((byte) (-12));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(244L, long2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-8), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)35);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)35, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-8), (byte) (-8), (byte)35}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 985);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 985;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short)0, (int) (short)0);
      assertArrayEquals(new long[] {985L}, longArray0);
      assertTrue(int1 == int0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = 'C';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'#', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(140);
      assertNotNull(integer0);
      assertEquals(140, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1264);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1264, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'#', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) integerArray0, (-1890), (Object) integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1890, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-851);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2379.344F), (-851));
      assertArrayEquals(new float[] {(-851.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-851);
      longArray0[3] = (long) (-851);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray2);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray2.length);
      assertNotNull(longArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-851);
      intArray0[1] = 877;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-851.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(1456);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1456, (int)integer0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1);
      floatArray1[1] = (float) (-1);
      floatArray1[2] = (float) (-851L);
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-851.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-851.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-851.0F), (-1.0F), (-1.0F), (-851.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray2);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-851L), (-851L)}, longArray2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray2.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertNotNull(shortArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2481;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'f';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'Q';
      floatArray0[1] = 44.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 1);
      assertArrayEquals(new float[] {81.0F, 44.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {44.0F, 81.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-480));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1364.9807697);
      doubleArray0[1] = 147.32704753999997;
      doubleArray0[2] = 2928.8;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 1110.49;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2928.8);
      assertArrayEquals(new double[] {(-1364.9807697), 147.32704753999997, 2928.8, 100.0, 1110.49}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {2L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)99;
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 2, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)2, (byte)99, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)2, (byte)99, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 0, (-2146686875));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], 17);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-904.036F);
      floatArray0[1] = 892.72394F;
      floatArray0[2] = 1229.3F;
      floatArray0[3] = 884.0F;
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = '1';
      charArray0[2] = 'D';
      charArray0[3] = 'I';
      charArray0[4] = 'L';
      charArray0[5] = 'z';
      charArray0[6] = '8';
      charArray0[7] = '3';
      charArray0[8] = '6';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'S', '1', 'D', 'I', 'L', 'z', '8', '3', '6'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1), (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1364.9807697);
      doubleArray0[1] = 147.32704753999997;
      doubleArray0[2] = 2928.8;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 1110.49;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2928.8);
      assertArrayEquals(new double[] {(-1364.9807697), 147.32704753999997, 2928.8, 100.0, 1110.49}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3159;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3159, 2);
      assertArrayEquals(new int[] {3159}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3159;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3159.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3159.0F, 0.0F, 3159.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, 1236.0F, (-3292));
      assertArrayEquals(new float[] {3159.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3159.0F, 0.0F, 3159.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(int1 == int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      Boolean boolean3 = new Boolean(boolean0);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      boolean boolean4 = Boolean.logicalXor(boolean0, boolean0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      booleanArray0[2] = boolean3;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[3] = boolean5;
      boolean boolean6 = Boolean.getBoolean("{PU$");
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      boolean boolean8 = Boolean.logicalOr((boolean) boolean3, (boolean) boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean7));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean5));
      assertTrue(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean6));
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean0 == boolean6);
      assertTrue(boolean0 == boolean4);
      assertFalse(boolean8);
      
      booleanArray0[4] = boolean7;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean boolean9 = ArrayUtils.isSameLength((Object[]) byteArray1, objectArray1);
      assertArrayEquals(new byte[] {(byte) (-28)}, byteArray0);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, objectArray1.length);
      assertFalse(boolean9);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte) (-28), (int) (byte) (-28));
      assertNull(doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) boolean0);
      assertArrayEquals(new byte[] {(byte) (-28)}, byteArray0);
      assertTrue(boolean0 == boolean6);
      assertTrue(boolean0 == boolean8);
      assertTrue(boolean0 == boolean4);
      assertTrue(boolean0 == boolean9);
      assertFalse(int1 == int0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)34;
      intArray0[1] = (-2231);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {34, (-2231), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long((-86L));
      assertNotNull(long0);
      assertEquals((-86L), (long)long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2471L);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 32.0);
      assertNull(doubleArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?q";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-2458), (-2458));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0, (-2458), (double) (-2458));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = Boolean.logicalOr(false, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)57;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)57;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {57.0F, 2.0F, 2.0F, 57.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '~';
      charArray0[2] = 't';
      charArray0[3] = 'g';
      charArray0[4] = 'w';
      charArray0[5] = '%';
      charArray0[6] = ';';
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'O', '~', 't', 'g', 'w', '%', ';'}, charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = '(';
      charArray0[2] = 'X';
      charArray0[3] = '#';
      charArray0[4] = '2';
      charArray0[5] = 'z';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'z';
      int int0 = ArrayUtils.indexOf(doubleArray0, 122.0, (-1075));
      assertArrayEquals(new double[] {122.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      charArray0[5] = 'o';
      longArray0[2] = (long) 'o';
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '#';
      boolean boolean0 = ArrayUtils.contains(intArray0, (-3144));
      assertArrayEquals(new int[] {35}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Object, Object>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(object0, object0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Object, Object>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      char[] charArray1 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'D');
      assertArrayEquals(new char[] {'D'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1.0, (-4136.0));
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(1332.84F);
      assertNotNull(float0);
      assertEquals(1332.84F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(float1);
      assertEquals(1332.84F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(float2);
      assertEquals(1332.84F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[2]);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(float3);
      assertEquals(1332.84F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)1073;
      shortArray0[2] = (short)17;
      shortArray0[3] = (short) (-3616);
      shortArray0[4] = (short) (-3616);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)3;
      shortArray0[7] = (short)1348;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1348, (short)3, (short) (-1), (short) (-3616), (short) (-3616), (short)17, (short)1073, (short)59}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1348, (short)3, (short) (-1), (short) (-3616), (short) (-3616), (short)17, (short)1073, (short)59}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)1348, (short)3, (short) (-1), (short) (-3616), (short) (-3616), (short)17, (short)1073, (short)59}, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2274);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte[] byteArray0 = new Byte[1];
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[15];
      longArray0[0] = 0L;
      longArray0[1] = (long) ',';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) 0L;
      int int0 = new Integer(4);
      assertEquals(4, int0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) byte0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      shortArray0[1] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[4];
      long long0 = Short.toUnsignedLong((short) (-3841));
      assertEquals(61695L, long0);
      
      doubleArray0[0] = (double) short0;
      doubleArray0[1] = (double) short0;
      long long1 = Short.toUnsignedLong(short0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      doubleArray0[2] = (double) short0;
      doubleArray0[3] = (double) short0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 2362.0F);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) short0;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 83;
      Integer integer0 = new Integer(83);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(83, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(83, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {83, 83, 83}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Object[] objectArray0 = new Object[2];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "Q%4p$Q", (-6));
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)46;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)14, (-9));
      assertArrayEquals(new byte[] {(byte) (-48), (byte)4, (byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = ',';
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)72, 3160);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((byte)72);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(72, (int)integer0);
      
      Integer integer1 = new Integer((-1493));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1493), (int)integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte) (-72));
      assertArrayEquals(new int[] {72, 72, (-1493)}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-121));
      assertNotNull(short0);
      assertEquals((short) (-121), (short)short0);
      
      int int0 = Short.toUnsignedInt((byte) (-121));
      assertEquals(65415, int0);
      
      long long0 = Short.toUnsignedLong((short)1520);
      assertEquals(1520L, long0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-717.504752096), (int) (byte) (-121), (-293.44371811));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 808.552779, (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-34.797217215);
      doubleArray0[3] = 1422.03100352;
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      byte byte0 = (byte)21;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)36;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)9, 45);
      assertArrayEquals(new byte[] {(byte)21, (byte)36, (byte)9, (byte)9, (byte)21, (byte)10, (byte)36}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(3, int0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (byte)36, 2146309414);
      assertNull(intArray0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((byte)36);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("}_TVZ?GJnN4_Mu8D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}_TVZ?GJnN4_Mu8D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = false;
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = 1935;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 2146724755;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 48.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '%');
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Float float0 = new Float((-602.261503));
      assertNotNull(float0);
      assertEquals((-602.2615F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      float float1 = Float.min((short) (-1), 119.93934F);
      assertEquals((-1.0F), float1, 0.01F);
      
      float float2 = Float.min((short) (-1), 743.0F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 961.0F);
      assertArrayEquals(new float[] {(-602.2615F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-553.8595F);
      byte byte0 = (byte) (-82);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)71);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(48);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(48, (int)integer1);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1330.0892045681514);
      doubleArray0[2] = 2928.8;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 1110.49;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2928.8);
      assertArrayEquals(new double[] {(-1330.0892045681514), 0.0, 2928.8, 100.0, 1110.49}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 1626, 680L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1626, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)0;
      shortArray0[2] = (short) (-32);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-2807);
      doubleArray0[1] = (double) (short)46;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertArrayEquals(new double[] {(-2807.0), 46.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2807.0), 46.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray2);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)0;
      shortArray0[2] = (short) (-32);
      shortArray0[3] = (short) (-2807);
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertNotNull(byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short) (-2807);
      objectArray0[1] = (Object) (byte) (-12);
      objectArray0[2] = (Object) (byte) (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2807', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Double double0 = new Double((-1752.32590221672));
      assertNotNull(double0);
      assertEquals((-1752.32590221672), (double)double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1724.6582F);
      floatArray0[1] = (-1724.6582F);
      floatArray0[2] = (-1724.6582F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1724.6582F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1724.6582F));
      assertArrayEquals(new float[] {(-1724.6582F), (-1724.6582F), (-1724.6582F), (-1.0F), (-1724.6582F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1670L;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1670L}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0, 1650, 0.0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1650;
      intArray0[1] = 2200;
      intArray0[2] = (-1316);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {1650, 2200, (-1316)}, intArray0);
      assertArrayEquals(new int[] {1650, 2200, (-1316)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1316));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2200;
      objectArray0[1] = (Object) 2200;
      objectArray0[2] = (Object) 1650;
      objectArray0[3] = (Object) 1650;
      objectArray0[4] = (Object) 1650;
      objectArray0[5] = (Object) 1650;
      objectArray0[6] = (Object) (-1316);
      objectArray0[7] = (Object) 2200;
      int int2 = ArrayUtils.indexOf(objectArray0, (Object) "[=)KX`B'B<DMgnvm");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1733));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1733, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 101.0;
      doubleArray0[1] = 1716.2662101;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 117.3862732;
      doubleArray0[4] = (-2072.1994852571);
      doubleArray0[5] = 5534.189350571806;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 76.12319;
      doubleArray0[8] = 2.2;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {101.0, 1716.2662101, (-1.0), 117.3862732, (-2072.1994852571), 5534.189350571806, (-1.0), 76.12319, 2.2}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {101.0, 1716.2662101, (-1.0), 117.3862732, (-2072.1994852571), 5534.189350571806, (-1.0), 76.12319, 2.2}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)0;
      shortArray0[5] = (short)46;
      shortArray0[3] = (short) (-2807);
      Double double0 = new Double((-2074.79532501635));
      assertNotNull(double0);
      assertEquals((-2074.79532501635), (double)double0, 0.01);
      
      Double double1 = new Double((short) (-2807));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2807.0), (double)double1, 0.01);
      
      Double double2 = new Double(840.1829494157);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(840.1829494157, (double)double2, 0.01);
      
      Double double3 = new Double((short)0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[14];
      doubleArray0[0] = double3;
      Double double4 = new Double((short) (-2807));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals((-2807.0), (double)double4, 0.01);
      
      doubleArray0[1] = double4;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1422.03100352);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 2105;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2105);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2105, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)48;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)8, (short)48}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)8, (short)48, (short)2, (short)2, (short)8, (short)48}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-429));
      assertNotNull(integer0);
      assertEquals((-429), (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((short)2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-429));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-429), (int)integer2);
      
      integerArray0[3] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)46;
      shortArray0[2] = (short) (-32);
      shortArray0[3] = (short) (-2807);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2807);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)46, (short)0, (short) (-32), (short) (-2807), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray1, (short) (-32));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-1), 0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)39;
      boolean boolean4 = ArrayUtils.contains(byteArray0, (byte)65);
      assertArrayEquals(new byte[] {(byte)65, (byte)83, (byte)1, (byte)79, (byte)10, (byte) (-47), (byte)39}, byteArray0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2806;
      intArray0[1] = (-2802);
      intArray0[2] = 988;
      intArray0[3] = 0;
      intArray0[4] = 1433;
      intArray0[5] = 3159;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1433, (-2802));
      assertArrayEquals(new int[] {2806, (-2802), 988, 0, 1433, 3159}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-721.3F);
      floatArray0[3] = (float) (-2802);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 1433;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-721.3F), (-2802.0F), 0.0F, 0.0F, 1433.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) 2806, (-1532));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-721.3F), (-2802.0F), 0.0F, 0.0F, 1433.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)36;
      shortArray0[1] = (short)135;
      shortArray0[2] = (short)1857;
      shortArray0[3] = (short) (-3467);
      shortArray0[4] = (short) (-2738);
      shortArray0[5] = (short) (-1741);
      shortArray0[6] = (short)582;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)48;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1857, (int) (short) (-1741));
      assertArrayEquals(new short[] {(short)36, (short)135, (short)1857, (short) (-3467), (short) (-2738), (short) (-1741), (short)582, (short)1, (short)48}, shortArray0);
      assertFalse(int1 == int0);
      assertEquals(9, shortArray0.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-284.1598);
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-315), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -315, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)48;
      longArray0[1] = (long) (byte)48;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {48L, 48L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)72, (int) short0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((short) (-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '@';
      charArray1[1] = '~';
      charArray1[2] = '~';
      charArray1[3] = 'U';
      charArray1[4] = '@';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'@', '~', '~', 'U', '@'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = new Integer(2452);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2452, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1801.8181F, (-851));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-851);
      longArray0[2] = (long) (-851);
      longArray0[3] = (long) (-851);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-851);
      longArray0[6] = (long) (-851);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), (-851L), (-851L), (-851L), (-1L), (-851L), (-851L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L), (-851L), (-851L), (-851L), (-1L), (-851L), (-851L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-851L), (-851L), (-851L), (-1L), (-851L), (-851L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-851L), (-851L), (-851L), (-1L), (-851L), (-851L)}, longArray2);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray2.length);
      assertNotNull(longArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-851);
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, (-1), (-1), (-1), (-851)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-851)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = 2145930613;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2145930613);
      assertArrayEquals(new int[] {2145930613}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      Double double0 = new Double(2145930613);
      assertNotNull(double0);
      assertEquals(2.145930613E9, (double)double0, 0.01);
      
      boolean boolean0 = Double.isFinite((-1170.3938161099834));
      assertTrue(boolean0);
      
      double double1 = Double.sum(1.0, 0.0);
      assertEquals(1.0, double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)46;
      shortArray0[8] = (short)46;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 802;
      doubleArray0[1] = (double) (short)46;
      doubleArray0[2] = (double) (short) (-32);
      doubleArray0[3] = (double) (short) (-32);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2189.0, (int) (short)46);
      assertArrayEquals(new double[] {802.0, 46.0, (-32.0), (-32.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-32);
      floatArray0[1] = (float) (short)46;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (short)46;
      floatArray0[4] = (float) (short)46;
      floatArray0[5] = (float) (short)46;
      floatArray0[6] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 802);
      assertArrayEquals(new float[] {(-32.0F), 46.0F, (-1.0F), 46.0F, 46.0F, 46.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-32.0F), 46.0F, (-1.0F), 46.0F, 46.0F, 46.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '|';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '|');
      assertArrayEquals(new char[] {'+', '|'}, charArray0);
      assertArrayEquals(new char[] {'+'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("lX_7?Lvc");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean("lX_7?Lvc");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      boolean boolean4 = true;
      Boolean boolean5 = Boolean.valueOf(true);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = Boolean.valueOf(false);
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[5] = boolean7;
      Boolean boolean8 = Boolean.FALSE;
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean6));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray0[6] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean4);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray1));
      assertFalse(boolean4 == boolean0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 949);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1669), (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)2198);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray2.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1724.6582F);
      Double double0 = new Double((-1724.6582F));
      assertNotNull(double0);
      assertEquals((-1724.658203125), (double)double0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) (-1724.6582F);
      objectArray0[3] = (Object) (-1724.6582F);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 920);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((short[]) null);
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-975.6255F));
      assertNull(floatArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1433);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-3024), (-3024));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1136);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-1);
      Float float0 = new Float(106.0);
      assertNotNull(float0);
      assertEquals(106.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (byte)0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5, 5}, intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5, 5}, intArray1);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5, 5}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 3234L;
      longArray0[1] = (long) 1;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 5;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, 5);
      assertArrayEquals(new long[] {3234L, 1L, (-1L), 5L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 154);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.contains(intArray1, 5);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5, 5}, intArray1);
      assertArrayEquals(new int[] {5, 5, 5, 5, 5, 5}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "Uu{}1Uuubj>ZG \"eC");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = ArrayUtils.add((String[]) null, "O_kRuc}ezykKk");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "v", (-130));
      assertEquals((-1), int0);
      
      String[] stringArray2 = ArrayUtils.addAll((String[]) null, (String[]) null);
      assertNull(stringArray2);
      
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleEntry<String, Object>[]) null, (AbstractMap.SimpleEntry<String, Object>[]) null);
      assertNull(abstractMap_SimpleEntryArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Double double0 = new Double(2130.0);
      assertNotNull(double0);
      assertEquals(2130.0, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-5224.8461392));
      assertNull(doubleArray0);
      
      int int0 = new Integer(2136356789);
      assertEquals(2136356789, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[7] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-32);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-32);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short) (-32), (short)0, (short) (-32), (short)0, (short) (-32)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray1, false, 2074);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (int) (short)2, 176);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray2);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short) (-32), (short)0, (short) (-32), (short)0, (short) (-32)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(13, shortArray2.length);
      assertEquals(14, shortArray1.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      char[] charArray0 = new char[1];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-9);
      doubleArray0[1] = (double) (long)longArray0[2];
      int int0 = new Byte((byte) (-9));
      assertEquals((byte) (-9), int0);
      
      Integer integer0 = new Integer((-781));
      assertNotNull(integer0);
      assertEquals((-781), (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) longArray0, (Object) integer0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)49;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)100, (byte) (-35), (byte) (-103), (byte)99, (byte) (-35), (byte) (-127), (byte) (-125), (byte)49}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)100, (byte) (-35), (byte) (-103), (byte)99, (byte) (-35), (byte) (-127), (byte) (-125), (byte)49}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 961.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2181), 1433);
      assertArrayEquals(new double[] {1.0, 961.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 961.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-35);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.logicalOr(false, true);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[3] = (short) (-2807);
      shortArray0[4] = (short)252;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-2807);
      doubleArray0[1] = 1110.9163335185974;
      doubleArray0[2] = (double) (short) (-32);
      doubleArray0[3] = 2011.648;
      doubleArray0[4] = (double) (short) (-2807);
      doubleArray0[5] = (double) (short) (-2807);
      doubleArray0[6] = (-215.76976843259);
      doubleArray0[7] = (double) (short)252;
      doubleArray0[8] = (double) (short)252;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-527.0));
      assertArrayEquals(new double[] {(-2807.0), 1110.9163335185974, (-32.0), 2011.648, (-2807.0), (-2807.0), (-215.76976843259), 252.0, 252.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (short) (-2807);
      longArray2[1] = (long) (short)252;
      longArray2[2] = (long) (short)252;
      longArray2[3] = (long) (-1);
      longArray2[4] = (long) (short)252;
      longArray2[5] = (long) (short)252;
      longArray2[6] = (long) (short) (-2807);
      longArray2[7] = (long) (short) (-2807);
      longArray2[8] = (long) (short) (-32);
      long[] longArray3 = ArrayUtils.addAll((long[]) null, longArray2);
      assertArrayEquals(new long[] {(-2807L), 252L, 252L, (-1L), 252L, 252L, (-2807L), (-2807L), (-32L)}, longArray2);
      assertArrayEquals(new long[] {(-2807L), 252L, 252L, (-1L), 252L, 252L, (-2807L), (-2807L), (-32L)}, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray3.length);
      assertNotNull(longArray3);
      
      long[] longArray4 = ArrayUtils.addAll(longArray3, (long[]) null);
      assertArrayEquals(new long[] {(-2807L), 252L, 252L, (-1L), 252L, 252L, (-2807L), (-2807L), (-32L)}, longArray2);
      assertArrayEquals(new long[] {(-2807L), 252L, 252L, (-1L), 252L, 252L, (-2807L), (-2807L), (-32L)}, longArray3);
      assertArrayEquals(new long[] {(-2807L), 252L, 252L, (-1L), 252L, 252L, (-2807L), (-2807L), (-32L)}, longArray4);
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertNotSame(longArray2, longArray4);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray4, longArray2);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray3);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray3.length);
      assertEquals(9, longArray4.length);
      assertNotNull(longArray4);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-48);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-116), (byte)127, (byte)72, (byte)0, (byte)68, (byte) (-48)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'e';
      charArray0[2] = 'q';
      charArray0[3] = '^';
      charArray0[5] = 'h';
      charArray0[6] = '$';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {' ', 'e', 'q', '^', '\u0000', 'h', '$'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = (double) ' ';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1514), (-1661.32704754));
      assertArrayEquals(new double[] {(-1.0), 0.0, 104.0, 32.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 761, (-1724.6582F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 761, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'e';
      charArray0[2] = '\\';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'x', 'e', '\\'}, charArray0);
      assertArrayEquals(new char[] {'x', 'e', '\\', 'x', 'e', '\\'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 2998L;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) 0;
      longArray0[3] = 89L;
      longArray0[4] = (-839L);
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 5L);
      assertArrayEquals(new long[] {2998L, 120L, 0L, 89L, (-839L)}, longArray0);
      assertArrayEquals(new long[] {5L, 2998L, 120L, 0L, 89L, (-839L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-1399), (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'q';
      charArray0[3] = '^';
      charArray0[6] = '$';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {' ', ' ', 'q', '^', '\u0000', '\u0000', '$'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-2);
      byteArray0[1] = (byte) (-12);
      byteArray0[3] = (byte) (-27);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-12);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-12L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("java.io.tmpdir");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = '(';
      charArray0[2] = 'X';
      charArray0[3] = '#';
      charArray0[4] = '2';
      charArray0[5] = 'z';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'z';
      int int0 = ArrayUtils.indexOf(doubleArray0, 122.0, (-1075));
      assertArrayEquals(new double[] {122.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      charArray0[5] = 'o';
      longArray0[2] = (long) 'o';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1075));
      assertArrayEquals(new long[] {(-1L), 0L, 111L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '#';
      boolean boolean1 = ArrayUtils.contains(intArray0, (-3144));
      assertArrayEquals(new int[] {35}, intArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 3122);
      assertArrayEquals(new byte[] {(byte)66, (byte)4, (byte) (-34), (byte)100, (byte)98, (byte) (-124), (byte)0, (byte)1}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)4, (byte) (-34), (byte)100, (byte)98, (byte) (-124), (byte)0, (byte)1}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-124);
      shortArray0[1] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-124), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 5, (-1692));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 1583);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1583, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = Boolean.compare(true, true);
      assertEquals(0, int0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = Boolean.logicalXor(true, true);
      assertFalse(boolean2);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)106;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)100, (byte) (-93), (byte)106}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)106;
      byteArray1[3] = (byte)100;
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)100, (byte) (-93), (byte)106}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)100, (byte)106, (byte)100}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L2o=R6m";
      stringArray0[1] = "";
      stringArray0[2] = "QYGvDuxq";
      stringArray0[3] = "f`\")7AljJ>]MOS";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-32);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-32), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 321;
      floatArray0[1] = (-1889.0F);
      floatArray0[3] = (float) 321;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-500.0F), 57);
      assertArrayEquals(new float[] {321.0F, (-1889.0F), 0.0F, 321.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '5';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '!';
      charArray0[5] = '\'';
      charArray0[6] = '7';
      charArray0[7] = '!';
      charArray0[8] = '7';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'7', '5', '\'', '\'', '!', '\'', '7', '!', '7'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {321.0F, (-1889.0F), 0.0F, 321.0F}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean2);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-3286.04));
      assertNotNull(double0);
      assertEquals((-3286.04), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-297));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -297, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 1, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Double double0 = new Double(122.0);
      assertNotNull(double0);
      assertEquals(122.0, (double)double0, 0.01);
      
      Double double1 = new Double(1866.9451229545857);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1866.9451229545857, (double)double1, 0.01);
      
      Double double2 = new Double((-2074.79532501635));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-2074.79532501635), (double)double2, 0.01);
      
      Double double3 = new Double((short) (-2807));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-2807.0), (double)double3, 0.01);
      
      Double double4 = new Double((-1.0));
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals((-1.0), (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 122.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) '^';
      floatArray0[3] = (float) (byte) (-27);
      floatArray0[4] = (float) (byte) (-27);
      floatArray0[5] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {104.0F, 0.0F, 94.0F, (-27.0F), (-27.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2071.63);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2071.63);
      doubleArray0[3] = (-2613.8);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1422.03100352, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-2071.63), (-1.0), (-2071.63), (-2613.8), 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) '\u0000', (int) '&');
      assertArrayEquals(new char[] {'\u0000', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-191.08399960408428), (-191.08399960408428));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '\\';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      long[] longArray0 = new long[8];
      longArray0[0] = 2276L;
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) '\\';
      longArray0[3] = (-839L);
      longArray0[4] = (long) 'e';
      longArray0[5] = (long) 'e';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) 'e';
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 2998L);
      assertArrayEquals(new long[] {2998L, 2276L, 101L, 92L, (-839L), 101L, 101L, 101L, 101L}, longArray1);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-536.8368197750646);
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) (byte)0, 0);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'e', '\\', 'e', '\\'}, charArray1);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(18, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ArrayUtils.reverse(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      Boolean.getBoolean("QhQ_Z{Ta?QnbNb");
      Boolean.getBoolean((String) null);
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean(boolean0);
      Boolean.logicalXor(boolean0, (boolean) boolean2);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-28);
      intArray0[1] = (int) (byte) (-28);
      intArray0[2] = (int) (byte) (-28);
      intArray0[3] = (int) (byte) (-28);
      intArray0[4] = (int) (byte) (-28);
      intArray0[5] = (int) (byte) (-28);
      intArray0[6] = (int) (byte) (-28);
      intArray0[7] = (-2129022905);
      intArray0[8] = (int) (byte) (-28);
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.isNotEmpty((double[]) null);
      long[] longArray0 = new long[0];
      ArrayUtils.isSameLength(longArray0, (long[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-28', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2806;
      doubleArray0[1] = (double) 2806;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1325;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2001);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-986));
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      
      Double[] doubleArray0 = new Double[4];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1709.9264;
      doubleArray0[2] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3770, (-2790.437496));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer0 = new Integer((-2146833093));
      Integer integer1 = new Integer(370);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Map.Entry.comparingByValue();
      Integer integer2 = new Integer((-2146833093));
      Integer.divideUnsigned(2670, (-2146833093));
      Integer.sum(2147081345, 370);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) integer2);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      
      Object object0 = new Object();
      Object object1 = new Object();
      ArrayUtils.isSameType(object0, object1);
      ArrayUtils.toPrimitive((Float[]) null, 2130.0F);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2147081345;
      doubleArray0[1] = (double) 2147081345;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2670, 1, 2.147081345E9);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short((short)0);
      Object object0 = new Object();
      Object object1 = new Object();
      Short.compare(short0, (short)914);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      ArrayUtils.isEmpty((Object[]) shortArray0);
      ArrayUtils.lastIndexOf((long[]) null, (long) (byte)0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)87;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)87;
      doubleArray0[5] = (double) (byte) (-89);
      ArrayUtils.isNotEmpty(doubleArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = '4';
      charArray0[2] = 'q';
      charArray0[3] = 'J';
      charArray0[4] = '`';
      charArray0[6] = 'i';
      charArray0[7] = 'W';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-914), '!');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -914, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('=');
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      Character[] characterArray2 = new Character[8];
      characterArray2[0] = character0;
      characterArray2[1] = character0;
      characterArray2[2] = character0;
      characterArray2[3] = character0;
      characterArray2[4] = character0;
      characterArray2[5] = character0;
      characterArray2[6] = character0;
      characterArray2[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray2, 't');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertSame(characterArray0, characterArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1344;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-986));
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[4];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ArrayUtils.add(intArray0, 0);
      ArrayUtils.reverse((short[]) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      objectArray0[8] = (Object) 0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      ArrayUtils.isSameLength(objectArray1, objectArray0);
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 48, 0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1922.0));
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3662.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2146822494), 47);
      assertArrayEquals(new float[] {(-3662.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)10880;
      shortArray0[2] = (short) (-2566);
      shortArray0[3] = (short) (-1469);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)39;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-102), 108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      Integer integer0 = new Integer((-1931));
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      int int0 = ArrayUtils.indexOf(charArray0, '', 0);
      assertEquals(0, int0);
      
      ArrayUtils.addAll((char[]) null, (char[]) null);
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) longArray0);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray1 = new long[2];
      longArray1[0] = (long) '';
      longArray1[1] = (long) 0;
      long[] longArray2 = ArrayUtils.remove(longArray1, 0);
      assertArrayEquals(new long[] {127L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)967;
      shortArray0[3] = (short) (-1663);
      shortArray0[4] = (short)2;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 312L;
      longArray0[1] = (-120L);
      longArray0[2] = (-85L);
      longArray0[3] = 1748L;
      longArray0[4] = 0L;
      longArray0[5] = 1325L;
      longArray0[6] = (-6L);
      longArray0[7] = (-1681L);
      longArray0[8] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      Boolean boolean1 = Boolean.valueOf("java.util.AbstractMap$SimpleImmutableEntry");
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      ArrayUtils.nullToEmpty((int[]) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '=';
      charArray0[2] = 's';
      charArray0[3] = '9';
      charArray0[4] = '.';
      charArray0[5] = '$';
      charArray0[6] = '7';
      charArray0[7] = '3';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'R', (-504));
      assertEquals((-1), int1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:10:43 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      String string0 = localDateTime0.toString((String) null, locale0);
      assertEquals("2014-02-14T21:21:21.320", string0);
      assertNotNull(string0);
      assertEquals(4, localDateTime0.size());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string0 = localDateTime0.toString(")z*8]", locale0);
      assertEquals(")*8]", string0);
      assertNotNull(string0);
      assertEquals(4, localDateTime0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.toString("Interval must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(24L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds((-1723));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(1476);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusHours(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusHours((-1084));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays(1476);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      assertNotNull(localDateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:13", dateTimeZone0.getID());
      assertEquals("+13:13", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((-1200L), dateTimeZone0);
      assertNotNull(localDateTime0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:13", dateTimeZone0.getID());
      assertEquals("+13:13", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(1561);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:13", dateTimeZone0.getID());
      assertEquals("+13:13", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-3378));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(774);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(3692);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Instant instant0 = new Instant((-75985267118680L));
      assertNotNull(instant0);
      assertEquals((-75985267118680L), instant0.getMillis());
      
      Chronology chronology0 = instant0.getChronology();
      assertNotNull(chronology0);
      assertEquals((-75985267118680L), instant0.getMillis());
      
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      assertNotNull(localDateTime0);
      assertEquals((-75985267118680L), instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals((-75985267118680L), instant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(1476);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(54);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(9);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears((-4121));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(24L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertNotNull(seconds0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(seconds0, 0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = Duration.standardMinutes(1063L);
      assertNotNull(duration0);
      assertEquals(63780L, duration0.getStandardSeconds());
      assertEquals(17L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(63780000L, duration0.getMillis());
      assertEquals(1063L, duration0.getStandardMinutes());
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 793);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(63780L, duration0.getStandardSeconds());
      assertEquals(17L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(63780000L, duration0.getMillis());
      assertEquals(1063L, duration0.getStandardMinutes());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded((DurationFieldType) null, 2147480544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withField((DateTimeFieldType) null, 503);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localDateTime0.withField(dateTimeFieldType0, 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 34 for halfdayOfDay must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) null);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withFields(localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(13);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int0 = localDateTime0.compareTo((ReadablePartial) localDateTime1);
      assertEquals(1, int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(13);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.compareTo((ReadablePartial) yearMonth0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = localDateTime0.equals(localDateTime_Property0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Date date0 = localDateTime0.toDate();
      assertNotNull(date0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 21:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = localDateTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localDateTime0.size());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = localDateTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.getValue(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 14
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test053()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.getField((-2147483646));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2147483646
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      assertNotNull(localDateTime0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getDayOfWeek();
      assertEquals(5, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Days days0 = Days.FOUR;
      assertNotNull(days0);
      assertEquals(4, days0.getDays());
      assertEquals(1, days0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) days0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withTime(17887500, 17887500, 17887500, 17887500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 17887500 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getWeekyear();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekyear();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(20, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(51);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withEra(0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withDate(1, 1, 1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1349);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getMillisOfDay();
      assertEquals(76881320, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getYearOfEra();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) null);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfEra(2147482541);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147482541 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) null);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1, 1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek(1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      
      Duration duration0 = days0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(3L, duration0.getStandardDays());
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(259200L, duration0.getStandardSeconds());
      assertEquals(4320L, duration0.getStandardMinutes());
      assertEquals(72L, duration0.getStandardHours());
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(3L, duration0.getStandardDays());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(12);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getDayOfYear();
      assertEquals(45, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getEra();
      assertEquals(1, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withDayOfYear(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      boolean boolean0 = localDateTime1.equals(localDateTime0);
      assertFalse(boolean0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfCentury((-1972));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1972 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getWeekOfWeekyear();
      assertEquals(7, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) null);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Date date0 = localDateTime0.toDate();
      assertEquals("Fri Feb 14 21:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      String string0 = localDateTime0.toString((String) null);
      assertEquals("2014-02-14T21:21:21.320", string0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withDayOfMonth(1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYear(1);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay((-497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -497 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("SVMwv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"SVMwv\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      Chronology chronology0 = localDateTime_Property0.getChronology();
      LocalDateTime localDateTime1 = LocalDateTime.now(chronology0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);
      LocalDateTime localDateTime0 = new LocalDateTime((-1200L), dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy(1561);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(199, 337, 337, 199, 199, 199);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      LocalDateTime localDateTime1 = localDateTime_Property0.getLocalDateTime();
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfEvenCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      LocalDateTime localDateTime1 = localDateTime_Property0.addWrapFieldToCopy(1003);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockDate mockDate0 = new MockDate(199, 337, 337, 199, 199, 199);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy((long) 337);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(13, 13);
      LocalDateTime localDateTime0 = new LocalDateTime((-1200L), dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      LocalDateTime localDateTime1 = localDateTime_Property0.withMinimumValue();
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("#WyQZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"#WyQZ\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}

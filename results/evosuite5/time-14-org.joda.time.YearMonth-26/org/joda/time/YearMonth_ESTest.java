/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 22:48:40 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class YearMonth_ESTest extends YearMonth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = yearMonth0.toString((String) null, locale0);
      assertEquals("2014-02", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Locale locale0 = Locale.KOREA;
      try { 
        yearMonth0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      String string0 = yearMonth0.toString((String) null);
      assertEquals("1970-01", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        yearMonth0.toString("+QGg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(3638L, (Chronology) null);
      Months months0 = Months.TEN;
      // Undeclared exception!
      try { 
        yearMonth0.withPeriodAdded(months0, Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 10 * 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      Period period0 = Period.millis(1);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, 0);
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      YearMonth yearMonth1 = yearMonth0.withField(dateTimeFieldType0, 0);
      YearMonth yearMonth2 = yearMonth1.withField(dateTimeFieldType0, 0);
      assertEquals(0, yearMonth2.getYear());
      assertSame(yearMonth2, yearMonth1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(ethiopicChronology0);
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2014, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(2, yearMonth0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      // Undeclared exception!
      try { 
        yearMonth0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, ethiopicChronology0);
      assertEquals(6, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".");
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      yearMonth0.getFieldTypes();
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.withYear(1);
      assertEquals(1, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(3638L, (Chronology) null);
      // Undeclared exception!
      try { 
        yearMonth0.getField(Integer.MAX_VALUE, (Chronology) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2147483647
         //
         verifyException("org.joda.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      YearMonth yearMonth1 = yearMonth0.minusYears(0);
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.withChronologyRetainFields(gregorianChronology0);
      assertNotSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      Days days0 = Days.ONE;
      YearMonth yearMonth1 = yearMonth0.minus(days0);
      assertEquals(1970, yearMonth1.getYear());
      assertNotSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(2014, yearMonth0.getYear());
      
      YearMonth yearMonth1 = yearMonth0.plusYears(0);
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.plus((ReadablePeriod) null);
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        YearMonth.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      // Undeclared exception!
      try { 
        yearMonth0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Object) null);
      assertEquals(2014, yearMonth0.getYear());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.minusMonths(0);
      assertSame(yearMonth1, yearMonth0);
      assertEquals(2014, yearMonth1.getYear());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertEquals(2, yearMonth0.getMonthOfYear());
      
      Interval interval0 = yearMonth0.toInterval();
      assertEquals(1393628400000L, interval0.getEndMillis());
      assertEquals(1391209200000L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.setCopy(0);
      assertEquals(0, yearMonth1.getYear());
      assertEquals(1970, yearMonth_Property0.get());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      assertEquals(2, yearMonth0.size());
      
      String string0 = yearMonth_Property0.getAsShortText();
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth_Property0.get());
      assertEquals("Feb", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YearMonth.Property yearMonth_Property0 = new YearMonth.Property((YearMonth) null, (-2388));
      // Undeclared exception!
      try { 
        yearMonth_Property0.addWrapFieldToCopy((-2388));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.YearMonth$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      YearMonth yearMonth1 = yearMonth_Property0.addToCopy(0);
      assertEquals(2, yearMonth1.size());
      assertEquals(1970, yearMonth_Property0.get());
      assertEquals(1970, yearMonth1.getYear());
      assertEquals(1, yearMonth1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth_Property0.getYearMonth();
      assertEquals(2006, yearMonth1.getYear());
      assertEquals(6, yearMonth_Property0.get());
      assertEquals(2, yearMonth1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2385L);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      // Undeclared exception!
      try { 
        yearMonth_Property0.setCopy("H!%rM&P)>jr>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"H!%rM&P)>jr>\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }
}

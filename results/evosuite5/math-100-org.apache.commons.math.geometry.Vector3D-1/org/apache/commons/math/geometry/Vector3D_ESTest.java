/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:54:50 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.003662076123697), (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.minusJ.normalize();
      double double0 = Vector3D.angle(vector3D1, vector3D0);
      assertEquals(2.2752314706572565, double0, 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
      assertEquals((-0.1921305156619831), vector3D0.getDelta(), 0.01);
      assertEquals((-1.0), vector3D1.getY(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      Vector3D vector3D1 = new Vector3D();
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.003662076123697), (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertEquals(0.8503195578507862, vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
      assertEquals((-0.1921305156619831), vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.minusI.orthogonal();
      Vector3D vector3D2 = new Vector3D((-2077.45785), 3584.1101);
      Vector3D vector3D3 = Vector3D.crossProduct(vector3D1, vector3D2);
      Vector3D vector3D4 = vector3D3.orthogonal();
      assertEquals(0.9016970416080359, vector3D3.getNorm(), 0.01);
      assertEquals(0.0, vector3D3.getDelta(), 0.01);
      assertEquals(0.0, vector3D0.getDelta(), 0.01);
      assertEquals(2.2764866764433433, vector3D4.getAlpha(), 0.01);
      assertEquals(0.4471177459542103, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.minusJ.normalize();
      Vector3D vector3D2 = Vector3D.crossProduct(vector3D0, vector3D1);
      Vector3D vector3D3 = vector3D2.orthogonal();
      double double0 = Vector3D.angle(vector3D1, vector3D3);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D3.getDelta(), 0.01);
      assertEquals((-0.19213051566198314), vector3D0.getDelta(), 0.01);
      assertEquals(1.0, vector3D3.getNorm(), 0.01);
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.subtract(0.0, vector3D0);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
      assertEquals((-0.19213051566198314), vector3D1.getDelta(), 0.01);
      assertEquals(-0.0, vector3D0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1329.8145610361, 1329.8145610361, (-2038.0));
      Vector3D vector3D1 = new Vector3D(1329.8145610361, vector3D0, (-2038.0), vector3D0, (-2038.0), vector3D0, 0.0, vector3D0);
      assertEquals(0.8255329144188718, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.minusI;
      double double0 = vector3D0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      double double0 = vector3D0.getX();
      assertEquals((-3.141592653589793), vector3D0.getAlpha(), 0.01);
      assertEquals((-0.9815996398826261), double0, 0.01);
      assertEquals((-0.19213051566198314), vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      double double0 = vector3D0.getDelta();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.add(vector3D0);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals((-0.19213051566198314), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      double double0 = vector3D0.getZ();
      assertEquals((-0.19095064017252916), double0, 0.01);
      assertEquals((-3.141592653589793), vector3D0.getAlpha(), 0.01);
      assertEquals((-0.19213051566198314), vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 0.0, vector3D0);
      // Undeclared exception!
      try { 
        vector3D1.orthogonal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      double double0 = vector3D0.getAlpha();
      assertEquals((-0.19213051566198314), vector3D0.getDelta(), 0.01);
      assertEquals((-3.141592653589793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.003662076123697), (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals(0.19095064017252916, vector3D1.getZ(), 0.01);
      assertEquals((-0.7204767689441104), vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = vector3D0.minusK.subtract(vector3D0);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
      assertEquals((-0.7853981633974482), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D((-2233.25739274), vector3D0, (-2233.25739274), vector3D0, (-1.0), vector3D0);
      assertEquals(-0.0, vector3D1.getY(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
      assertEquals(4467.51478548, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, (-3464.98456639388));
      Vector3D vector3D1 = vector3D0.add((-1694.349781269704), vector3D0);
      assertEquals(0.19213051566198314, vector3D1.getDelta(), 0.01);
      assertEquals((-3.141592653589793), vector3D0.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.003662076123697), (-3464.98456639388));
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.1921305156619831), vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-7.003662076123697), (-3464.98456639388));
      Vector3D vector3D1 = new Vector3D((-3464.98456639388), vector3D0);
      assertEquals(0.19213051566198308, vector3D1.getDelta(), 0.01);
      assertEquals((-0.7204767689441105), vector3D1.getAlpha(), 0.01);
  }
}

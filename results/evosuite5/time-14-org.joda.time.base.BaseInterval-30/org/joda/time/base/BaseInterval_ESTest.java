/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 23:11:11 GMT 2019
 */

package org.joda.time.base;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BaseInterval_ESTest extends BaseInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      YearMonth yearMonth0 = new YearMonth();
      Interval interval0 = yearMonth0.toInterval();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      MutableInterval mutableInterval0 = new MutableInterval(interval0, julianChronology0);
      assertEquals(1391209200000L, interval0.getStartMillis());
      assertEquals(1393628400000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("*1P/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: *1P/
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(100000L);
      MutableInterval mutableInterval0 = new MutableInterval((ReadablePeriod) null, dateMidnight0);
      assertEquals((-3600000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-601));
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval(weeks0, instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Interval interval0 = new Interval(dateMidnight0, (ReadablePeriod) null);
      assertEquals((-3600000L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Months months0 = Months.NINE;
      Interval interval0 = new Interval(dateMidnight0, months0);
      assertEquals(23583600000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      Interval interval1 = new Interval(interval0);
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      DateTime dateTime0 = new DateTime((Chronology) lenientChronology0);
      Interval interval0 = new Interval((ReadableInstant) null, dateTime0);
      // Undeclared exception!
      try { 
        interval0.withEndMillis(1020L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval0.setStart((ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }
}

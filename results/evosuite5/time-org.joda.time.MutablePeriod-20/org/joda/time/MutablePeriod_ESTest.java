/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:24:23 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1);
      Interval interval0 = new Interval(1, 1);
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(1L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1);
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      Hours hours0 = Hours.FIVE;
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) hours0);
      mutablePeriod0.setPeriod((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1161), 661, (-648), 0, 70, (-1), 86399999, 661);
      mutablePeriod0.addHours((-1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(918518400000L, (-831L), periodType0, iSOChronology0);
      Instant instant0 = new Instant();
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(1392409281320L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1171));
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      PeriodType periodType0 = PeriodType.standard();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, (ReadableDuration) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setDays((-4093));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(292272708, 1995, 1995, 1995, 1995, 292272708, 1995, 1995, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      mutablePeriod0.add((long) (-21), (Chronology) gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(8L, (Chronology) copticChronology0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setHours((-1796));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      mutablePeriod0.add(0L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      Days days0 = Days.standardDaysIn(mutablePeriod0);
      Duration duration0 = days0.toStandardDuration();
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(7L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3267L), periodType0);
      mutablePeriod0.addSeconds(638);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      mutablePeriod0.setValue(1, 1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addMillis(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      mutablePeriod0.setYears(0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1, 1, 1, 1);
      mutablePeriod0.setSeconds(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2341L, 2341L, (PeriodType) null);
      mutablePeriod0.addYears(47);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      mutablePeriod0.setPeriod((long) 1, (long) 1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 0);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      Interval interval0 = new Interval(0L, 15308640144L, ethiopicChronology0);
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Months months0 = Months.SEVEN;
      mutablePeriod0.mergePeriod(months0);
      assertEquals(7, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1161), 661, (-648), 0, 70, (-1), 86399999, 661);
      mutablePeriod0.addWeeks(0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1296L, periodType0, (Chronology) islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 1589L, ethiopicChronology0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("n5>YXJ8O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"n5>YXJ8O\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-418L));
      Weeks weeks0 = Weeks.ONE;
      PeriodType periodType0 = weeks0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      Days days0 = Days.standardDaysIn(mutablePeriod0);
      Duration duration0 = days0.toStandardDuration();
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      DateTime dateTime0 = dateMidnight0.toDateTime();
      MutablePeriod mutablePeriod1 = new MutablePeriod(duration0, dateTime0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      PeriodType periodType0 = months0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.add(0, 501, 0, 0, 1006, 1006, 1976, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.time();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addMinutes(1247);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addDays((-1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      mutablePeriod0.addMonths(0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 1, 0, 0, 0, 1, 1);
      mutablePeriod0.setMinutes(0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setMonths(0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Days days0 = Days.THREE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      mutablePeriod0.add(durationFieldType0, 0);
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("1|ko", copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1|ko\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L);
      mutablePeriod0.setMillis(0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1161), 661, (-648), 0, 70, (-1), 86399999, 661);
      Duration duration0 = Duration.standardSeconds((-64L));
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardDays());
  }
}

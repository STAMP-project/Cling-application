/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:45:57 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.CompilerEnvirons;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Parser;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.ast.ArrayLiteral;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.KeywordLiteral;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ParenthesizedExpression;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.ast.Scope;
import java.io.Reader;
import java.io.StringReader;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      ErrorReporter errorReporter0 = compilerEnvirons0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0, errorReporter0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression();
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertNotNull(parenthesizedExpression0);
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals((-1), parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals((-1), parenthesizedExpression0.getPosition());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals((-1), parenthesizedExpression0.getLineno());
      
      parser0.markDestructuring(parenthesizedExpression0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals("87", parenthesizedExpression0.toString());
      assertEquals(87, parenthesizedExpression0.getType());
      assertFalse(parenthesizedExpression0.hasChildren());
      assertEquals((-1), parenthesizedExpression0.getAbsolutePosition());
      assertEquals(0, parenthesizedExpression0.depth());
      assertEquals((-1), parenthesizedExpression0.getPosition());
      assertEquals(1, parenthesizedExpression0.getLength());
      assertNull(parenthesizedExpression0.getJsDoc());
      assertEquals((-1), parenthesizedExpression0.getLineno());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0, (ErrorReporter) null);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(21, 112);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertNotNull(arrayLiteral0);
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(112, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(21, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(21, arrayLiteral0.getAbsolutePosition());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getLineno());
      
      parser0.markDestructuring(arrayLiteral0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(112, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(21, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(21, arrayLiteral0.getAbsolutePosition());
      assertTrue(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getLineno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      KeywordLiteral keywordLiteral0 = new KeywordLiteral();
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertNotNull(keywordLiteral0);
      assertEquals((-1), keywordLiteral0.getPosition());
      assertEquals(0, keywordLiteral0.depth());
      assertEquals("-1", keywordLiteral0.toString());
      assertFalse(keywordLiteral0.isBooleanLiteral());
      assertFalse(keywordLiteral0.hasChildren());
      assertEquals((-1), keywordLiteral0.getAbsolutePosition());
      assertNull(keywordLiteral0.getJsDoc());
      assertEquals((-1), keywordLiteral0.getLineno());
      assertEquals((-1), keywordLiteral0.getType());
      assertEquals(1, keywordLiteral0.getLength());
      
      parser0.checkMutableReference(keywordLiteral0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals((-1), keywordLiteral0.getPosition());
      assertEquals(0, keywordLiteral0.depth());
      assertEquals("-1", keywordLiteral0.toString());
      assertFalse(keywordLiteral0.isBooleanLiteral());
      assertFalse(keywordLiteral0.hasChildren());
      assertEquals((-1), keywordLiteral0.getAbsolutePosition());
      assertNull(keywordLiteral0.getJsDoc());
      assertEquals((-1), keywordLiteral0.getLineno());
      assertEquals((-1), keywordLiteral0.getType());
      assertEquals(1, keywordLiteral0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      Name name0 = new Name();
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(name0);
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertNull(name0.getString());
      assertFalse(name0.hasChildren());
      assertEquals(0, name0.depth());
      assertEquals(39, name0.getType());
      assertEquals((-1), name0.getPosition());
      assertFalse(name0.isLocalName());
      assertEquals("39", name0.toString());
      assertEquals((-1), name0.getAbsolutePosition());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.length());
      assertNull(name0.getJsDoc());
      
      Node node0 = parser0.simpleAssignment(name0, name0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertNotNull(node0);
      assertEquals(1, name0.getLength());
      assertEquals((-1), name0.getLineno());
      assertNull(name0.getString());
      assertFalse(name0.hasChildren());
      assertEquals(0, name0.depth());
      assertEquals((-1), name0.getPosition());
      assertFalse(name0.isLocalName());
      assertEquals(49, name0.getType());
      assertEquals("49", name0.toString());
      assertEquals((-1), name0.getAbsolutePosition());
      assertNull(name0.getIdentifier());
      assertEquals(0, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals((-1), node0.getLineno());
      assertNull(node0.getJsDoc());
      assertTrue(node0.hasChildren());
      assertEquals(8, node0.getType());
      assertEquals("8", node0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(4, 6);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertNotNull(arrayLiteral0);
      assertEquals(0, arrayLiteral0.getSize());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(4, arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(6, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(4, arrayLiteral0.getAbsolutePosition());
      assertNull(arrayLiteral0.getJsDoc());
      
      NativeArray nativeArray0 = new NativeArray(2);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertNotNull(nativeArray0);
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(2L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
      
      boolean boolean0 = parser0.destructuringArray(arrayLiteral0, 154, "com.google.javascript.rhino.head.LazilyLoadedCtor", arrayLiteral0, nativeArray0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertTrue(boolean0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, arrayLiteral0.getSize());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(4, arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(6, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(4, arrayLiteral0.getAbsolutePosition());
      assertNull(arrayLiteral0.getJsDoc());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(2L, nativeArray0.jsGet_length());
      assertEquals("object", nativeArray0.getTypeOf());
      assertEquals(2L, nativeArray0.getLength());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertFalse(nativeArray0.isSealed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      PropertyGet propertyGet0 = new PropertyGet(15, 233);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertNotNull(propertyGet0);
      assertEquals(15, propertyGet0.getPosition());
      assertEquals(233, propertyGet0.getLength());
      assertFalse(propertyGet0.hasChildren());
      assertEquals(33, propertyGet0.getType());
      assertEquals((-1), propertyGet0.getOperatorPosition());
      assertEquals(33, propertyGet0.getOperator());
      assertEquals("33", propertyGet0.toString());
      assertEquals(15, propertyGet0.getAbsolutePosition());
      assertEquals((-1), propertyGet0.getLineno());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(0, propertyGet0.depth());
      
      AstRoot astRoot0 = parser0.parse("4@^!T{", "(%PrFKH", 23);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(23, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(23, astRoot0.getEndLineno());
      assertEquals("(%PrFKH", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(23, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      
      // Undeclared exception!
      try { 
        parser0.destructuringAssignmentHelper(260, propertyGet0, propertyGet0, "(%PrFKH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      AstRoot astRoot0 = parser0.parse("/", "P{aJT8,z", 11);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(11, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(11, astRoot0.getEndLineno());
      assertEquals("P{aJT8,z", astRoot0.getSourceName());
      assertEquals(11, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals((-1), astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.nestingOfFunction = 2196;
      // Undeclared exception!
      try { 
        parser0.setIsGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.setIsGenerator();
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      parser0.nestingOfFunction = 65536;
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      // Undeclared exception!
      try { 
        parser0.setRequiresActivation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      parser0.nestingOfFunction = 65536;
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      compilerEnvirons0.setActivationNames(set0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      AstRoot astRoot0 = parser0.parse("msg.XML.not.available", "China", 1);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(astRoot0.hasChildren());
      assertEquals(21, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("China", astRoot0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("this node type has no body", "this node type has no body", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (this node type has no body#1)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      compilerEnvirons0.setReservedKeywordAsIdentifier(false);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      AstRoot astRoot0 = parser0.parse("26Mad.", "RETUR", 17);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(17, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(6, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(17, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("RETUR", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(17, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      AstRoot astRoot0 = parser0.parse("[d.@!", "SourceFile", 4);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertNotNull(astRoot0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals("SourceFile", astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(4, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 44);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(44, astRoot0.getBaseLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(44, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(17, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(44, astRoot0.getLineno());
      assertEquals("msg.bad.throw.eol", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      
      compilerEnvirons0.setXmlAvailable(false);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      
      AstRoot astRoot0 = parser0.parse("msg.let.decl.not.in.block", "Qx%", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(2, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals("Qx%", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(25, astRoot0.getLength());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      AstRoot astRoot0 = parser0.parse("5 _[9]\"Vg`FV", "yS?X73one!cRxh, ", 14);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(14, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(14, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(6, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("yS?X73one!cRxh, ", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(14, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      AstRoot astRoot0 = parser0.parse("5dJ&Ap(Mn1p,lWt", "5dJ&Ap(Mn1p,lWt", 4);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(15, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals("5dJ&Ap(Mn1p,lWt", astRoot0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      AstRoot astRoot0 = parser0.parse("h_zHC(:MovG'YgY&", "h_zHC(:MovG'YgY&", 4);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(4, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(11, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("h_zHC(:MovG'YgY&", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      
      AstRoot astRoot0 = parser0.parse("<de<}W{ey", "else", 25);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(25, astRoot0.getEndLineno());
      assertEquals("else", astRoot0.getSourceName());
      assertEquals(25, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(9, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(25, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      compilerEnvirons0.setXmlAvailable(false);
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      AstRoot astRoot0 = parser0.parse("</", "Qx%", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("Qx%", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(2, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("Aa8(+L1Y?ax]", "msg.java.member.not.found", 143);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : in conditional expression (msg.java.member.not.found#143)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      AstRoot astRoot0 = parser0.parse("Ljava/lang/Object;", "Ljava/lang/Object;", 4);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(4, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getLength());
      assertEquals("Ljava/lang/Object;", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      AstRoot astRoot0 = parser0.parse("h2et4jB-<'xV", "h2et4jB-<'xV", 22);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(22, astRoot0.getBaseLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(22, astRoot0.getLineno());
      assertEquals(9, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("h2et4jB-<'xV", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(22, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      AstRoot astRoot0 = parser0.parse("ro<-SG[h$j~=l+2;nW", "ro<-SG[h$j~=l+2;nW", 81);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("ro<-SG[h$j~=l+2;nW", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals(81, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(81, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(81, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("fatoy == null", "fatoy == null", 83);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(12, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(83, astRoot0.getEndLineno());
      assertEquals("fatoy == null", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(83, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(83, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      AstRoot astRoot0 = parser0.parse("cwcS%=X%o)]2L%{&Nf\"", "", 1);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      AstRoot astRoot0 = parser0.parse("yS?X73one!cRxh, ", "5 _[9]\"Vg`FV", 116);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertNotNull(astRoot0);
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(16, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(116, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("5 _[9]\"Vg`FV", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(116, astRoot0.getBaseLineno());
      assertEquals(116, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("O,Xiqal~BY3Wh", "msg.no.paren.switch", 146);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (msg.no.paren.switch#146)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      AstRoot astRoot0 = parser0.parse("let", "let", 65536);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertNotNull(astRoot0);
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("let", astRoot0.getSourceName());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(3, astRoot0.getLength());
      
      // Undeclared exception!
      try { 
        parser0.defineSymbol(8, "let");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=3, ts.tokenBeg=2, currentToken=0
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      AstRoot astRoot0 = parser0.parse("msg.continue.outside", "msg.continue.outside", 4);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(20, astRoot0.getLength());
      assertEquals(4, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals("msg.continue.outside", astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      
      parser0.defineSymbol(109, "VMBridge.newInterfaceProxy is not supported");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      AstRoot astRoot0 = parser0.parse("6aE%pER", "return", 0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("return", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      
      parser0.defineSymbol(87, "6aE%pER");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(arrayLiteral0);
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      
      AstRoot astRoot0 = parser0.parse("let", "let", 1);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("let", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertTrue(astRoot0.hasChildren());
      assertEquals(3, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper((-628), astRoot0, arrayLiteral0, "let");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(scope0);
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("let", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertTrue(astRoot0.hasChildren());
      assertEquals(3, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("158", scope0.toString());
      assertNull(scope0.getJsDoc());
      assertEquals(0, scope0.depth());
      assertEquals((-1), scope0.getPosition());
      assertEquals(158, scope0.getType());
      assertTrue(scope0.hasChildren());
      assertEquals(1, scope0.getLineno());
      assertEquals((-1), scope0.getAbsolutePosition());
      assertEquals(1, scope0.getLength());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      parser0.defineSymbol(105, (String) null);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("TRz:?[|$wY:V9Bp", "|/", 17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (|/#17)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      AstRoot astRoot0 = parser0.parse("TRz:?[|$wY:V9Bp", "|/", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(15, astRoot0.getLength());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals("|/", astRoot0.getSourceName());
      assertEquals(2, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      AstRoot astRoot0 = parser0.parse("j@[w;B\u0006}O=_R^.k", "jmFg~d", 3);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("jmFg~d", astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(3, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(3, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(3, astRoot0.getEndLineno());
      assertEquals(15, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      AstRoot astRoot0 = parser0.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 65536);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertTrue(astRoot0.hasChildren());
      assertEquals(83, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("factory.makeContext() returned Context instance already associated with some thread", astRoot0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      AstRoot astRoot0 = parser0.parse("continue", "msg", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(2, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(7, astRoot0.getLength());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals("msg", astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      AstRoot astRoot0 = parser0.parse("break", "+6%Lh1%zr4_.YA", 1);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(1, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLineno());
      assertEquals(4, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("+6%Lh1%zr4_.YA", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      AstRoot astRoot0 = parser0.parse("default", "/DTD1<z_:cWmrix", 5);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(5, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(7, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(5, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("/DTD1<z_:cWmrix", astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(5, astRoot0.getLineno());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      AstRoot astRoot0 = parser0.parse("throw", ")eo+$, ", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(")eo+$, ", astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertFalse(astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(5, astRoot0.getLength());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(2, astRoot0.getBaseLineno());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      AstRoot astRoot0 = parser0.parse("return", "WITH", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals("WITH", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(2, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(5, astRoot0.getLength());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      // Undeclared exception!
      try { 
        parser0.parse("Zd8:\"qwt<o", "Zd8:\"qwt<o", (-424));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      compilerEnvirons0.setRecoverFromErrors(false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      AstRoot astRoot0 = parser0.parse("j@[w;B\u0006}O=_R^.k", "<<", 29);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(29, astRoot0.getEndLineno());
      assertEquals(29, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(29, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertTrue(astRoot0.hasChildren());
      assertEquals(14, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals("<<", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      compilerEnvirons0.setRecoverFromErrors(false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      AstRoot astRoot0 = parser0.parse("FJ]}[&DS#Uc6*?OQrx9", "msg.no.octal.strict", 25);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(25, astRoot0.getEndLineno());
      assertEquals(25, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(18, astRoot0.getLength());
      assertEquals("msg.no.octal.strict", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(25, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      parser0.nestingOfFunction = 65536;
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      AstRoot astRoot0 = parser0.parse("26Mad.", "RETUR", 17);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(6, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(17, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(17, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(17, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("RETUR", astRoot0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      compilerEnvirons0.setIdeMode(false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      
      // Undeclared exception!
      try { 
        parser0.parse("1BU@]3", "1BU@]3", 22);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      StringReader stringReader0 = new StringReader("use strict");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "5", 90);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals("136", astRoot0.toString());
      assertEquals(90, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(90, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals("5", astRoot0.getSourceName());
      assertEquals(10, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(90, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      
      parser0.defineSymbol(122, "X");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      AstRoot astRoot0 = parser0.parse(";cLPR", ";cLPR", 13);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(5, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(";cLPR", astRoot0.getSourceName());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(13, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(13, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(13, astRoot0.getBaseLineno());
      
      StringReader stringReader0 = new StringReader(";cLPR");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        parser0.parse((Reader) stringReader0, (String) null, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parser reused
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      
      AstRoot astRoot0 = parser0.parse("%Z| LJBRO*M", "%Z| LJBRO*M", 10);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(10, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(11, astRoot0.getLength());
      assertEquals("%Z| LJBRO*M", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(10, astRoot0.getEndLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(10, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      
      // Undeclared exception!
      try { 
        parser0.parse("%Z| LJBRO*M", "%Z| LJBRO*M", 11);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // parser reused
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      AstRoot astRoot0 = parser0.parse("for", "JavaImporter", 5);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(3, astRoot0.getLength());
      assertEquals(5, astRoot0.getEndLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals("JavaImporter", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(5, astRoot0.getBaseLineno());
      assertEquals(5, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = new CompilerEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertNotNull(arrayLiteral0);
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      
      AstRoot astRoot0 = parser0.parse("a2hPG", "", 4);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(4, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(4, astRoot0.getLineno());
      assertEquals(5, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(4, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("", astRoot0.getSourceName());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper((-2571), arrayLiteral0, arrayLiteral0, "a2hPG");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(scope0);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), scope0.getPosition());
      assertEquals(0, scope0.depth());
      assertEquals("158", scope0.toString());
      assertTrue(scope0.hasChildren());
      assertNull(scope0.getJsDoc());
      assertEquals(1, scope0.getLength());
      assertEquals(158, scope0.getType());
      assertEquals((-1), scope0.getLineno());
      assertEquals((-1), scope0.getAbsolutePosition());
      
      parser0.pushScope(scope0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertEquals(0, compilerEnvirons0.getLanguageVersion());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals((-1), arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.depth());
      assertFalse(arrayLiteral0.hasChildren());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals("65", arrayLiteral0.toString());
      assertFalse(arrayLiteral0.isDestructuring());
      assertEquals((-1), arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals((-1), arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals((-1), scope0.getPosition());
      assertEquals(0, scope0.depth());
      assertEquals("158", scope0.toString());
      assertTrue(scope0.hasChildren());
      assertNull(scope0.getJsDoc());
      assertEquals(1, scope0.getLength());
      assertEquals(158, scope0.getType());
      assertEquals((-1), scope0.getLineno());
      assertEquals((-1), scope0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      compilerEnvirons0.setXmlAvailable(false);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      
      AstRoot astRoot0 = parser0.parse("4@^!T{", "(%PrFKH", 22);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertNotNull(astRoot0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isXmlAvailable());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(22, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("(%PrFKH", astRoot0.getSourceName());
      assertTrue(astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(22, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(22, astRoot0.getBaseLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      
      AstRoot astRoot0 = parser0.parse("(@X AeD\"[jo AM8Tx7", "BSO'|$", 50);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(astRoot0.hasChildren());
      assertEquals(50, astRoot0.getLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(50, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals("BSO'|$", astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(7, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(50, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      AstRoot astRoot0 = parser0.parse("Cz2g4n!T{xg2qc}", "length", 65536);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(15, astRoot0.getLength());
      assertEquals("length", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      
      AstRoot astRoot1 = (AstRoot)parser0.removeParens(astRoot0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertNotNull(astRoot1);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(65536, astRoot0.getLineno());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(65536, astRoot0.getEndLineno());
      assertEquals(65536, astRoot0.getBaseLineno());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(15, astRoot0.getLength());
      assertEquals("length", astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(136, astRoot1.getType());
      assertEquals("length", astRoot1.getSourceName());
      assertEquals(15, astRoot1.getLength());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals((-1), astRoot1.getEncodedSourceStart());
      assertFalse(astRoot1.isInStrictMode());
      assertEquals(0, astRoot1.getPosition());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(0, astRoot1.getAbsolutePosition());
      assertEquals("136", astRoot1.toString());
      assertEquals(65536, astRoot1.getEndLineno());
      assertEquals(65536, astRoot1.getLineno());
      assertNull(astRoot1.getJsDoc());
      assertEquals(0, astRoot1.getParamCount());
      assertTrue(astRoot1.hasChildren());
      assertEquals(0, astRoot1.depth());
      assertEquals((-1), astRoot1.getEncodedSourceEnd());
      assertEquals(65536, astRoot1.getBaseLineno());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("[\n", "[\n", 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ] after element list ([
         // #6)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.reportError("&g1<Co%W1Kb_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property &g1<Co%W1Kb_
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.addError("msg.no.paren.catch", "msg.no.paren.catch", (-124), 19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before catch-block condition
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.addWarning("msg.no.paren.for", "ey", 11, (-3778));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      
      AstRoot astRoot0 = parser0.parse("09.3`J=-SOn", "jiy4S$}R,q  +F1r", 153);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertNotNull(astRoot0);
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(153, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(3, astRoot0.getLength());
      assertEquals(153, astRoot0.getBaseLineno());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals(153, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("jiy4S$}R,q  +F1r", astRoot0.getSourceName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isStrictMode());
      
      // Undeclared exception!
      try { 
        parser0.addWarning("YWuTR$,(wIK>", "YWuTR$,(wIK>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property YWuTR$,(wIK>
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("VIY");
      assertNotNull(stringReader0);
      
      AstRoot astRoot0 = parser0.parse((Reader) stringReader0, "VIY", 13);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(3, astRoot0.getLength());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("VIY", astRoot0.getSourceName());
      assertEquals(13, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertTrue(astRoot0.hasChildren());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(13, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(13, astRoot0.getEndLineno());
      
      parser0.addStrictWarning("msg.tr.no.catchfinally", "?`}s4WAdi>");
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      parser0.addStrictWarning("msg.tr.no.catchfinally", "?`}s4WAdi>");
      assertEquals(65536, Parser.ARGC_LIMIT);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      
      AstRoot astRoot0 = parser0.parse("function", "msg.java.member.not.found", 2);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      assertEquals("msg.java.member.not.found", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(8, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(2, astRoot0.getBaseLineno());
      assertEquals(2, astRoot0.getLineno());
      
      ObjectLiteral objectLiteral0 = new ObjectLiteral(1);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertNotNull(objectLiteral0);
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(1, objectLiteral0.getPosition());
      assertFalse(objectLiteral0.hasChildren());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(1, objectLiteral0.getAbsolutePosition());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals("66", objectLiteral0.toString());
      
      Scope scope0 = (Scope)parser0.destructuringAssignmentHelper(17, objectLiteral0, objectLiteral0, "msg.java.member.not.found");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertNotNull(scope0);
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertFalse(objectLiteral0.isDestructuring());
      assertEquals(1, objectLiteral0.getPosition());
      assertFalse(objectLiteral0.hasChildren());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(1, objectLiteral0.getAbsolutePosition());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals((-1), objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals("66", objectLiteral0.toString());
      assertNull(scope0.getJsDoc());
      assertEquals("158", scope0.toString());
      assertEquals(1, scope0.getLength());
      assertEquals((-1), scope0.getPosition());
      assertEquals(158, scope0.getType());
      assertEquals((-1), scope0.getLineno());
      assertTrue(scope0.hasChildren());
      assertEquals(0, scope0.depth());
      assertEquals((-1), scope0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.eof();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.addWarning("I", (-180), (-180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property I
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parse("\"r\"jhzGxt ", "\"r\"jhzGxt ", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Parser parser0 = new Parser();
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.lookupMessage("$~m5}`XN\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property $~m5}`XN
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      
      AstRoot astRoot0 = parser0.parse("switch", "switch", 125);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertEquals(136, astRoot0.getType());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertTrue(astRoot0.hasChildren());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(125, astRoot0.getBaseLineno());
      assertEquals(125, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("switch", astRoot0.getSourceName());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(125, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      
      AstRoot astRoot0 = parser0.parse("let", "let", 1);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertNotNull(astRoot0);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLineno());
      assertFalse(astRoot0.isInStrictMode());
      assertEquals((-1), astRoot0.getEncodedSourceEnd());
      assertEquals(3, astRoot0.getLength());
      assertEquals(1, astRoot0.getEndLineno());
      assertEquals("let", astRoot0.getSourceName());
      assertEquals(1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals((-1), astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getParamCount());
      assertTrue(astRoot0.hasChildren());
      
      parser0.defineSymbol(20, "let");
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      assertNotNull(compilerEnvirons0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      Parser parser0 = new Parser(compilerEnvirons0);
      assertEquals(65536, Parser.ARGC_LIMIT);
      assertNotNull(parser0);
      assertEquals(170, compilerEnvirons0.getLanguageVersion());
      assertTrue(compilerEnvirons0.isStrictMode());
      assertFalse(compilerEnvirons0.getAllowSharpComments());
      assertFalse(compilerEnvirons0.isRecordingLocalJsDocComments());
      assertFalse(compilerEnvirons0.reportWarningAsError());
      assertTrue(compilerEnvirons0.isXmlAvailable());
      assertTrue(compilerEnvirons0.isReservedKeywordAsIdentifier());
      assertTrue(compilerEnvirons0.isGeneratingSource());
      assertEquals(0, compilerEnvirons0.getOptimizationLevel());
      assertFalse(compilerEnvirons0.isAllowMemberExprAsFunctionName());
      assertTrue(compilerEnvirons0.isGenerateDebugInfo());
      assertFalse(compilerEnvirons0.isGenerateObserverCount());
      assertTrue(compilerEnvirons0.isIdeMode());
      assertTrue(compilerEnvirons0.getWarnTrailingComma());
      assertTrue(compilerEnvirons0.isRecordingComments());
      assertTrue(compilerEnvirons0.recoverFromErrors());
      
      // Undeclared exception!
      try { 
        parser0.parse("{[?jDg>GXC{D", "{[?jDg>GXC{D", (-4006));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorCollector errorCollector0 = new ErrorCollector();
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      Node node0 = Node.newTarget();
      AstRoot astRoot0 = parser0.parse("DA'Mx#z-S", "DA'Mx#z-S", 2);
      assertEquals(2, astRoot0.getEndLineno());
      assertEquals(2, astRoot0.getLength());
      
      Node node1 = parser0.destructuringAssignmentHelper(19, node0, (Node) null, "6c=uF%:I&g:Uo5#D");
      assertEquals((-1), node1.getLineno());
      assertEquals(158, node1.getType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Parser parser0 = new Parser();
      EmptyExpression emptyExpression0 = new EmptyExpression();
      // Undeclared exception!
      try { 
        parser0.createDestructuringAssignment((-1507), emptyExpression0, emptyExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompilerEnvirons compilerEnvirons0 = CompilerEnvirons.ideEnvirons();
      ErrorCollector errorCollector0 = new ErrorCollector();
      Parser parser0 = new Parser(compilerEnvirons0, errorCollector0);
      AstRoot astRoot0 = parser0.parse("DA'Mx#z-S", "DA'Mx#z-S", 2);
      // Undeclared exception!
      try { 
        parser0.simpleAssignment(astRoot0, (Node) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION: ts.cursor=8, ts.tokenBeg=2, currentToken=-1
         //
         verifyException("com.google.javascript.rhino.head.Kit", e);
      }
  }
}

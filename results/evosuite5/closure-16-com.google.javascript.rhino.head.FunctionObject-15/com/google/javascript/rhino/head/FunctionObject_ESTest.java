/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:13:34 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeJavaTopPackage;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      TopLevel topLevel0 = new TopLevel();
      Context context0 = new Context();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, topLevel0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, topLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: com.google.javascript.rhino.head.NativeString
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, importerTopLevel0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, importerTopLevel0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.getContext();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, topLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, topLevel0, topLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"error reporter\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, importerTopLevel0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, (Scriptable) null, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClass");
      TopLevel topLevel0 = new TopLevel();
      Context context0 = Context.getContext();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, topLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, topLevel0, topLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeContinuation0);
      Object object0 = functionObject0.call((Context) null, (Scriptable) null, (Scriptable) null, methodArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      NativeJavaTopPackage nativeJavaTopPackage0 = new NativeJavaTopPackage(classLoader0);
      Context context0 = Context.getCurrentContext();
      Class<ConsString> class0 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaTopPackage0, (Object) nativeJavaTopPackage0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "compareTo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"compareTo\" occurs multiple times in class \"java.lang.Double\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "unwrap");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      TopLevel topLevel0 = new TopLevel();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, topLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals(6, methodArray0.length);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("wFcrhQ", method0, importerTopLevel0);
      FunctionObject functionObject1 = new FunctionObject((String) null, method0, functionObject0);
      String string0 = functionObject1.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, functionObject1.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("wFcrhQ", method0, importerTopLevel0);
      functionObject0.getFunctionName();
      assertEquals(6, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test13()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage((String) null);
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeJavaPackage0, (Object) null, 4);
      Object object1 = FunctionObject.convertArg((Context) null, (Scriptable) nativeJavaPackage0, object0, 4);
      assertEquals(0.0, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = Context.enter();
      Double double0 = new Double(37.92096624650075);
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) double0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("msg.no.oveload");
      Class<Boolean> class0 = Boolean.TYPE;
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeJavaPackage0, (Object) boolean0, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("R5$_kI");
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) nativeJavaPackage0.UNINITIALIZED_CONST, 2);
      assertEquals(8, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("GzkCu");
      Context context0 = Context.getContext();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) "GzkCu", 1);
      assertEquals("GzkCu", object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Class<NativeJavaClass> class0 = NativeJavaClass.class;
      NativeContinuation nativeContinuation1 = (NativeContinuation)FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) nativeContinuation0, (Class<?>) class0);
      assertFalse(nativeContinuation1.avoidObjectDetection());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage((String) null);
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeJavaPackage0, (Object) nativeJavaPackage0, 2);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage("get");
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) nativeJavaPackage0, (Object) nativeJavaPackage0, 1);
      assertEquals("[JavaPackage get]", object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Class<Object> class0 = Object.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.enter();
      Double double0 = new Double(0.0);
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) double0, (Class<?>) class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "notify");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("_5 &sh 56)5)}wQi", method0, importerTopLevel0);
      functionObject0.isVarArgsConstructor();
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test29()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "execIdCall");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("execIdCall", method0, importerTopLevel0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"execIdCall\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<BaseFunction> class0 = BaseFunction.class;
      String string0 = ScriptableObject.defineClass((Scriptable) importerTopLevel0, class0, true, true);
      assertEquals("Function", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, importerTopLevel0);
      functionObject0.addAsConstructor(importerTopLevel0, functionObject0);
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      TopLevel topLevel0 = new TopLevel();
      FunctionObject functionObject0 = new FunctionObject("toString", method0, topLevel0);
      int int0 = functionObject0.getLength();
      assertEquals(0, int0);
      assertEquals(6, methodArray0.length);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:20:06 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      assertNotNull(string0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("-b");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.clone();
      assertNotSame(strTokenizer0, strTokenizer1);
      assertNotSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.equals((Object)strTokenizer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("-b");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.getContent();
      assertEquals("-b", string0);
      assertNotNull(string0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("add()is upported");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("/;R4uv0B", "/;R4uv0B");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("+8OX");
      assertNotNull(strTokenizer0);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("org.apache.commons.lang3.text.StrBuilder");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher((StrMatcher) null);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("\"+uK099Z&Xvhf+PL");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher((StrMatcher) null);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("+&Cz2W");
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertEquals(2, charArray0.length);
      assertNotNull(strTokenizer1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      
      StrTokenizer strTokenizer2 = strTokenizer0.setQuoteChar('.');
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer1);
      assertSame(strTokenizer2, strTokenizer0);
      assertNotNull(strTokenizer2);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertEquals(0, strTokenizer2.nextIndex());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertFalse(strTokenizer2.isIgnoreEmptyTokens());
      
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer0, strTokenizer2);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("length must be valid");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('f');
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      StrTokenizer strTokenizer2 = strTokenizer1.reset(charArray0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertSame(strTokenizer1, strTokenizer2);
      assertSame(strTokenizer2, strTokenizer0);
      assertSame(strTokenizer2, strTokenizer1);
      assertEquals(5, charArray0.length);
      assertNotNull(strTokenizer2);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer2.nextIndex());
      assertEquals((-1), strTokenizer2.previousIndex());
      assertTrue(strTokenizer2.isIgnoreEmptyTokens());
      assertFalse(strTokenizer2.isEmptyTokenAsNull());
      assertArrayEquals(new char[] {'f', '\u0000', 'f', 'f', '\u0000'}, charArray0);
      
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
      assertSame(strTokenizer0, strTokenizer2);
      assertSame(strTokenizer0, strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("', has a length less than 2");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
      assertNotNull(strMatcher0);
      
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      assertEquals(0, strTokenizer1.nextIndex());
      
      int int0 = strTokenizer0.size();
      assertEquals(2, int0);
      assertSame(strTokenizer0, strTokenizer1);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      
      int int0 = strTokenizer0.size();
      assertEquals(0, int0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("0UXKC~;N:I");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("0UXKC~;N:I", string0);
      assertNotNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(1, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      String string1 = strTokenizer0.previous();
      assertEquals("0UXKC~;N:I", string1);
      assertNotNull(string1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance((String) null);
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.getContent();
      assertNull(string0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("-b");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      List<String> list0 = strTokenizer0.getTokenList();
      assertNotNull(list0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains("-b"));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("0UXKC~;N:I");
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      
      String string0 = strTokenizer0.nextToken();
      assertEquals("0UXKC~;N:I", string0);
      assertNotNull(string0);
      assertEquals(0, strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strTokenizer0.nextIndex());
      
      String string1 = strTokenizer0.previousToken();
      assertEquals("0UXKC~;N:I", string1);
      assertNotNull(string1);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.previousToken();
      assertNull(string0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.nextToken();
      assertNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null);
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String[] stringArray0 = strTokenizer0.getTokenArray();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[]", string0);
      assertNotNull(string0);
      assertEquals((-1), strTokenizer0.previousIndex());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(",;+H2o@xdV4UoV-aMy");
      assertNotNull(strTokenizer0);
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      
      StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true);
      assertSame(strTokenizer0, strTokenizer1);
      assertSame(strTokenizer1, strTokenizer0);
      assertNotNull(strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer1.nextIndex());
      assertTrue(strTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer1.previousIndex());
      
      int int0 = strTokenizer0.size();
      assertEquals(2, int0);
      assertSame(strTokenizer0, strTokenizer1);
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals((-1), strTokenizer0.previousIndex());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("StrTokenizer");
      strTokenizer0.setIgnoredChar('z');
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("{m8sb}");
      // Undeclared exception!
      try { 
        strTokenizer0.set("{m8sb}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'z', 'z');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(" \t\n\r\f");
      int int0 = strTokenizer0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false);
      assertEquals((-1), strTokenizer1.previousIndex());
      assertFalse(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((char[]) null);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", '$', '$');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("-lb");
      // Undeclared exception!
      try { 
        strTokenizer0.add("-lb");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer(" 210V3p#@dE,", strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("-b", "-b");
      int int0 = strTokenizer0.size();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(", I'");
      strTokenizer0.next();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("', is neither of type Map.Entry nor an Array");
      int int0 = strTokenizer0.size();
      assertEquals(2, int0);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, "&si<7%g");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }
}

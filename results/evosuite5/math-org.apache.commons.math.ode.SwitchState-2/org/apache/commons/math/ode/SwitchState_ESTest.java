/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:43:59 GMT 2019
 */

package org.apache.commons.math.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.DummyStepInterpolator;
import org.apache.commons.math.ode.GraggBulirschStoerStepInterpolator;
import org.apache.commons.math.ode.SwitchState;
import org.apache.commons.math.ode.SwitchingFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SwitchState_ESTest extends SwitchState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-0.4177154084020128), (-0.4177154084020128), 16.879598450517673, 0.0, (-0.4177154084020128)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-0.4177154084020128), 844);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      double[][] doubleArray2 = new double[1][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray1, doubleArray1, doubleArray0, doubleArray1, doubleArray2, false);
      switchState0.evaluateStep(graggBulirschStoerStepInterpolator0);
      assertFalse(switchState0.stop());
      
      switchState0.stepAccepted(2, doubleArray1);
      boolean boolean0 = switchState0.reset(0.0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-0.4177154084020128), (-0.4177154084020128), 0.13095238095238096, 0.0, (-0.4177154084020128)).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-0.4177154084020128), 844);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      double[][] doubleArray2 = new double[1][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray1, doubleArray0, doubleArray1, doubleArray0, doubleArray2, false);
      switchState0.evaluateStep(graggBulirschStoerStepInterpolator0);
      assertFalse(switchState0.stop());
      
      switchState0.stepAccepted(3914.596930600923, doubleArray1);
      boolean boolean0 = switchState0.reset((-0.4177154084020128), doubleArray1);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-0.4177154084020128), 844);
      double[] doubleArray0 = new double[7];
      boolean boolean0 = switchState0.reset((-0.4177154084020128), doubleArray0);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-0.4177154084020128), 844);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      double[][] doubleArray2 = new double[1][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray1, doubleArray1, doubleArray0, doubleArray1, doubleArray2, false);
      boolean boolean0 = switchState0.evaluateStep(graggBulirschStoerStepInterpolator0);
      boolean boolean1 = switchState0.reset(0.0, doubleArray0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(switchingFunction0).eventOccurred(anyDouble() , any(double[].class));
      doReturn((-0.4177154084020128), (-0.4177154084020128), 0.13095238095238096, 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-0.4177154084020128), 844);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      double[][] doubleArray2 = new double[1][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray1, doubleArray0, doubleArray1, doubleArray0, doubleArray2, false);
      switchState0.evaluateStep(graggBulirschStoerStepInterpolator0);
      assertFalse(switchState0.stop());
      
      switchState0.stepAccepted(3914.596930600923, doubleArray1);
      boolean boolean0 = switchState0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-0.4177154084020128), 844);
      boolean boolean0 = switchState0.stop();
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-6340), (-6340), (-6340));
      switchState0.stepAccepted((-6340), (double[]) null);
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
      assertFalse(switchState0.stop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-974.59291940197), (-974.59291940197), 12.897070595160018, (double)844, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-974.59291940197), 844);
      double[] doubleArray0 = new double[1];
      switchState0.stepAccepted((-3777.7236050051), doubleArray0);
      double[][] doubleArray1 = new double[7][1];
      GraggBulirschStoerStepInterpolator graggBulirschStoerStepInterpolator0 = new GraggBulirschStoerStepInterpolator(doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, true);
      switchState0.evaluateStep(graggBulirschStoerStepInterpolator0);
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(graggBulirschStoerStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [-3777.7236050051,NaN]  Values: [844.0,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-974.59291940197), (-974.59291940197), Double.NaN, 0.0, 0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, 844, (-974.59291940197), 844);
      double[] doubleArray0 = new double[1];
      switchState0.reinitializeBegin(844, doubleArray0);
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      dummyStepInterpolator0.currentTime = 2991.38359927708;
      // Undeclared exception!
      try { 
        switchState0.evaluateStep(dummyStepInterpolator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Function values at endpoints do not have different signs.  Endpoints: [3250.1819855866897,3965.9765186790496]  Values: [0.0,0.0]
         //
         verifyException("org.apache.commons.math.analysis.BrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(switchingFunction0).g(anyDouble() , any(double[].class));
      SwitchState switchState0 = new SwitchState(switchingFunction0, (-6340), (-6340), (-6340));
      switchState0.reinitializeBegin((-6340), (double[]) null);
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, switchState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SwitchingFunction switchingFunction0 = mock(SwitchingFunction.class, new ViolatedAssumptionAnswer());
      SwitchState switchState0 = new SwitchState(switchingFunction0, 2199.3013218628, 0.0, 10);
      double double0 = switchState0.getEventTime();
      assertFalse(switchState0.stop());
      assertEquals(Double.NaN, double0, 0.01);
  }
}

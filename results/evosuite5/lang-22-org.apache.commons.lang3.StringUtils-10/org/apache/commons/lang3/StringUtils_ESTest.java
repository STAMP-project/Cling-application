/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:52:14 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[6] = "Cannot pad a negative amount: ";
      boolean boolean0 = StringUtils.endsWithAny("Cannot pad a negative amount: ", stringArray0);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("e<7[6V^~-", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.endsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("normalize");
      assertEquals("normalize", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.endsWithAny("Cannot pad a negative amount: ", stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "7";
      boolean boolean0 = StringUtils.startsWithAny("7", stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("!CK5s# g,L!dPs", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny((String) null, (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.startsWithAny("7", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("pthe character must not be null", "D");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match: ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("0b", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("normalize", "");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, "Search and Replace array lengths don't match: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Array element ";
      stringArray0[1] = "Array element ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Array element ", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y,oKFs?Xh ";
      stringArray0[1] = "Y,oKFs?Xh ";
      stringArray0[2] = "Y,oKFs?Xh";
      stringArray0[3] = "Y,oKFs?Xh ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Y,oKFs?Xh", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("TimeToLive of ", "TimeToLive of ", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.right("$", 8192);
      assertEquals("$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("$", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) string0);
      assertEquals(1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.difference("$", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.right("$", 8192);
      assertEquals("$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("$", "$");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) string0);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "7:m");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.difference(":'kbilp", ":'kbilp");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.difference("e1;u08g%tu", "F:N1AFJBB\\|=LCrX");
      assertEquals("F:N1AFJBB\\|=LCrX", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.difference(":@[zi)", (String) null);
      assertEquals(":@[zi)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E Fn}BBYV0]P/", "?[e5 LlA", 10);
      assertEquals("E?[e5 LlA/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Mp", "Mp", 32);
      assertEquals("Mp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("ojg.apache.comons.lang>.ObjectUtis$Null", "ojg.apache.comons.lang>.ObjectUtis$Null", 2);
      assertEquals("ojg.apache.comons.lang>.ObjectUtis$Null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", (-2054));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("try no,|{w;qu}ryz8l", 1783, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.abbreviate("~Zmn|hyWl[92HV&", 300, 11);
      assertEquals("...Wl[92HV&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.abbreviate("5&DLZoPf", 11);
      assertEquals("5&DLZoPf", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("KpPLv1J#P/_?~:KbY;", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 866, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.reverse("F:N1AFJBB\\|=LCrX");
      assertEquals("XrCL=|\\BBJFA1N:F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " ", (CharSequence) " ");
      assertEquals(" ", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.defaultString("$vg ", "$vg ");
      assertEquals("$vg ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("KU");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("The character must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("jav");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" in an array of ~``'M\"R)$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" IS LESS THAN 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("0b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("79&S=`QY$GV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(" :'KbiLp ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("ks(Tfa1cTWh{>dB4[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Cannot pad a negative amount: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Rrrr)G=:rrrrr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("TimeToLive of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("S'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("QZ <;,<Xv7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.countMatches("RIj^v*V=GaG%=I7", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.countMatches("G6-SR89cicJ^]OA%Tuc", "G6-SR89cicJ^]OA%Tuc");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.swapCase("$PjB");
      assertEquals("$pJb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Cc.i ");
      assertEquals("cc.i ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.capitalize("\"6");
      assertEquals("\"6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("JDYNM@ry", locale0);
      assertEquals("jdynm@ry", string0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Cannot store ");
      assertEquals("cannot store ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("6w[uT(A@(O", locale0);
      assertEquals("6W[UT(A@(O", string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.upperCase("$");
      assertEquals("$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.center("v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2", 10, "v&T&Y~]|hvj3QT2");
      assertEquals("v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2v&T&Y~]|hvj3QT2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.center("", 113, "");
      assertEquals("                                                                                                                 ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.center("*X#E8b_+S@bqHv@l", (-287), "mioac=aM");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 22, "hh\"jV={tDgmt5~gE1i");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.center("M,ouFs?Xh", 1);
      assertEquals("M,ouFs?Xh", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.center("pimeToive of ", 0);
      assertEquals("pimeToive of ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 163);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.length("TimeToLive of ");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.center("JR}", 10, "JR}");
      assertEquals("JR}JR}JR}J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 128, "");
      assertEquals("                                                                                                                                ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 110, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8198, 'C');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 48, '/');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.center("s/=$OD!X", 16, "s/=$OD!X");
      assertEquals("s/=$s/=$OD!Xs/=$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.rightPad("java.text.Normalizer$Form", 39, "=ht,m5m0e+~^tc");
      assertEquals("java.text.Normalizer$Form=ht,m5m0e+~^tc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.rightPad("l>A+ O-c", (-287), "l>A+ O-c");
      assertEquals("l>A+ O-c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2, "");
      assertEquals("  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 126, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 7, 'k');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.repeat("pF", 144);
      assertEquals("pFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpFpF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.repeat("$", 8194);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.repeat("$", 8192);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("$", 8192, string0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string1);
      assertEquals((-1), int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 2);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.repeat("Array element ", (String) null, 1);
      assertEquals("Array element ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.repeat("pimeToive of ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, 46);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.chop("ci: ");
      assertEquals("ci:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.chomp(",>", ",>");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.chomp("Cbc.i ", (String) null);
      assertEquals("Cbc.i ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.chomp("&P97~ sDKoFC", "5f!zu bwscjufa");
      assertEquals("&P97~ sDKoFC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.chomp("cloeanfdtype ");
      assertEquals("cloeanfdtype ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.overlay(" ", " ", 2, 2);
      assertEquals("  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.overlay("1Z)%K%]69rfsP7", "vz';*uNx%2sx!| <", 663, (-1));
      assertEquals("vz';*uNx%2sx!| <", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 46, 46);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.overlay("h7Xw^!#G8(7;D", (String) null, (-313), (-3690));
      assertEquals("h7Xw^!#G8(7;D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" has no clone method", "$", "$");
      assertEquals(" has no clone method", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.apVche.commons.lang3.StringUtils", "Cannot get the toString of yVnull identity", "Cannot get the toString of yVnull identity");
      assertEquals("org.apVche.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.replaceChars("InvocationTargetException occurred", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", (String) null);
      assertEquals("IgEx", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Index: ", (String) null, "org.apache.commons.lang3.ArrayUtils");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '<', 'n');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.replaceChars("ih3}y7", 'M', 'M');
      assertEquals("ih3}y7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("', is neither of type Map.Entry nor an Array", stringArray0, stringArray0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " is less than 0: ";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceEach(" is less than 0: ", stringArray0, stringArray0);
      assertEquals(" is less than 0: ", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Index: ";
      stringArray0[1] = " ";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "Array and element cannot both be null";
      String string0 = StringUtils.replaceEach(" ", stringArray0, stringArray1);
      assertEquals("Array and element cannot both be null", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width is 4", " ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Minimum abbreviation width is 4", stringArray0, stringArray0);
      assertEquals("Minimum abbreviation width is 4", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("$");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("q D", stringArray0, stringArray0);
      assertEquals("q D", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("java.text.Normalizer$Form", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7{l-'C/y{q";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("7{l-'C/y{q", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 7{l-'C/y{q
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEach("IllegalAccessException occurred", stringArray0, stringArray1);
      assertEquals("IllegalAccessException occurred", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEach("0E&*_24-P&", stringArray0, (String[]) null);
      assertEquals("0E&*_24-P&", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("_", stringArray0, stringArray0);
      assertEquals("_", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.replaceEach(stringArray0[0], stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("  ", (String[]) null, (String[]) null);
      assertEquals("  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.replace(":'kbiKp", ":'kbiKp", "The Character must not be null", 151);
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("LrdlW1 Sjg-Fqe='", "LrdlW1 Sjg-Fqe='", "LrdlW1 Sjg-Fqe='");
      assertEquals("LrdlW1 Sjg-Fqe='", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.replace("v8=", "pimeToive of ", "pimeToive of ", 0);
      assertEquals("v8=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.replace(string0, "h*1K", (String) null, 10);
      assertEquals("\\u0", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("QZ <;,<Xv7", (String) null, "QZ <;,<Xv7");
      assertEquals("QZ <;,<Xv7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.remove("InvocationTargetException occurred", 'E');
      assertEquals("InvocationTargetxception occurred", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.remove(" ", '[');
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.remove("111111111111111111111oOd}ai111111111111111111111", "111111111111111111111oOd}ai111111111111111111111");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("SecurityExceptin oc4urred", "SecurityExceptin oc4urred");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("', is neither of type Map.Entry nor an Array", (String) null);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.removeEnd("qz <;,<xv7', is neither of typb=\"/*w9;cy no,|{w;qu}ryz8lot", "v&c&I~]D|hvj3QT2");
      assertEquals("qz <;,<xv7', is neither of typb=\"/*w9;cy no,|{w;qu}ryz8lot", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.removeEnd("QZ <;,<Xv7", "QZ <;,<Xv7");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.removeEnd("FuH\"<9z~+T1/.Z6a", (String) null);
      assertEquals("FuH\"<9z~+T1/.Z6a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("sun.text.Normalizer is not available", "");
      assertEquals("sun.text.Normalizer is not available", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.removeStart("lxKFH1", "lxKFH1");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.removeStart("zzH<~0bZ71rYNKe", "");
      assertEquals("zzH<~0bZ71rYNKe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeStart(string0, "{}");
      assertEquals("\\u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0");
      assertEquals(",Length:0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(":");
      assertEquals(":", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.defaultString("B8CM^");
      assertEquals("B8CM^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, "QPM9v+*LELZ,B/PPy}");
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ",ouFs?Xh";
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string1 = StringUtils.join(iterator0, ",ouFs?Xh");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string0);
      assertEquals(5, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "ci:V");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<String> vector0 = new Vector<String>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      vector0.setSize(3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null]", vector0.toString());
      assertEquals(3, vector0.capacity());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 't');
      assertEquals("tt", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null]", vector0.toString());
      assertEquals(3, vector0.capacity());
      assertFalse(arrayList0.contains(string0));
      assertFalse(vector0.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("dFW7k_|kxC)");
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[dFW7k_|kxC)]", vector0.toString());
      assertTrue(vector0.contains("dFW7k_|kxC)"));
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'n');
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[dFW7k_|kxC)]", vector0.toString());
      assertTrue(vector0.contains("dFW7k_|kxC)"));
      assertFalse(vector0.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 'G');
      assertEquals("", string0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'M');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'e');
      assertEquals("AUTOSELECT_FILTERINGeEXTENDED_FILTERINGeIGNORE_EXTENDED_RANGESeMAP_EXTENDED_RANGESeREJECT_EXTENDED_RANGES", string0);
      assertEquals(5, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "");
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "q", (-1026), 5028);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "Cannot get the toString of a null identity");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.join((Object[]) stringArray0, 'r');
      assertEquals("rrrrr", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, 'f', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '\\', (-1253), (-1138));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '1');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("2m4*UOUo.~LD*l]_9Q");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("QZ <;,<Xv7");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("qz <;,<xv7', is neither of typb=\"/*w9;cy no,|{w;qu}ryz8lot", "qz <;,<xv7', is neither of typb=\"/*w9;cy no,|{w;qu}ryz8lot", 10);
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(V&Kj/LNeIkX;t$uCj", "$");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("$", "$");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", ' ');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("}cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc", 'c');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '0');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("TimeToLive of ", "TimeToLive of ", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cci ", "");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("', has a length less than 2", "', has a length less than 2", ":}AQ+$,lxS<");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.repeat("ZMt&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2", 1094);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, "ZMt&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2", "ZMt&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2v&t&y~]|hvj3qt2");
      assertEquals(547, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width is 4", "Q9VEy+3UQ/C(2", "Q9VEy+3UQ/C(2");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Cannot clone Cloneable type ", "Cannot clone Cloneable type ", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "tencha'galac ", "tencha'galac ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, ":}AQ+$,lxS<");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.substringBetween("InvocationTargetException occurred", "InvocationTargetException occurred");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.CharUtils", "*k.i'If-6.", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Ko3'6 ub", "JD0@C.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("yr PawMeyTUUd.0", " ");
      assertEquals("PawMeyTUUd.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8193, 'I');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("cY/(?SyYbePau#A6C:z", string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("The character must not be null", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(" vs ", " vs ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("NyD#1p^-?%Rz^C/N5_T", (String) null);
      assertEquals("NyD#1p^-?%Rz^C/N5_T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("HtlY,PIvc2h[dGD", "5#VfC6]");
      assertEquals("HtlY,PIvc2h[dGD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.substringAfter("xz-kEP`", "Y,oKFs?Xh");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Array and element cannot both be null", "Array and element cannot both be null");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.substringAfter("1#kg,#ea-f><", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.substringBefore("[AUTOSELECT_FILTERING, EXTENDED_FILTERING, IGNORE_EXTENDED_RANGES, MAP_EXTENDED_RANGES, REJECT_EXTENDED_RANGES]yr PawMeyTUUd.0[AUTOSELECT_FILTERING, EXTENDED_FILTERING, IGNORE_EXTENDED_RANGES, MAP_EXTENDED_RANGES, REJECT_EXTENDED_RANGES]", "[AUTOSELECT_FILTERING, EXTENDED_FILTERING, IGNORE_EXTENDED_RANGES, MAP_EXTENDED_RANGES, REJECT_EXTENDED_RANGES]yr PawMeyTUUd.0[AUTOSELECT_FILTERING, EXTENDED_FILTERING, IGNORE_EXTENDED_RANGES, MAP_EXTENDED_RANGES, REJECT_EXTENDED_RANGES]");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.substringBefore("charthe characte", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.substringAfterLast(stringArray0[1], "7");
      assertEquals(5, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore("7", string0);
      assertEquals("7", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.substringBefore("}23aD", "cu<Tf<.k\":N#yVgMK=");
      assertEquals("}23aD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.mid("pimeT~oive of ", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.mid("|sav^~<[2S", 9, 1792);
      assertEquals("S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.mid(",ZouFsXh", 11, 11);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.mid("cloneabnfdtype ", (-1540), (-1540));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-1503), (-1503));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.mid("7i", (-1), 908);
      assertEquals("7i", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.right("&nM#ll-~=/wx4", 9);
      assertEquals("ll-~=/wx4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.right("                kX5(YlA                ", (-1303));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.right("$", 8192);
      assertEquals("$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(string0, (-1), "SIN ");
      assertEquals("$", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.left("uq~", 16);
      assertEquals("uq~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.left(" =bE`>]4@#Y2", (-2214));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 241);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.left("QZ <;,<Xv7", 2);
      assertEquals("QZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.substring("HS$g**rOZ]", 8170, 8170);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.substring("SecurityException occurred", 2, 2);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1647, 1647);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.substring(" is Glss han 0: ", (-406), (-294));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.substring("org.apache.commons.lang3.CharSequenceUtils", (-1357));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 61);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.substring(",ZouFs?Xh", 11);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      int int0 = StringUtils.lastIndexOfAny("*", stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.lastIndexOfAny("*", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("MCxIf)EE:=B", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("TimeToLive of ", stringArray0);
      assertEquals((-1), int0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null?E}Mo~CK-&#bg=&_{", "Minimum abbreviation width is 4");
      assertEquals(24, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny("_|\"L.cT>)!", stringArray0);
      assertEquals(0, int0);
      assertEquals(24, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "DmK*g";
      int int0 = StringUtils.indexOfAny("wa", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("_<\"l.Ctl)!", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "$", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.containsNone((CharSequence) stringArray0[0], stringArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "ci: ", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "f<vX'X3}we|*n", "f<vX'X3}we|*n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "hNp$u&B", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "SecurityException occurred", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Index: ", "Index: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("N", ">F])}&s>mY>R<");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("VAU", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "FuH\"<9z~+T1/.Z6a", "FuH\"<9z~+T1/.Z6a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "dGb#o,pB8?-", "InvocationTargetException occurred");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "IllegalAccessException occurred", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("/", "Clneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("Iw", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("InvocationTargetException occurred", "InvocationTargetException occurred");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "zU Bws", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "TimeToLive of ", "TimeToLive of ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", ";u08");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'n';
      int int0 = StringUtils.indexOfAny((CharSequence) "e*nwf<vX'X3}", charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\u0000', 'n'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAny((CharSequence) "Ci ", charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {' ', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "e*nwf<vX'X3}", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "7i", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Cc.i ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("oH", "oH");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase(":_", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Exception cloning Cloneable type ", "ozhi3HG5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(",ouFs?Xh", ",ouFs?Xh");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("FPHMG,", "org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("N", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("%e5FRo[wO/8W=&kB\" ", 7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (-2673));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("qz <;,<xv7', it neithe_ of type map.e^;ujzq{v=0fezi^bvyot", 48);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("IllegalAccessException occurred", "Cc.i ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("kR'LB", "kR'LB");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", (String) null, (int) 'G');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, "`6", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("z*<!d]FI/ug/'", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("", ")>@B#`1HO?zx])Fa>A");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("x-)M1=oSS", (String) null, 97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", "", 1133);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, " is less than 0: ", (-1870));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("org.apache.commons; dkqcv:nq%ptutils", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("RI^v*V=GnG%MIy", "RI^v*V=GnG%MIy");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (int) 'f', (int) 'f');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(" ", 9, 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(", '", 1783);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase(";@", ";@", 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("5f!mzmLHBCJufa", "zU Bws", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("WC`W/W}kLxjIpf", (String) null, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null, 12);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("+Tn", "+Tn", 4050);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("&:<Lh*", "99AMrwU=", 4012);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 4050);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", (-4978));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Minimum abbreviation width is 4", (String) null, 8194);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 4050);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int int0 = StringUtils.indexOf("r", (String) null, 8209);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int int0 = StringUtils.indexOf("$", "$", 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = StringUtils.indexOftring) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = StringUtils.indexOf("Cl\"annt sto ", "Cl\"annt sto ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "JE /g!u$TrpHmFC");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.indexOf("SIN ", 8192, 8192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = StringUtils.indexOf("i", 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("QZ <;,<Xv7", "QZ <;,<Xv7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "P}'e", (CharSequence) "P}'e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.stripAccents((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.stripAccents("IllegalAccessException occurred");
      assertEquals("IllegalAccessException occurred", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "{_N");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.stripEnd("JbEf'M5W:}F@>^", "JbEf'M5W:}F@>^");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "j|sH7_$cqHCK$L4DE");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.strip("%Bn,N@cGe", "$");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "uen";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.strip("InvocationTargetException occurred", "InvocationTargetException occurred");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.stripToNull("java.text.Normalizer is not available");
      assertEquals("java.text.Normalizer is not available", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("p{nCombiningDiacriticalMarks}+");
      assertEquals("p{nCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Cartnnot store ");
      assertEquals("Cartnnot store", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", (CharSequence) " ");
      assertEquals(" ", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "s@21XDTw.%<+erG(");
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "i", (CharSequence) "i");
      assertEquals("i", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("TimeToLive of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("DckV<-Y@2e%[", "", 16);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.remove("IllegalAccessException occurred", (String) null);
      assertEquals("IllegalAccessException occurred", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("CsMVW1//0nO78\"o^E", "CsMVW1//0nO78\"o^E");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.replace("%X\"KFH1", "%X\"KFH1", "%X\"KFH1");
      assertEquals("%X\"KFH1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("e|*nwf<vX'X3}", 'w');
      assertEquals("f<vX'X3}we|*n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Exception cloning Cloneable type ", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("ZM", "?HVcR5I| 0:~:%EiL");
      assertEquals("ZM", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("C", "C", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.strip("$");
      assertEquals("$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".Z [rw", (String) null);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.concat(stringArray0);
      assertEquals(".Z[rw", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.leftPad(",ZouFs?Xh", 11);
      assertNotNull(string0);
      assertEquals("  ,ZouFs?Xh", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'l');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = StringUtils.rightPad("B~3", 2);
      assertNotNull(string0);
      assertEquals("B~3", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("sun.text.Normalizer", "x}", "sun.text.Normalizer");
      assertEquals("sun.text.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", "m");
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Search and Replace array lengths don't atch: ", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Minium abbreviation width is 4", stringArray0, stringArray0);
      assertEquals("Minium abbreviation width is 4", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.center(" ", 2);
      assertEquals("  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("6y 54t3}H_", "e*nwf<vX'X3}");
      assertEquals("6y 54t3}H_", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("--MbkZ1* ^jUsf", "--MbkZ1* ^jUsf", (int) ',');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.abbreviate("KpPLv1J#P/U_P~:KbY;", 7, 7);
      assertEquals("...#...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "G?b]7)eJJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.concatWith("n&_W^bTpn", objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("R+K,qxNpTr!9K22B'w(", "R+K,qxNpTr!9K22B'w(");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match:", (String) null, 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }
}

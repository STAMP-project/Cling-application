/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:34:24 GMT 2019
 */

package com.google.javascript.rhino.head.tools.debugger;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeFunction;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.tools.debugger.Dim;
import com.google.javascript.rhino.head.tools.debugger.GuiCallback;
import com.google.javascript.rhino.head.tools.debugger.ScopeProvider;
import com.google.javascript.rhino.head.tools.debugger.SourceProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Dim_ESTest extends Dim_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      String string0 = dim0.objectToString(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(string0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enter();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals((-1), context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals((-1), context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertNotNull(importerTopLevel0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      ScopeProvider scopeProvider0 = mock(ScopeProvider.class, new ViolatedAssumptionAnswer());
      doReturn(importerTopLevel0).when(scopeProvider0).getScope();
      dim0.setScopeProvider(scopeProvider0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals((-1), context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertTrue(importerTopLevel0.isExtensible());
      assertFalse(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertEquals("global", importerTopLevel0.getClassName());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      
      // Undeclared exception!
      try { 
        dim0.evalScript("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.tools.debugger.Dim", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      ScopeProvider scopeProvider0 = mock(ScopeProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Scriptable) null).when(scopeProvider0).getScope();
      dim0.setScopeProvider(scopeProvider0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      // Undeclared exception!
      try { 
        dim0.evalScript("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.tools.debugger.Dim", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      
      String string0 = dim0.objectToString((Object) null);
      assertNotNull(string0);
      assertEquals("null", string0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      
      boolean boolean0 = dim0.stringIsCompilableUnit("");
      assertTrue(boolean0);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      
      // Undeclared exception!
      try { 
        dim0.evalScript("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.tools.debugger.Dim", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(2, Dim.STEP_OUT);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(2, Dim.STEP_OUT);
      
      // Undeclared exception!
      try { 
        dim0.compileScript("mNX[_~M,Rh)p`j_t(;", "mNX[_~M,Rh)p`j_t(;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ] in index expression (mNX[_~M,Rh)p`j_t(;#1)
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      NativeArray nativeArray0 = new NativeArray(4);
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertNotNull(nativeArray0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Object[] objectArray0 = dim0.getObjectIds(nativeArray0);
      assertTrue(nativeArray0.isExtensible());
      assertEquals("Array", nativeArray0.getClassName());
      assertFalse(nativeArray0.isSealed());
      assertEquals(4L, nativeArray0.jsGet_length());
      assertFalse(nativeArray0.avoidObjectDetection());
      assertTrue(nativeArray0.isEmpty());
      assertEquals(4L, nativeArray0.getLength());
      assertEquals("object", nativeArray0.getTypeOf());
      assertFalse(nativeArray0.hasPrototypeMap());
      assertNotNull(objectArray0);
      assertEquals(5, Dim.EXIT);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      
      NativeObject nativeObject0 = new NativeObject();
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertNotNull(nativeObject0);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      NativeFunction nativeFunction0 = mock(NativeFunction.class, new ViolatedAssumptionAnswer());
      NativeGenerator nativeGenerator0 = new NativeGenerator(nativeObject0, nativeFunction0, dim0);
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isEmpty());
      assertNotNull(nativeGenerator0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      
      Object[] objectArray0 = dim0.getObjectIds(nativeGenerator0);
      assertTrue(nativeObject0.isExtensible());
      assertTrue(nativeObject0.isEmpty());
      assertFalse(nativeObject0.isSealed());
      assertFalse(nativeObject0.avoidObjectDetection());
      assertEquals("object", nativeObject0.getTypeOf());
      assertFalse(nativeObject0.hasPrototypeMap());
      assertEquals("Object", nativeObject0.getClassName());
      assertFalse(nativeGenerator0.avoidObjectDetection());
      assertFalse(nativeGenerator0.isSealed());
      assertEquals("Generator", nativeGenerator0.getClassName());
      assertTrue(nativeGenerator0.isExtensible());
      assertEquals("object", nativeGenerator0.getTypeOf());
      assertFalse(nativeGenerator0.hasPrototypeMap());
      assertTrue(nativeGenerator0.isEmpty());
      assertNotNull(objectArray0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, NativeGenerator.GENERATOR_CLOSE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, NativeGenerator.GENERATOR_SEND);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, NativeGenerator.GENERATOR_THROW);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      Context context0 = contextFactory0.enterContext();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals((-1), context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals((-1), context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertNotNull(importerTopLevel0);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      
      Object[] objectArray0 = dim0.getObjectIds(importerTopLevel0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertTrue(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals((-1), context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertEquals("global", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isExtensible());
      assertTrue(importerTopLevel0.hasPrototypeMap());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isEmpty());
      assertNotNull(objectArray0);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(60, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      Delegator delegator0 = new Delegator();
      assertNotNull(delegator0);
      
      // Undeclared exception!
      try { 
        dim0.getObjectIds(delegator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.Delegator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(3, Dim.GO);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(3, Dim.GO);
      
      Object[] objectArray0 = dim0.getObjectIds(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(objectArray0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(3, Dim.GO);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      
      // Undeclared exception!
      try { 
        dim0.getObjectProperty((Object) null, "__parent__");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.tools.debugger.Dim", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isEmpty());
      assertNotNull(nativeContinuation0);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      // Undeclared exception!
      try { 
        dim0.getObjectProperty(nativeContinuation0, nativeContinuation0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.head.NativeContinuation cannot be cast to java.lang.Integer
         //
         verifyException("com.google.javascript.rhino.head.tools.debugger.Dim", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      
      String string0 = dim0.eval((String) null);
      assertNotNull(string0);
      assertEquals("undefined", string0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      dim0.clearAllBreakpoints();
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Dim.ContextData dim_ContextData0 = new Dim.ContextData();
      assertEquals(0, dim_ContextData0.frameCount());
      assertNotNull(dim_ContextData0);
      
      // Undeclared exception!
      try { 
        dim_ContextData0.getFrame(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2 \u2209 [0, 0)
         //
         verifyException("com.google.javascript.rhino.head.ObjArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Dim.ContextData.get((Context) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.tools.debugger.Dim$ContextData", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Dim.ContextData dim_ContextData0 = new Dim.ContextData();
      assertEquals(0, dim_ContextData0.frameCount());
      assertNotNull(dim_ContextData0);
      
      int int0 = dim_ContextData0.frameCount();
      assertEquals(0, dim_ContextData0.frameCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      dim0.setBreak();
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      
      dim0.go();
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      
      dim0.contextSwitch((-45));
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
      
      Dim.FunctionSource dim_FunctionSource0 = dim0.functionSourceByName("");
      assertNull(dim_FunctionSource0);
      assertEquals(4, Dim.BREAK);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      
      dim0.setBreakOnExceptions(true);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(4, Dim.BREAK);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      
      SourceProvider sourceProvider0 = mock(SourceProvider.class, new ViolatedAssumptionAnswer());
      dim0.setSourceProvider(sourceProvider0);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(4, Dim.BREAK);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
      
      dim0.setBreakOnEnter(true);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(5, Dim.EXIT);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      dim0.dispose();
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      
      Dim.SourceInfo dim_SourceInfo0 = dim0.sourceInfo("");
      assertNull(dim_SourceInfo0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
      
      String string0 = dim0.eval("");
      assertNotNull(string0);
      assertEquals("undefined", string0);
      assertEquals(4, Dim.BREAK);
      assertEquals(3, Dim.GO);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
      
      dim0.setBreakOnReturn(false);
      assertEquals(4, Dim.BREAK);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      
      dim0.setGuiCallback((GuiCallback) null);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(3, Dim.GO);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      
      String[] stringArray0 = dim0.functionNames();
      assertNotNull(stringArray0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      
      dim0.setReturnValue(2);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(5, Dim.EXIT);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(4, Dim.BREAK);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertNotNull(contextFactory0);
      
      Dim dim0 = new Dim();
      assertNotNull(dim0);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      dim0.attachTo(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(nativeContinuation0);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Object object0 = dim0.getObjectProperty(nativeContinuation0, "i");
      assertTrue(nativeContinuation0.isEmpty());
      assertEquals("Continuation", nativeContinuation0.getClassName());
      assertEquals("object", nativeContinuation0.getTypeOf());
      assertFalse(nativeContinuation0.hasPrototypeMap());
      assertTrue(nativeContinuation0.isExtensible());
      assertFalse(nativeContinuation0.isSealed());
      assertFalse(nativeContinuation0.avoidObjectDetection());
      assertNotNull(object0);
      assertEquals(2, Dim.STEP_OUT);
      assertEquals(5, Dim.EXIT);
      assertEquals(1, Dim.STEP_INTO);
      assertEquals(3, Dim.GO);
      assertEquals(4, Dim.BREAK);
      assertEquals(0, Dim.STEP_OVER);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
  }
}

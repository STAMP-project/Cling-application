/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:27:13 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Weeks weeks0 = Weeks.weeksIn(mutableInterval0);
      mutableInterval0.setPeriodBeforeEnd(weeks0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 1672L);
      Days days0 = Days.ONE;
      Minutes minutes0 = days0.toStandardMinutes();
      mutableInterval0.setPeriodAfterStart(minutes0);
      assertEquals(86400000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) dateMidnight0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 1672L);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = new DateTime(0L, (Chronology) null);
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = new DateTime(0L, (Chronology) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableInterval0);
      Duration duration0 = mutablePeriod0.toDurationTo(dateTime0);
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) julianChronology0);
      mutableInterval0.setEnd(dateMidnight0);
      assertEquals(1392332400000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = new Duration(mutableInterval0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.ONE;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, days0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      LocalTime localTime0 = LocalTime.now((Chronology) gregorianChronology0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      MutableInterval mutableInterval0 = new MutableInterval(mutablePeriod0, dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval("qiaIc[e^ZG.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: qiaIc[e^ZG.
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableDuration) null, dateMidnight0);
      assertEquals(1392332400000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(1731L, 3003L);
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationBeforeEnd((-76L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = new Duration(mutableInterval0);
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, duration0);
      assertEquals(1392332400000L, mutableInterval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 1672L);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertEquals(1672L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, islamicChronology0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse(" S\"F2'-KGcphm|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator:  S\"F2'-KGcphm|
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationAfterStart(0L);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      mutableInterval0.setStart(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertNotSame(mutableInterval0, mutableInterval1);
  }
}

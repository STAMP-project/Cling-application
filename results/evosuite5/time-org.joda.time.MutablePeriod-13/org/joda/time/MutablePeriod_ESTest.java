/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:23:03 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Seconds;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      Duration duration0 = Duration.standardSeconds((-1502L));
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      Interval interval0 = new Interval((-1926), 3813L, dateTimeZone0);
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals((-1926L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.setPeriod((ReadableInstant) null, (ReadableInstant) instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      Months months0 = Months.MIN_VALUE;
      PeriodType periodType0 = months0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, instant0, periodType0);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.addHours(66);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1502L), (-334L), periodType0, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-1502L));
      PeriodType periodType0 = PeriodType.years();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(24);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, (PeriodType) null, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.clear();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.setDays(1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, (-6165), 1597, (-6165), 122, periodType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.add((long) 0, (Chronology) gJChronology0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.standardSeconds(0L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.setHours(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.setMonths(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2970L), 851L);
      mutablePeriod0.add((-2970L));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-791L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue(806, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 806
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1596L, 1596L, periodType0);
      mutablePeriod0.addMillis((-1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(990, 0, 990, 0);
      mutablePeriod0.setYears((-1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3240), (-3240), (-3240), 0, (-494), 0, 0, (-3240));
      mutablePeriod0.setSeconds((-3841));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.setWeeks(1079);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      mutablePeriod0.addYears(1079);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-791L), (Chronology) gJChronology0);
      mutablePeriod0.setPeriod((-1438L), (-1438L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Interval interval0 = new Interval(0L, 0L, fixedDateTimeZone0);
      Days days0 = Days.FOUR;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(0L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Period period0 = new Period((-301L), (PeriodType) null);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      PeriodType periodType0 = seconds0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1596L, 1596L, periodType0);
      Hours hours0 = Hours.MAX_VALUE;
      Days days0 = hours0.toStandardDays();
      mutablePeriod0.mergePeriod(days0);
      assertEquals(89478485, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-886L), (Chronology) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      mutablePeriod0.addWeeks(0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        mutablePeriod0.addSeconds((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, copticChronology0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      PeriodType periodType0 = hours0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, mutableDateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Duration duration0 = hours0.toStandardDuration();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.add(0, 0, 0, 0, 0, 1366, 0, 0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 28181250, 0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      mutablePeriod0.set(durationFieldType0, 1);
      assertEquals("weeks", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.weeks();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.addMinutes(3596);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(990, 0, 990, 0);
      mutablePeriod0.addDays(990);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1502L));
  }

  @Test(timeout = 4000)
  @Ignore
  public void test42()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.addMonths(0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MutablePeriod mutablePeriod1 = new MutablePeriod(mutablePeriod0);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
      mutablePeriod0.setMinutes(0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2970L), 851L);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      mutablePeriod0.add(durationFieldType0, 0);
      assertEquals("weekyears", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      mutablePeriod0.setMillis((-1926));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-334L), (-1502L));
      Duration duration0 = Duration.standardSeconds((-1502L));
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals((-1502L), duration0.getStandardSeconds());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:05:20 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      JSType.safeResolve((JSType) null, simpleErrorReporter0, errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "k[OuG6 liG3[lR");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "jmH$Tk");
      errorFunctionType0.setPrototypeBasedOn(enumElementType0);
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = JSType.getLeastSupertype((JSType) enumElementType0, (JSType) errorFunctionType1);
      JSType.safeResolve(jSType0, simpleErrorReporter0, errorFunctionType1);
      assertTrue(errorFunctionType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderEquality(noResolvedType0);
      JSType.getGreatestSubtype((JSType) noResolvedType0, jSType_TypePair0.typeA);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(allType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(instanceObjectType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      instanceObjectType0.isSubtype(jSType_TypePair0.typeB);
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.differsFrom(noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = noResolvedType0.differsFrom(unknownType0);
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isAllType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9s<dEdbidtxB(A");
      boolean boolean0 = errorFunctionType0.differsFrom(errorFunctionType0);
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a type name", "", 1, 0);
      boolean boolean0 = namedType0.differsFrom(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
      jSType0.getTypesUnderShallowInequality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.getTypesUnderShallowInequality(nullType0);
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderInequality(voidType0);
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.getTypesUnderInequality(voidType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
      noResolvedType0.getTypesUnderInequality(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.getTypesUnderEquality(voidType0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
      noResolvedType0.getTypesUnderEquality(jSType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      JSType.getLeastSupertype((JSType) instanceObjectType0, (JSType) noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "S;I1y");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) errorFunctionType0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      JSType jSType1 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSType1.getGreatestSubtype(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "", (Node) null, noResolvedType0);
      JSType.getGreatestSubtype((JSType) enumType0, (JSType) indexedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(enumType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "k[OuG6 liG3[lR");
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) unknownType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      instanceObjectType0.getTypesUnderShallowEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9s<dEdbidtxB(A");
      errorFunctionType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
      noResolvedType0.defineInferredProperty("", jSType0, (Node) null);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      JSType jSType0 = errorFunctionType0.getLeastSupertype(errorFunctionType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(voidType0);
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = noType0.canTestForShallowEqualityWith(voidType0);
      assertFalse(voidType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertTrue(boolean0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "S;I1y");
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) errorFunctionType0);
      voidType0.testForEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9s<dEdbidtxB(A");
      JSType jSType0 = jSTypeRegistry0.createNullableType(errorFunctionType0);
      errorFunctionType0.testForEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoType noType0 = new NoType(jSTypeRegistry0);
      noType0.testForEqualityHelper(noType0, noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "\n\nSubtree1: ");
      noType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderEquality(voidType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderEquality(noType0);
      jSType_TypePair0.typeB.testForEqualityHelper(allType0, noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      noResolvedType0.getTypesUnderEquality(allType0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autobox();
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      
      boolean boolean0 = jSType0.canAssignTo(noResolvedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      // Undeclared exception!
      try { 
        booleanType0.findPropertyType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = voidType0.equals(noResolvedType0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.equals(jSTypeRegistry0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) voidType0);
      boolean boolean0 = JSType.isEquivalent((JSType) null, parameterizedType0);
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(voidType0, voidType0);
      assertFalse(voidType0.isResolved());
      assertTrue(boolean0);
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, noResolvedType0);
      boolean boolean0 = parameterizedType0.isEquivalentTo(noResolvedType0);
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "OBJECT_NUMBER_STRING_BOOLEAN");
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      errorFunctionType0.setSource(node0);
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNominalConstructor();
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "OBJECT_NUMBER_STRING_BOOLEAN");
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.hasAnyTemplateInternal();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.toMaybeTemplateType((JSType) noResolvedType0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(recordType0);
      assertTrue(recordType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "");
      boolean boolean0 = booleanType0.canTestForEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isGlobalThisType();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "S;I1>");
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(functionType0);
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.canTestForShallowEqualityWith(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      voidType0.testForEquality(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "\n\nSubtree1: ");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      boolean boolean0 = errorFunctionType0.hasDisplayName();
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.toStringHelper(false);
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.clearResolved();
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      instanceObjectType0.forceResolve((ErrorReporter) null, noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = allType0.getTypesUnderEquality(allType0);
      boolean boolean0 = jSType_TypePair0.typeA.isNumberValueType();
      assertFalse(allType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isEnumType();
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      booleanType0.matchConstraint(errorFunctionType0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(booleanType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesNumberContext();
      assertFalse(allType0.isNoType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.matchesUint32Context();
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9s<dEdb:dtxB(A");
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      objectType0.testForEquality(errorFunctionType0);
      assertTrue(objectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderEquality(noResolvedType0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, jSType_TypePair0.typeA);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      boolean boolean0 = recordType0.isInstanceType();
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(recordType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.matchesInt32Context();
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      assertFalse(instanceObjectType0.isEnumElementType());
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderShallowEquality(instanceObjectType0);
      boolean boolean0 = jSType_TypePair0.typeB.isNamedType();
      assertFalse(boolean0);
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ObjectType objectType0 = voidType0.dereference();
      assertFalse(objectType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertNotNull(objectType0);
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "", 2147483645, 742);
      boolean boolean0 = namedType0.isOrdinaryFunction();
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isAllType());
      assertFalse(boolean0);
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      boolean boolean0 = noResolvedType0.isNumber();
      assertTrue(boolean0);
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
      boolean boolean0 = jSType0.hasDisplayName();
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Unknown class name");
      boolean boolean0 = enumElementType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isBooleanValueType();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isAllType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      booleanType0.setValidator(predicate0);
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isNominalConstructor();
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isNoType());
      assertFalse(boolean0);
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isInterface());
      assertFalse(booleanType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9s<dEdbidtxB(A");
      Node node0 = Node.newString("9s<dEdbidtxB(A");
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "9s<dEdbidtxB(A");
      JSType jSType0 = unresolvedTypeExpression0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      boolean boolean0 = errorFunctionType0.canTestForEqualityWith(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.unboxesTo();
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "com.google.common.collect.Iterators$7");
      boolean boolean0 = enumElementType0.isNullable();
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isParameterizedType();
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(boolean0);
      assertFalse(booleanType0.isAllType());
      assertFalse(booleanType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("\"732GA )=:mYTA/9", (Node) null, (ObjectType) unknownType0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      JSType.TypePair jSType_TypePair0 = objectType0.getTypesUnderInequality(arrowType0);
      boolean boolean0 = jSType_TypePair0.typeB.matchesObjectContext();
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(arrowType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      String string0 = noResolvedType0.toAnnotationString();
      assertFalse(noResolvedType0.isResolved());
      assertEquals("?", string0);
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(voidType0);
      voidType0.getTypesUnderShallowInequality(jSType0);
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(voidType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isString();
      assertFalse(boolean0);
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.collapseUnion();
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test90()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      String string0 = voidType0.toDebugHashCodeString();
      assertFalse(voidType0.isResolved());
      assertEquals("{262}", string0);
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.getJSDocInfo();
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      voidType0.findPropertyType("");
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, errorFunctionType0, "com.google.common.collect.Iterators$7");
      boolean boolean0 = enumElementType0.matchesStringContext();
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.isStringValueType();
      assertFalse(noObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isResolved();
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(voidType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      errorFunctionType0.getTypesUnderEquality(voidType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }
}

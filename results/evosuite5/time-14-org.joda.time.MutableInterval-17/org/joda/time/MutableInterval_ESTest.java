/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:27:20 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, dateTime0);
      Duration duration0 = new Duration(dateMidnight0, dateTime0);
      Hours hours0 = duration0.toStandardHours();
      mutableInterval0.setPeriodBeforeEnd(hours0);
      assertEquals(1392333681320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals((-12219292803000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      mutableInterval0.setPeriodAfterStart(seconds0);
      assertEquals((-12219292800000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime((Chronology) gJChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      mutableInterval0.setInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals((-12219292800000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      Interval interval0 = new Interval(instant0, (ReadableInstant) null);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, dateTime0);
      mutableInterval0.setEnd(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      Duration duration0 = Duration.millis(0L);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardMinutes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Months months0 = Months.FOUR;
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, months0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      Duration duration0 = Duration.parse((String) null);
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      Duration duration0 = new Duration(dateMidnight0, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, dateTime0);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3313L), (-3313L));
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableInterval0.setStart(mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, dateTime0);
      mutableInterval0.setDurationBeforeEnd(1975L);
      assertEquals(1392409279345L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableDuration) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, (Chronology) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableInterval mutableInterval0 = new MutableInterval(seconds0, instant0);
      mutableInterval0.setDurationAfterStart(108L);
      assertEquals((-12219292802892L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2365L, 2365L);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertEquals(2365L, mutableInterval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      MutableInterval mutableInterval0 = new MutableInterval(dateMidnight0, dateTime0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertNotSame(mutableInterval0, mutableInterval1);
  }
}

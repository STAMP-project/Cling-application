/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 15:05:09 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.InterpretedFunction;
import com.google.javascript.rhino.head.InterpreterData;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.TopLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Interpreter_ESTest extends Interpreter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      byte[] byteArray0 = new byte[10];
      byteArray0[3] = (byte) (-63);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      Context context0 = Context.getContext();
      ContextFactory contextFactory0 = context0.getFactory();
      contextFactory0.enterContext();
      TopLevel topLevel0 = new TopLevel();
      NativeWith nativeWith0 = new NativeWith(topLevel0, topLevel0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(12, "language version", "error reporter", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-46);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-27);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte) (-39);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(110, "language version", "error reporter", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-38);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(12, "language version", "error reporter", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-62);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context.enter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) nativeContinuation0;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)72;
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData(2, "", "5$", true);
      InterpreterData interpreterData1 = new InterpreterData(interpreterData0);
      InterpreterData interpreterData2 = interpreterData1.parentData;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      InterpreterData interpreterData0 = new InterpreterData(1251, "q", "q", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-21);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      context0.previousInterpreterInvocations = null;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Context.getCurrentContext();
      InterpreterData interpreterData0 = new InterpreterData((-1340), "language version", "error reporter", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-9);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData((-1340), "language version", "error reporter", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)1;
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Context context0 = Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-47);
      context0.instructionThreshold = 52;
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context.enter();
      InterpretedFunction interpretedFunction0 = null;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterpreterData interpreterData0 = new InterpreterData((-10), "S;u#\" MT%6&F7", (String) null, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(12, "language version", "error reporter", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-74);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Context.enter();
      InterpreterData interpreterData0 = new InterpreterData(180, "language version", "language version", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-61);
      interpreterData0.itsICode = byteArray0;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Context context0 = new Context();
      InterpreterData interpreterData0 = new InterpreterData(110, "language version", "error reporter", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-7);
      interpreterData0.itsICode = byteArray0;
  }
}

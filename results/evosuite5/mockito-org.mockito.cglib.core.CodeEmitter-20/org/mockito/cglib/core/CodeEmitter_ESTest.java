/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 14:06:49 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodAdapter;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.Block;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.Local;
import org.mockito.cglib.core.MethodInfo;
import org.mockito.cglib.core.ProcessSwitchCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CodeEmitter_ESTest extends CodeEmitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-2551), signature0, typeArray0);
      codeEmitter0.end_method();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 170, signature0, typeArray0);
      Type type1 = Type.VOID_TYPE;
      codeEmitter0.unbox_or_zero(type1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$cSYt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$cSYt;r`", "^]$cSYt;r`", "^]$cSYt;r`", stringArray0);
      Type type0 = Type.getType("^]$cSYt;r`");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$cSYt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.unbox_or_zero(type0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g^]$c3SYtyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "g^]$c3SYtyV;r`", "g^]$c3SYtyV;r`", "g^]$c3SYtyV;r`", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("g^]$c3SYtyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.CHAR_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(164);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(164, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 164, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtHHyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3SYtHHyV;r`", "^]$c3SYtHHyV;r`", "^]$c3SYtHHyV;r`", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtHHyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.unbox(type1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.unbox(type1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.unbox(type0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-404));
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-404), "org.mockito.cglib.core.CodeEmitter", "org.mockito.cglib.core.CodeEmitter", "rhMx9", (String[]) null);
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("org.mockito.cglib.core.CodeEmitter", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.unbox(type0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[1] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[2] = "^]$c3S=Yt;r`";
      stringArray0[3] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("n`1", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2989, signature0, typeArray0);
      codeEmitter0.unbox(type0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.CHAR_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      codeEmitter0.unbox(type0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.unbox(type0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.unbox(type0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "531~)";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "531~)", "531~)", "531~)", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("531~)", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.box(type0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtHHyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3SYtHHyV;r`", "^]$c3SYtHHyV;r`", "^]$c3SYtHHyV;r`", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtHHyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.box(type0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.getObjectType("uw+EGyr\"<_");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.box(type0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "longValue";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "longValue", "longValue", "longValue", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("longValue", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.push(true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r`5o";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "r`5o", "r`5o", "r`5o", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("r`5o", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.push(false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[1] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[2] = "^]$c3S=Yt;r`";
      stringArray0[3] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("n`1", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2989, signature0, typeArray0);
      int[] intArray0 = new int[4];
      intArray0[3] = 33;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      int[] intArray0 = new int[2];
      intArray0[1] = 154;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$rc3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$rc3S=Yt;r`", "^]$rc3S=Yt;r`", "^]$rc3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$rc3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 153;
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codeEmitter0.process_switch(intArray0, processSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keys to switch must be sorted ascending
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[2] = "^]$c3S=Yt;r`";
      stringArray0[3] = ">Ct/&e<}=gf[X}~";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "", "", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("n`1", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2989, signature0, typeArray0);
      int[] intArray0 = new int[0];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      int[] intArray0 = new int[2];
      ProcessSwitchCallback processSwitchCallback0 = mock(ProcessSwitchCallback.class, new ViolatedAssumptionAnswer());
      codeEmitter0.process_switch(intArray0, processSwitchCallback0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "boolean booleanValue()", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", (String[]) null);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Class<Object> class0 = Object.class;
      Type type1 = Type.getType(class0);
      typeArray0[2] = type1;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      typeArray0[7] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 185, signature0, typeArray0);
      codeEmitter0.unbox(type1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_args(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "on.Vlu";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "on.Vlu", "on.Vlu", "on.Vlu", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("on.Vlu", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.load_args();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.load_this();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no 'this' pointer within static method
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.load_this();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockito.asm.MethodWriter";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "org.mockito.asm.MethodWriter", "org.mockito.asm.MethodWriter", "org.mockito.asm.MethodWriter", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("org.mockito.asm.MethodWriter", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      codeEmitter0.newarray(type0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r`5o";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "r`5o", "r`5o", "r`5o", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("r`5o", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.push((double) 1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push((double) 9);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "531~)";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "531~)", "531~)", "531~)", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("531~)", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 170, signature0, typeArray0);
      codeEmitter0.push((float) 2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "u", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push((float) 6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.push((float) 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[1] = "6S|=*;BfN";
      stringArray0[2] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "^]$c3S=Yt;r`", (String) null, stringArray0);
      MethodAdapter methodAdapter0 = new MethodAdapter(methodVisitor0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodAdapter0, 1073741824, signature0, typeArray0);
      codeEmitter0.push(1L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g^]$c3SYtyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "g^]$c3SYtyV;r`", "g^]$c3SYtyV;r`", "g^]$c3SYtyV;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("g^]$c3SYtyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.push(1520L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("%<)ZuyTP4_.b", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 184, signature0, typeArray0);
      codeEmitter0.aaload(16777249);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.aaload(160);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "boolean booleanValue()", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", (String[]) null);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = typeArray0[1];
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      typeArray0[7] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 185, signature0, typeArray0);
      codeEmitter0.aaload((-1910));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Type type1 = Type.SHORT_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Type type1 = Type.FLOAT_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f;*";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "f;*", "f;*", "f;*", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("f;*", type0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 6, signature0, typeArray0);
      codeEmitter0.cast_numeric(type0, type1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.mockito.asm.MethodWriter";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "org.mockito.asm.MethodWriter", "org.mockito.asm.MethodWriter", "org.mockito.asm.MethodWriter", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("org.mockito.asm.MethodWriter", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Type type1 = Type.CHAR_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(152);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "on.Vlu";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(152, "on.Vlu", "on.Vlu", "on.Vlu", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("on.Vlu", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 152, signature0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(156);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(156, "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Type type1 = Type.LONG_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = typeArray0[1];
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("/;7Q3FWd'u~^w:fDuH-", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 8, signature0, typeArray0);
      Type type1 = Type.FLOAT_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      codeEmitter0.cast_numeric(type0, type1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Type type1 = Type.FLOAT_TYPE;
      codeEmitter0.cast_numeric(type1, type0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      Type type1 = Type.DOUBLE_TYPE;
      Type type2 = Type.LONG_TYPE;
      codeEmitter0.cast_numeric(type1, type2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", type0, typeArray0);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, (Type[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Type type1 = Type.DOUBLE_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertFalse(type1.equals((Object)type0));
      assertEquals(8, type1.getSort());
      assertEquals(2, type1.getSize());
      assertNotSame(type1, type0);
      assertNotNull(type1);
      
      codeEmitter0.cast_numeric(type1, type0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(8, type1.getSort());
      assertEquals(2, type1.getSize());
      assertNotSame(type0, type1);
      assertNotSame(type1, type0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$cSYt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "^]$cSYt;r`", "^]$cSYt;r`", "^]$cSYt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.LONG_TYPE;
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("C", type0, typeArray0);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()J", signature0.getDescriptor());
      assertEquals("C", signature0.getName());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1058, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()J", signature0.getDescriptor());
      assertEquals("C", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Type type1 = Type.DOUBLE_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertFalse(type1.equals((Object)type0));
      assertEquals(2, type1.getSize());
      assertEquals(8, type1.getSort());
      assertNotSame(type1, type0);
      assertNotNull(type1);
      
      codeEmitter0.cast_numeric(type0, type1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()J", signature0.getDescriptor());
      assertEquals("C", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(2, type1.getSize());
      assertEquals(8, type1.getSort());
      assertNotSame(type0, type1);
      assertNotSame(type1, type0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      codeEmitter0.cast_numeric(type0, type0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "u", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.LONG_TYPE;
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(2, Type.CHAR);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(2, Type.CHAR);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(J)J", signature0.getDescriptor());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(2, Type.CHAR);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(J)J", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Type type1 = Type.INT_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertFalse(type1.equals((Object)type0));
      assertEquals(5, type1.getSort());
      assertEquals(1, type1.getSize());
      assertNotSame(type1, type0);
      assertNotNull(type1);
      
      codeEmitter0.swap(type1, type0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(2, Type.CHAR);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(J)J", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(5, type1.getSort());
      assertEquals(1, type1.getSize());
      assertNotSame(type0, type1);
      assertNotSame(type1, type0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "^]$c3S=Yt;r`", "booleanValue", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      MethodAdapter methodAdapter0 = new MethodAdapter(methodVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodAdapter0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(ZZZ)Z", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertEquals(3, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodAdapter0, 1238, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(ZZZ)Z", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(3, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Type type1 = Type.LONG_TYPE;
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertFalse(type1.equals((Object)type0));
      assertEquals(7, type1.getSort());
      assertEquals(2, type1.getSize());
      assertNotSame(type1, type0);
      assertNotNull(type1);
      
      codeEmitter0.swap(type1, typeArray0[1]);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertFalse(type0.equals((Object)type1));
      assertFalse(type1.equals((Object)type0));
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(ZZZ)Z", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(7, type1.getSort());
      assertEquals(2, type1.getSize());
      assertNotSame(type0, type1);
      assertNotSame(type1, type0);
      assertEquals(1, stringArray0.length);
      assertEquals(3, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "longValue";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "longValue", "longValue", "longValue", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("longValue", type0, typeArray0);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("longValue", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("longValue", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      codeEmitter0.swap(type0, type0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("longValue", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.mark();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 158, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 157, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 155, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 154, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(ZZZZZ)Z", signature0.getDescriptor());
      assertEquals(5, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1040, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(ZZZZZ)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(5, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(ZZZZZ)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(5, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 153, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("(ZZZZZ)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(5, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "u", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.getObjectType("u");
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 154, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertEquals("u", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "u", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.getObjectType("u");
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 153, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("u", signature0.getName());
      assertEquals("(Lu;)Lu;", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "int intValue()", "i'x@B\":d}9", "i'x@B\":d}9", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.getType("[,X/X-S$\"uY0f1:");
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("bC{%pJ6,a", type0, typeArray0);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, type0.getSize());
      assertEquals("bC{%pJ6,a", signature0.getName());
      assertEquals("([,[,[,[,[,[,[,)[,", signature0.getDescriptor());
      assertEquals(7, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 6, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(9, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, type0.getSize());
      assertEquals("bC{%pJ6,a", signature0.getName());
      assertEquals("([,[,[,[,[,[,[,)[,", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(7, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(9, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, type0.getSize());
      assertEquals("bC{%pJ6,a", signature0.getName());
      assertEquals("([,[,[,[,[,[,[,)[,", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(7, typeArray0.length);
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        codeEmitter0.if_cmp(type0, 364, label0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad comparison for type [,
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "531~)";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "531~)", "531~)", "531~)", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("531~)", type0, typeArray0);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()D", signature0.getDescriptor());
      assertEquals("531~)", signature0.getName());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 176, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()D", signature0.getDescriptor());
      assertEquals("531~)", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()D", signature0.getDescriptor());
      assertEquals("531~)", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 4, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("()D", signature0.getDescriptor());
      assertEquals("531~)", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$cSYt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "^]$cSYt;r`", "^]$cSYt;r`", "^]$cSYt;r`", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.LONG_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("C", type0, typeArray0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("C", signature0.getName());
      assertEquals("()J", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1058, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("C", signature0.getName());
      assertEquals("()J", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("C", signature0.getName());
      assertEquals("()J", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 4, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(4, Type.SHORT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(7, type0.getSort());
      assertEquals(2, type0.getSize());
      assertEquals("C", signature0.getName());
      assertEquals("()J", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", type0, typeArray0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.mark();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 158, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      Type type0 = Type.SHORT_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("y{[svXG:fa~", type0, typeArray0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals("y{[svXG:fa~", signature0.getName());
      assertEquals("()S", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1263, "aaOuO WSu}Dal.4", "\" has been declared differently", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1263, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals("y{[svXG:fa~", signature0.getName());
      assertEquals("()S", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Label label0 = codeEmitter0.make_label();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals("y{[svXG:fa~", signature0.getName());
      assertEquals("()S", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(label0);
      
      codeEmitter0.if_cmp(type0, 156, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(1, type0.getSize());
      assertEquals(4, type0.getSort());
      assertEquals("y{[svXG:fa~", signature0.getName());
      assertEquals("()S", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "i~", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("i~", type0, typeArray0);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("i~", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("i~", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Block block0 = new Block(codeEmitter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("i~", signature0.getName());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(block0);
      
      // Undeclared exception!
      try { 
        codeEmitter0.catch_exception(block0, typeArray0[0]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // end of block is unset
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals(1, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Block block0 = new Block(codeEmitter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      assertNotNull(block0);
      
      block0.end();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("(Z)Z", signature0.getDescriptor());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(1, typeArray0.length);
      
      // Undeclared exception!
      try { 
        codeEmitter0.catch_exception(block0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(196);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r`5o";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(196, "r`5o", "r`5o", "r`5o", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("r`5o", type0, typeArray0);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("r`5o", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("r`5o", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      codeEmitter0.end_method();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("r`5o", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("uw+EGyr\"<_", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("uw+EGyr\"<_", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      Local local0 = codeEmitter0.make_local();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("uw+EGyr\"<_", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(0, local0.getIndex());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(local0);
      
      codeEmitter0.load_local(local0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(7, Type.LONG);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(6, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("uw+EGyr\"<_", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(0, local0.getIndex());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.FLOAT_TYPE;
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", type0, typeArray0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(1, type0.getSize());
      assertEquals(6, type0.getSort());
      assertEquals("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", signature0.getName());
      assertEquals("()F", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      // Undeclared exception!
      try { 
        codeEmitter0.putstatic(type0, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f;*";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "f;*", "f;*", "f;*", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("f;*", type0, typeArray0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("f;*", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      assertEquals("f;*", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      // Undeclared exception!
      try { 
        codeEmitter0.instance_of(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(176);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f;*";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "f;*", "f;*", "f;*", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("f;*", type0, typeArray0);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("f;*", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("f;*", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      codeEmitter0.monitorenter();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(6, Type.FLOAT);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("f;*", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      assertNotNull(classEmitter0);
      
      ClassWriter classWriter0 = new ClassWriter(160);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, stringArray0.length);
      assertNotNull(methodVisitor0);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertEquals(0, typeArray0.length);
      assertNotNull(signature0);
      
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(126, CodeEmitter.AND);
      assertEquals(128, CodeEmitter.OR);
      assertEquals(104, CodeEmitter.MUL);
      assertEquals(155, CodeEmitter.LT);
      assertEquals(153, CodeEmitter.EQ);
      assertEquals(124, CodeEmitter.USHR);
      assertEquals(112, CodeEmitter.REM);
      assertEquals(100, CodeEmitter.SUB);
      assertEquals(157, CodeEmitter.GT);
      assertEquals(116, CodeEmitter.NEG);
      assertEquals(154, CodeEmitter.NE);
      assertEquals(96, CodeEmitter.ADD);
      assertEquals(108, CodeEmitter.DIV);
      assertEquals(156, CodeEmitter.GE);
      assertEquals(130, CodeEmitter.XOR);
      assertEquals(158, CodeEmitter.LE);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      assertEquals("^]$c3S=Yt;r`", signature0.getName());
      assertEquals("()Z", signature0.getDescriptor());
      assertFalse(codeEmitter0.isStaticHook());
      assertEquals(1, stringArray0.length);
      assertEquals(0, typeArray0.length);
      assertNotNull(codeEmitter0);
      
      // Undeclared exception!
      try { 
        codeEmitter0.getfield(type0, "^]$c3S=Yt;r`", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[2] = "TmK4S";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(125, "", "", "TmK4S", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 5, signature0, typeArray0);
      ClassEmitter classEmitter1 = codeEmitter0.getClassEmitter();
      assertSame(classEmitter0, classEmitter1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f;*";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "f;*", "f;*", "f;*", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("f;*", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_constructor_this();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U *";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "U *", "U *", "U *", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("U *", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_getstatic("U *", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_static_this(signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "531~)";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "531~)", "531~)", "531~)", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("531~)", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_interface(type0, signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", "^]$c3SYtyV;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.new_instance_this();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.getReturnType("^]$c3S=Yt;r`");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.array_load(type0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(164);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(164, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 164, signature0, typeArray0);
      codeEmitter0.return_value();
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$rc3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$rc3S=Yt;r`", "^]$rc3S=Yt;r`", "^]$rc3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$rc3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      assertNotNull(block0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(188);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(188, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_static(type0, signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_constructor(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_invoke_constructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.getstatic(type0, "uw+EGyr\"<_", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = typeArray0[1];
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("/;7Q3FWd'u~^w:fDuH-", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 8, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_putfield("^]$c3S=Yt;r`", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3SYtHHyV;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3SYtHHyV;r`", "^]$c3SYtHHyV;r`", "^]$c3SYtHHyV;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3SYtHHyV;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.not();
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%uw+E!yr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "%uw+E!yr\"<_", "%uw+E!yr\"<_", "%uw+E!yr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("%uw+E!yr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Type type1 = codeEmitter0.getReturnType();
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$rc3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$rc3S=Yt;r`", "^]$rc3S=Yt;r`", "^]$rc3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$rc3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      Local local0 = codeEmitter0.make_local(type0);
      codeEmitter0.store_local(local0);
      assertEquals(124, CodeEmitter.USHR);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDC&FFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_invoke_constructor(signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 9, signature0, typeArray0);
      Label label0 = codeEmitter0.mark();
      codeEmitter0.ifnull(label0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_invoke();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "longValue";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "longValue", "longValue", "longValue", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("longValue", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      codeEmitter0.create_arg_array();
      assertEquals(108, CodeEmitter.DIV);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3#Mwakr#m`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "3#Mwakr#m`", "3#Mwakr#m`", "3#Mwakr#m`", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("3#Mwakr#m`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.dup2();
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yty;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yty;r`", "^]$c3S=Yty;r`", "^]$c3S=Yty;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("^]$c3S=Yty;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_constructor_this(signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(188);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(188, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Label label0 = new Label();
      codeEmitter0.if_icmp(8, label0);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r`5o";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "r`5o", "r`5o", "r`5o", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("r`5o", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.aaload(9);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.invoke_virtual_this(signature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.instance_of_this();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_putstatic("/w_yH5+U+7{n*0EkQN", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$cSYt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$cSYt;r`", "^]$cSYt;r`", "^]$cSYt;r`", stringArray0);
      Type type0 = Type.getType("^]$cSYt;r`");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$cSYt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      Type type1 = Type.INT_TYPE;
      codeEmitter0.unbox_or_zero(type1);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      MethodInfo methodInfo0 = codeEmitter0.getMethodInfo();
      // Undeclared exception!
      try { 
        codeEmitter0.invoke(methodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "u", stringArray0);
      Type type0 = Type.getObjectType("u");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      CodeEmitter codeEmitter1 = new CodeEmitter(codeEmitter0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=0m?)j~H";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "=0m?)j~H", "=0m?)j~H", "=0m?)j~H", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("=0m?)j~H", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.super_getfield("=0m?)j~H", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$cSYt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$cSYt;r`", "^]$cSYt;r`", "^]$cSYt;r`", stringArray0);
      Type type0 = Type.getType("^]$cSYt;r`");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$cSYt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 160, signature0, typeArray0);
      Local local0 = codeEmitter0.make_local();
      codeEmitter0.iinc(local0, 1);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "531~)";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "531~)", "531~)", "531~)", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("531~)", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.checkcast_this();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      // Undeclared exception!
      try { 
        codeEmitter0.putfield(type0, "uw+EGyr\"<_", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("^]$c3S=Yt;r`", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 422, signature0, typeArray0);
      Signature signature1 = codeEmitter0.getSignature();
      assertEquals("^]$c3S=Yt;r`", signature1.getName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.getObjectType("uw+EGyr\"<_");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.zero_or_null(type0);
      assertEquals(7, Type.LONG);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^]$c3S=Yt;r`";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", "^]$c3S=Yt;r`", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = typeArray0[1];
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      Signature signature0 = new Signature("/;7Q3FWd'u~^w:fDuH-", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 8, signature0, typeArray0);
      codeEmitter0.monitorexit();
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      stringArray0[2] = "";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-4166), "<init>", "", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = type0;
      typeArray0[7] = type0;
      Signature signature0 = new Signature("Y}'", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-4166), signature0, typeArray0);
      boolean boolean0 = codeEmitter0.isStaticHook();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r`5o";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "r`5o", "r`5o", "r`5o", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("r`5o", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      codeEmitter0.array_store(type0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(176);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f;i*";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(176, "f;i*", "f;i*", "f;i*", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("f;i*", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.arraylength();
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(188);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uw+EGyr\"<_";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(188, "uw+EGyr\"<_", "uw+EGyr\"<_", "uw+EGyr\"<_", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("uw+EGyr\"<_", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      codeEmitter0.swap(type0, type0);
      assertEquals(156, CodeEmitter.GE);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(160);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(160, "^]$c3S=Yt;r`", "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "u", stringArray0);
      Type type0 = Type.getObjectType("u");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("u", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      codeEmitter0.throw_exception(type0, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE");
      assertEquals(10, Type.OBJECT);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 17:17:15 GMT 2019
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CodingConventions;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ConvertToDottedProperties;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeFoldWithTypes;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.PeepholeSimplifyRegExp;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.Callable;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      Node node2 = new Node(1073741823, 44, 16);
      NodeUtil.isSimpleOperatorType(38);
      NodeUtil.getStringValue(node1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.precedence(90);
      Node node0 = new Node(26, 3610, 90);
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.parseTestCode("LK8");
      node0.setWasEmptyNode(false);
      NodeUtil.isImmutableValue(node1);
      NodeUtil.isAssociative(15);
      NodeUtil.isGetOrSetKey(node0);
      Compiler compiler1 = new Compiler();
      NodeUtil.isNameReferenced(node1, "LK8");
      NodeUtil.isPrototypePropertyDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(119);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1297);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1297
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString(1960, "infinity");
      Node node1 = new Node(30, node0);
      node0.useSourceInfoFromForTree(node1);
      NodeUtil.evaluatesToLocalValue(node1);
      Compiler compiler0 = new Compiler();
      Node.newString(48, "infinity");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(20);
      NodeUtil.opToStr(64);
      Integer integer0 = new Integer((-1352));
      Integer integer1 = new Integer(25);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(2260);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(200);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = new Node(40, node0, node0);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      node2.getJSType();
      Node node3 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.isNullOrUndefined(node1);
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.getPureBooleanValue(node3);
      NodeUtil.getBestLValueOwner(node0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(38);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Object object0 = new Object();
      Node node1 = new Node(4095);
      Node node2 = new Node(45);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeUtil.precedence(40);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("_yERJR9qW");
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.isControlStructure(node0);
      NodeUtil.mayEffectMutableState(node0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isStrWhiteSpaceChar((-1215));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(71);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 71
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2926, "y3 }k=mA)");
      Node node1 = new Node(48, node0);
      node1.useSourceInfoFromForTree(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.isWithinLoop(node0);
      Node node2 = new Node(4);
      NodeUtil.isSymmetricOperation(node2);
      NodeUtil.mayBeStringHelper(node1);
      NodeUtil.isSimpleOperatorType(44);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0, compiler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got CATCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.opToStr(49);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(138, 138, 138);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = new Node(113, node0, node0);
      Node node2 = NodeUtil.newUndefinedNode(node1);
      node1.getJSType();
      NodeUtil.isLatin("Unknown class name");
      Compiler compiler0 = new Compiler();
      ControlFlowAnalysis.computeFallThrough(node2);
      NodeUtil.isCommutative(3454);
      NodeUtil.isControlStructureCodeBlock(node1, node1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(105);
      NodeUtil.getStringValue(884.087);
      Node node1 = Node.newString(146, "split");
      NodeUtil.mayEffectMutableState(node1);
      Compiler compiler0 = new Compiler();
      Node.newString(4, "884.087");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.isValidQualifiedName("JSCompiler_renameProperty");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isCommutative(105);
      Node node0 = new Node(104);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node.newString("goog.tweak.getString");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 104
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NodeUtil.opToStr(90);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "<<=");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node1.getJSType();
      Node node2 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      compiler0.getState();
      Node.newString(4, "<<=");
      NodeUtil.isExprCall(node2);
      NodeUtil.precedence(24);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node(23, (-525), 13);
      Node node1 = new Node(54, node0, node0);
      node1.setSourceEncodedPositionForTree(64336);
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.isConstantName(node1);
      Node node2 = new Node((-3303), node1, node1, 39, 127);
      Node node3 = ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.getRValueOfLValue(node3);
      // Undeclared exception!
      try { 
        NodeUtil.arrayToString((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "[object Object]";
      Node node0 = new Node((-2165), (-2165), (-2165));
      Node node1 = new Node(92, (-5140), 2721);
      NodeUtil.newUndefinedNode(node0);
      node0.setSourceEncodedPositionForTree(36);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NodeUtil.isCommutative(77);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      ReorderConstantExpression reorderConstantExpression1 = new ReorderConstantExpression();
      NodeUtil.opToStr(41);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newString(99, "(");
      Node node1 = new Node(0, 30, 15);
      ControlFlowAnalysis.getCatchHandlerForBlock(node1);
      NodeUtil.precedence(52);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(16);
      NodeUtil.getCount(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.isValidPropertyName("JSCompiler_renameProperty");
      NodeUtil.isSimpleOperatorType(97);
      NodeUtil.opToStr(97);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "Y;yae/");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.getNumberValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 8303);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.trimJsWhiteSpace(" properties that were referenced from only one type.");
      Node node0 = new Node(109, 109, 255);
      Node node1 = new Node(4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(58);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 58
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 105: FUNCTION
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.opToStr(32);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1670);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1670
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NodeUtil.getInverseOperator((-3039));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) (-1799), 1180, (-1799));
      NodeUtil.newExpr(node0);
      Node.newNumber((double) 32, 147, 49);
      NodeUtil.getRValueOfLValue(node0);
      Node node1 = null;
      try {
        node1 = new Node(45, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node(96);
      NodeUtil.newUndefinedNode((Node) null);
      node0.setSourceEncodedPositionForTree(2);
      Node node1 = new Node(110, node0);
      NodeUtil.canBeSideEffected(node1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.newString(53, "mqZK!}dF!QR", 42, 54);
      NodeUtil.getOpFromAssignmentOp(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = null;
      NodeUtil.opToStr(91);
      Node.newString(48, ">>=");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NodeUtil.opToStr(56);
      Integer integer0 = new Integer(25);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NodeUtil.opToStr(56);
      NodeUtil.precedence(51);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(72);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Object object0 = new Object();
      Node node1 = new Node(54, node0, node0, node0, 4, 15);
      Node node2 = new Node(45);
      node2.removeChildren();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      NodeUtil.has(node2, nodeUtil_BooleanResultPredicate0, nodeUtil_NumbericResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "rpxIZ6O#");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.getJSType();
      Node node2 = NodeUtil.newUndefinedNode(node1);
      Compiler compiler1 = new Compiler();
      Node.newString("Not declared as a constructor");
      NodeUtil.getArrayElementStringValue(node2);
      NodeUtil.isSimpleFunctionObjectCall(node2);
      NodeUtil.isSwitchCase(node0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
      
      String string1 = NodeUtil.opToStr(67);
      assertNull(string1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      SyntheticAst syntheticAst0 = new SyntheticAst("@\"X");
      assertNotNull(syntheticAst0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NodeUtil.precedence(90);
      Node node0 = new Node(26, 3610, 90);
      node0.children();
      Node node1 = new Node(29, node0, node0);
      Node node2 = NodeUtil.numberNode(53.0, node0);
      NodeUtil.isWithinLoop(node2);
      NodeUtil.isSymmetricOperation(node0);
      NodeUtil.mayBeStringHelper(node0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = Node.newString(43, "0;yERJRW");
      Node node1 = new Node(35, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel0.apply(node0);
      node1.useSourceInfoFromForTree(node0);
      node0.getIntProp(958);
      NodeUtil.getStringNumberValue("0;yERJRW");
      Compiler compiler0 = new Compiler();
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.isBooleanResultHelper(node1);
      Integer integer0 = new Integer(101);
      NodeUtil.isFunctionDeclaration(node0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NodeUtil.isSimpleOperatorType((-1621));
      Node node0 = new Node((-1621));
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention1, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      NodeUtil.newUndefinedNode(node1);
      NodeUtil.opToStr(38);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(1730);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeUtil.isCommutative(77);
      Node node0 = new Node(68);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node.newString("goog.tweak.getString");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 68
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1615), nodeArray0);
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      NodeUtil.getArgumentForCallOrNew(node1, 36);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 99
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.trimJsWhiteSpace("");
      Node node0 = new Node(122);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      compiler0.getState();
      compiler0.getState();
      NodeUtil.isWithinLoop(node0);
      NodeUtil.isFunctionObjectCallOrApply(node0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "?XQ");
      node0.setString("?XQ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NodeUtil.getInputId(node0);
      NodeUtil.isStatementParent(node0);
      NodeUtil.getArrayElementStringValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 15);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NodeUtil.opToStr((-2753));
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node0 = new Node(85, (-2753), (-2753));
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      // Undeclared exception!
      try { 
        NodeUtil.getRValueOfLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node.newString(2982, "y3 }k=mA)");
      NodeUtil.isLatin("y3 }k=mA)");
      NodeUtil.precedence(16);
      NodeUtil.isCommutative(4095);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      int int0 = 146;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(146);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(144);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 144
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isAssignmentOp(node0);
      NodeUtil.isNullOrUndefined(node0);
      Node node2 = new Node(52, node1);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      peepholeFoldWithTypes0.mayHaveSideEffects(node2);
      Node node3 = Node.newString("MIN");
      NodeUtil.isSwitchCase(node3);
      NodeUtil.mayBeStringHelper(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VOID does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = NodeUtil.booleanNode(true);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.getNumberValue(node0);
      node0.siblings();
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("D,hMhb'|g&eR");
      Node node0 = new Node((-2154), 59, 1541);
      Node node1 = new Node(32);
      NodeUtil.evaluatesToLocalValue(node1);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(4095, nodeArray0, 8, 54);
      Node node3 = reorderConstantExpression0.optimizeSubtree(node2);
      Node node4 = new Node(130, node3, node1, node2, node1);
      NodeUtil.getImpureBooleanValue(node3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.opToStr(120);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(104);
      // Undeclared exception!
      try { 
        NodeUtil.getNearestFunctionName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.getStringValue(117);
      Node node0 = Node.newString(130, "JSCompiler_renameProperty");
      NodeUtil.mayEffectMutableState(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.opToStr(80);
      NodeUtil.isAssociative(2406);
      // Undeclared exception!
      try { 
        NodeUtil.isValidQualifiedName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("$Yjy8)", "$Yjy8)", 101, (-1120));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("&&");
      Node node1 = new Node(86, node0, node0, node0, node0, 536870912, 2090);
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.numberNode(195.4441548, node0);
      NodeUtil.isWithinLoop(node1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(2558);
      NodeUtil.precedence(15);
      NodeUtil.isSimpleFunctionObjectCall(node0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = Node.newString("_yERJR9qW");
      NodeUtil.isSimpleOperator(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(47, node0);
      NodeUtil.canBeSideEffected(node1);
      Node node2 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.evaluatesToLocalValue(node2);
      NodeUtil.getBestLValueOwner(node1);
      Node.newNumber(3281.31210299);
      Node node3 = new Node(1, node1);
      NodeUtil.numberNode(48, node1);
      NodeUtil.isWithinLoop(node1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeUtil.opToStr(122);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 80
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NodeUtil.precedence(93);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(81);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "eval");
      NodeUtil.isFunctionDeclaration(node0);
      node0.isSyntheticBlock();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isHoistedFunctionDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = new Node((-2447));
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 114);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(68);
      assertFalse(boolean0);
      
      Node node0 = new Node(98);
      NodeUtil.isSimpleOperator(node0);
      Node node1 = new Node(45, node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      peepholeFoldWithTypes0.mayHaveSideEffects(node1);
      Node node3 = NodeUtil.numberNode(4095, node2);
      Node node4 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      NodeUtil.isSimpleOperatorType(43);
      NodeUtil.isBooleanResultHelper(node4);
      NodeUtil.getNumberValue(node2);
      NodeUtil.isRelationalOperation(node3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = new Node(35);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel0.apply(node1);
      sourceMap_DetailLevel0.apply(node1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Compiler compiler0 = new Compiler();
      NodeUtil.isStrWhiteSpaceChar(52);
      NodeUtil.isHoistedFunctionDeclaration(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString((-4310), "@E}");
      NodeUtil.isConstantByConvention(googleCodingConvention0, node0, node0);
      NodeUtil.isFunctionDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSymmetricOperation(node0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = new Node(43);
      Node node3 = new Node(91);
      Node node4 = node1.removeChildren();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      NodeUtil.has(node4, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString((-1051), "4iRk");
      NodeUtil.precedence(37);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(444);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.getCount(node0, nodeUtil_MatchShallowStatement0, nodeUtil_MatchNodeType0);
      // Undeclared exception!
      try { 
        NodeUtil.isExecutedExactlyOnce(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(99, "(");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      Node node1 = new Node(29);
      node0.removeChildren();
      Node.newString("(");
      Node node2 = new Node(465, node1);
      NodeUtil.isWithinLoop(node2);
      NodeUtil.mayBeStringHelper(node1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(119);
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      // Undeclared exception!
      try { 
        ControlFlowAnalysis.getExceptionHandler((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ControlFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NodeUtil.precedence(9);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2270);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2270
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(107);
      NodeUtil.isValidPropertyName("a 9&z2>WX");
      NodeUtil.isAssociative(107);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getBestLValueOwner((Node) null);
      NodeUtil.isCommutative((-2597));
      NodeUtil.opToStr(109);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(20);
      NodeUtil.isSimpleOperatorType(52);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Compiler compiler0 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node0 = compiler1.parseSyntheticCode("c", "c");
      Node node1 = NodeUtil.numberNode(15, node0);
      node0.isEquivalentToTyped(node1);
      Node node2 = NodeUtil.numberNode(1858.9196, node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      nodeUtil_NumbericResultPredicate0.apply(node0);
      DiagnosticType diagnosticType0 = Compiler.OPTIMIZE_LOOP_ERROR;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "c";
      stringArray0[2] = "JSC_OPTIMIZE_LOOP_ERROR";
      stringArray0[3] = "JSC_OPTIMIZE_LOOP_ERROR";
      stringArray0[4] = "c";
      stringArray0[5] = "JSC_OPTIMIZE_LOOP_ERROR";
      JSError.make("c", 48, 50, diagnosticType0, stringArray0);
      node0.getIntProp(38);
      NodeUtil.getSourceName(node2);
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(49);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NodeUtil.getInverseOperator(16);
      NodeUtil.trimJsWhiteSpace("QK(/v");
      Node node0 = new Node(14);
      node0.isQualifiedName();
      Node.newString("", 51, 46);
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isSwitchCase(node0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(100);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(119);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      NodeUtil.precedence(100);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(98);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(52, "!q;T=z,xz+n");
      NodeUtil.evaluatesToLocalValue(node1);
      Compiler compiler1 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "_yERJR9qW");
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.canBeSideEffected(node0);
      Node.newNumber((double) 1);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.isSimpleFunctionObjectCall(node0);
      Integer integer0 = new Integer(144);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NodeUtil.getStringNumberValue("GrT[Hz(_QQ8X,K:`z");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.pollFirst();
      Node node0 = Node.newString("Named type with empty name component", 200, 200);
      Node node1 = new Node(35, node0, node0);
      node0.setSourceEncodedPositionForTree(770);
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.isConstantName(node1);
      NodeUtil.opToStr(84);
      NodeUtil.getBestJSDocInfo(node1);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node2 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      NodeUtil.isFunctionObjectCallOrApply(node2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NodeUtil.opToStr(43);
      Node node0 = new Node(6356);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.precedence(154);
      Node node1 = new Node(152, node0, node0, node0);
      NodeUtil.containsCall(node0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("0rWG0TQ .sA");
      NodeUtil.getNumberValue(node0);
      node0.children();
      Node node1 = new Node(2874, node0, node0);
      NodeUtil.getStringValue(node1);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(153);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for LABEL_NAME (type 153)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getNumberValue(node0);
      node0.siblings();
      Node.newString(53, "X");
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(77);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for TRY (type 77)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = Node.newString((-4310), "r{zc;'l'KNdFdf.O0");
      NodeUtil.isEmptyBlock(node0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(38);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Object object0 = new Object();
      Node node1 = new Node(4095);
      Node node2 = new Node(45);
      node2.removeChildren();
      Node node3 = new Node(2, node1);
      Node node4 = NodeUtil.numberNode(1229.1860067683, node0);
      NodeUtil.isWithinLoop(node3);
      NodeUtil.isSymmetricOperation(node2);
      NodeUtil.mayBeStringHelper(node3);
      NodeUtil.isBooleanResultHelper(node4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(86);
      Node node0 = new Node(86);
      NodeUtil.opToStr((-2245));
      NodeUtil.precedence(96);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1724));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1724
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NodeUtil.opToStr(117);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(105, 105, 105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(132);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for SCRIPT (type 132)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(75);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 75
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NodeUtil.getStringNumberValue("n|F(/\"");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 811, 811, 811);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      NodeUtil.isPrototypeProperty(node0);
      Node node1 = NodeUtil.newVarNode("undefined", node0);
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      NodeUtil.getNodeTypeReferenceCount(node1, 10, predicate0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NodeUtil.booleanNode(true);
      Node node0 = Node.newNumber((double) 15);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(0);
      NodeUtil.copyNameAnnotations(node0, node0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(86);
      Node node0 = new Node(86);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.precedence(42);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2926, "y3 }k=mA)");
      Node node1 = new Node(48, node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel0.apply(node1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.setOptionalArg(false);
      node1.getIntProp(29);
      NodeUtil.getStringNumberValue("i:");
      Compiler compiler0 = new Compiler();
      NodeUtil.mayEffectMutableState(node2, compiler0);
      NodeUtil.isBooleanResultHelper(node0);
      Integer integer0 = new Integer(44);
      NodeUtil.opToStr((-22));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NodeUtil.isCommutative(77);
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.isConstantName(node1);
      NodeUtil.newExpr(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      nodeUtil_NumbericResultPredicate0.equals(node1);
      NodeUtil.isWithinLoop(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      NodeUtil.containsFunction(node1);
      NodeUtil.getImpureBooleanValue(node2);
      NodeUtil.opToStr(53);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(80);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 80
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(32);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      NodeUtil.getBestLValueName((Node) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      Node node1 = new Node(48, node0);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      NodeUtil.opToStr(85);
      NodeUtil.precedence(85);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NodeUtil.precedence(41);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber((double) 87855567, (-2150), 87855567);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.precedence(44);
      Node node1 = Node.newString("Spb)pQq%Y&y.eff");
      NodeUtil.getArrayElementStringValue(node0);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.isSwitchCase(node1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
      assertNotNull(string0);
      
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
      
      int int1 = NodeUtil.precedence(92);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "$?_0j?Jg8Ya$q!", ",^TI`iw");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.mayBeString(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node2, 1022);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(105);
      node0.toString();
      NodeUtil.opToStr(16);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1359);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(45);
      Node.newString("DT");
      Node node1 = Node.newString(4095, "com/google/javascript/rhino/head/Script");
      NodeUtil.isPrototypeProperty(node1);
      NodeUtil.isSimpleOperatorType(34);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "JSCompiler_renameProperty");
      node0.putProp(90, closureCodingConvention0);
      NodeUtil.newUndefinedNode(node0);
      Node node1 = new Node(40);
      Node node2 = new Node(42);
      node1.removeChildren();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      NodeUtil.has(node2, nodeUtil_NumbericResultPredicate0, nodeUtil_BooleanResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node((-1681), (-1681), 274);
      NodeUtil.isObjectLitKey(node0, node0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.isSimpleOperatorType(114);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NodeUtil.opToStr(82);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("-infinity", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = Node.newString(75, "mVi=H}be=z3nyL8}%>");
      Node node1 = new Node(119, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 75
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NodeUtil.isCommutative(77);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for FOR (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeUtil.isCommutative(77);
      NodeUtil.getStringValue((-3317.47125));
      NodeUtil.isCommutative(5);
      NodeUtil.opToStr(98);
      Compiler compiler0 = new Compiler((PrintStream) null);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(145);
      // Undeclared exception!
      try { 
        nodeUtil_MatchNodeType0.apply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.getStringValue(2.0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = new Node(113, 285, (-644));
      node0.removeChildren();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeWHILE
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = new Integer(37);
      NodeUtil.isSimpleOperatorType(37);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NodeUtil.opToStr(122);
      NodeUtil.precedence(122);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(13, ".");
      Node node1 = new Node(80, node0, (-1467), 37);
      NodeUtil.isHoistedFunctionDeclaration(node1);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = inlineSimpleMethods0.externMethodsWithoutSignatures;
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node((-2165));
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString(102, "y6__+rp{rW", (-1), 102);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.mayEffectMutableState(node0);
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isStatementParent(node1);
      NodeUtil.mayBeString(node0);
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NodeUtil.booleanNode(false);
      NodeUtil.precedence(42);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString(99, "(");
      Node node1 = new Node(0, 30, 15);
      NodeUtil.precedence(52);
      node1.clonePropsFrom(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      NodeUtil.getCount(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      NodeUtil.redeclareVarsInsideBranch(node1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(152);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for DEBUGGER (type 152)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStr(107);
      NodeUtil.isAssociative(42);
      NodeUtil.isValidQualifiedName("/]gyS Fi%DPb+_:");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for IF (type 108)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      NodeUtil.getSourceFile(node0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "_yERJR9qW");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("_yERJR9qW", "_yERJR9qW", (-871), 952);
      simpleErrorReporter0.warning("_yERJR9qW", "_yERJR9qW", 41, 21);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(140);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 140
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("0rWG0TQ .sA");
      NodeUtil.getNumberValue(node0);
      Node node1 = Node.newString(39, "ncL7ulm|}\"_nblAr[:O");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(220);
      NodeUtil.getStringNumberValue("anD/V~p");
      Compiler compiler0 = new Compiler();
      Node node1 = compiler0.jsRoot;
      NodeUtil.getBestLValueOwner((Node) null);
      NodeUtil.containsType(node0, 37);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 220
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(99, "(");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) simpleErrorReporter0;
      objectArray0[1] = (Object) simpleErrorReporter0;
      objectArray0[2] = (Object) "(";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) "(";
      Node node1 = Node.newNumber((-1891.3574512739756));
      Node node2 = node0.useSourceInfoFromForTree(node1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.isCommutative(52);
      NodeUtil.opToStr(33);
      NodeUtil.getBestJSDocInfo(node0);
      NodeUtil.getBestLValueName(node2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = NodeUtil.opToStr(63);
      assertNull(string0);
      
      NodeUtil.isSimpleOperatorType(63);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = new Integer(101);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      NodeUtil.precedence(101);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString((-1051), "4iRk");
      NodeUtil.getSourceName(node0);
      NodeUtil.isFunctionObjectCallOrApply(node0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NodeUtil.isSimpleOperatorType(28);
      NodeUtil.isValidPropertyName("q(e+t;i");
      // Undeclared exception!
      try { 
        NodeUtil.getArrayElementStringValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(100);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.mayEffectMutableState(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      ReorderConstantExpression reorderConstantExpression1 = new ReorderConstantExpression();
      ReorderConstantExpression reorderConstantExpression2 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression2.optimizeSubtree(node0);
      NodeUtil.opToStr(49);
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.precedence(52);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(102);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.evaluatesToLocalValue(node0);
      node0.isNoSideEffectsCall();
      Compiler compiler0 = new Compiler();
      NodeUtil.isCommutative(16);
      NodeUtil.opToStr(36);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
      Object object0 = new Object();
      nodeUtil_BooleanResultPredicate0.equals(object0);
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.isSimpleOperatorType(27);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "_yERJR9qW");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("_yERJR9qW", "_yERJR9qW", 41, 21);
      NodeUtil.nodeTypeMayHaveSideEffects(node0);
      NodeUtil.referencesThis(node0);
      NodeUtil.copyNameAnnotations(node0, node0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(87);
      Compiler compiler0 = new Compiler();
      node0.getProp(87);
      Node node1 = new Node(32);
      Node.newNumber(3039.0, 45, 16);
      NodeUtil.evaluatesToLocalValue(node0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(15, 1541, 15);
      NodeUtil.evaluatesToLocalValue(node0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      sourceMap_DetailLevel0.apply(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node0);
      NodeUtil.mayBeString(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node0);
      NodeUtil.isSwitchCase(node0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(116);
      NodeUtil.isCommutative((-48));
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1647), nodeArray0);
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      NodeUtil.getArgumentForCallOrNew(node1, 36);
      NodeUtil.opToStr(47);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NodeUtil.getInverseOperator(16);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(14, 16, 16);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isFunctionObjectApply(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.newExpr(node1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node2 = NodeUtil.newName(googleCodingConvention0, "nDxg", node1, "nDxg");
      NodeUtil.evaluatesToLocalValue(node2, nodeUtil_MatchShallowStatement0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NodeUtil.opToStr(139);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(107);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NodeUtil.opToStr(118);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(75);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 75
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.getIntProp(31);
      NodeUtil.isSimpleOperatorType(101);
      NodeUtil.isPrototypeProperty(node1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("=");
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for RETURN (type 4)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 80
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(92);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(12);
      NodeUtil.isValidPropertyName("q(e+t;i");
      NodeUtil.getArrayElementStringValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(89);
      Node node0 = new Node(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isCommutative(1640);
      NodeUtil.opToStr(0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(99, "(");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = new Node(8, node0, node0);
      node0.isEquivalentToTyped(node1);
      Node node2 = NodeUtil.numberNode((-1291.858), node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      nodeUtil_NumbericResultPredicate0.apply(node1);
      Compiler compiler0 = new Compiler();
      MockFile mockFile0 = new MockFile("(", "(");
      Charset charset0 = Charset.defaultCharset();
      Node.newString("(", 31, 2114);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0, charset0);
      Node node3 = compiler0.parse((SourceFile) jSSourceFile0);
      node3.toString(true, false, false);
      NodeUtil.isLiteralValue(node3, true);
      NodeUtil.isAssociative(49);
      NodeUtil.opToStr(115);
      NodeUtil.isLatin("X|oB;0{3\"|g");
      NodeUtil.getImpureBooleanValue(node2);
      NodeUtil.isExprAssign(node3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Compiler compiler0 = new Compiler();
      compiler0.getState();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(143);
      // Undeclared exception!
      try { 
        NodeUtil.getNodeTypeReferenceCount((Node) null, 143, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(77);
      Node node0 = new Node((-243));
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      node0.setOptionalArg(false);
      node0.putBooleanProp(119, false);
      Node node2 = new Node(48, 0, 2);
      node0.addChildToFront(node1);
      NodeUtil.isReferenceName(node2);
      NodeUtil.getSourceFile(node1);
      Node node3 = NodeUtil.getRootOfQualifiedName(node1);
      NodeUtil.getBestLValueOwner(node3);
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node1, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.opToStr(97);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(255, (-1428), 255);
      Node node1 = Node.newString("n|F(/\"");
      Node node2 = new Node(45, node1, node1, node0, node0, 36, 46);
      NodeUtil.opToStr(0);
      NodeUtil.opToStr((-9));
      HashSet<String> hashSet0 = new HashSet<String>();
      NodeUtil.isValidDefineValue(node2, hashSet0);
      NodeUtil.isLoopStructure(node2);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = new Node(92);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(12);
      Node node1 = Node.newString("com.google.javascript.jscomp.NameReferenceGraphConstruction$NameUse");
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.isValidSimpleName("false");
      NodeUtil.getBestJSDocInfo(node0);
      NodeUtil.getPureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(94, 38, (-89));
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.opToStr(4095);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(255, 255, 122);
      Node node1 = new Node(46);
      NodeUtil.evaluatesToLocalValue(node1);
      Node node2 = new Node(118, (-591), 32);
      NodeUtil.isSimpleOperatorType(117);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(93, 933, (-3512));
      NodeUtil.getArrayElementStringValue(node0);
      ControlFlowAnalysis.getCatchHandlerForBlock(node0);
      Compiler compiler0 = new Compiler((PrintStream) null);
      NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newString(99, "(");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      Node node0 = new Node(16);
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      ReorderConstantExpression reorderConstantExpression1 = new ReorderConstantExpression();
      // Undeclared exception!
      try { 
        reorderConstantExpression0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(118);
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
      // Undeclared exception!
      try { 
        NodeUtil.getNameReferenceCount((Node) null, "`OdgX!qUbg6QIn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNameNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NodeUtil.precedence(90);
      Node node0 = new Node(90);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.getStringValue(117);
      NodeUtil.isCommutative(117);
      NodeUtil.opToStr(95);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(95);
      // Undeclared exception!
      try { 
        NodeUtil.isSwitchCase((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("PJ/3|", "P");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      NodeUtil.isSimpleOperator(node0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString("*Bb@jS1&i9k10~Q", 127, 127);
      NodeUtil.precedence(39);
      NodeUtil.isPrototypePropertyDeclaration(node0);
      NodeUtil.isSimpleOperatorType(36);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(23);
      Node node1 = new Node(8);
      NodeUtil.mayBeString(node0);
      NodeUtil.precedence(46);
      NodeUtil.getStringNumberValue("AUTHOR");
      NodeUtil.precedence(37);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(2982, "y3 })k=mF)");
      NodeUtil.isCallOrNew(node0);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = 10;
      NodeUtil.isSimpleOperatorType(10);
      NodeUtil.opToStr(10);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(59, 1299, 59);
      Node node1 = new Node(77);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTRY
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSymmetricOperation(node0);
      NodeUtil.newUndefinedNode(node0);
      Node node1 = new Node(43);
      Node node2 = NodeUtil.numberNode(12, (Node) null);
      NodeUtil.isPrototypeProperty(node2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(46);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Object object0 = new Object();
      Node node1 = new Node(4095);
      node1.cloneNode();
      Node node2 = new Node(29);
      NodeUtil.evaluatesToLocalValue(node2);
      NodeUtil.isSwitchCase(node0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node0);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(43, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertTrue(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      Node node1 = NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(43, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertTrue(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertTrue(node1.isVar());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNot());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertEquals(118, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(43, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertTrue(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("]q~*:GeVq$luq]v"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = NodeUtil.canBeSideEffected(node0, hashSet0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(hashSet0.contains("]q~*:GeVq$luq]v"));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node1);
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(43, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertTrue(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(128);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 128
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, (Node) null);
      node0.isOnlyModifiesThisCall();
      NodeUtil.isLoopStructure(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(89);
      NodeUtil.precedence(89);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node.newString("[", 108, (-2102));
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      NodeUtil.containsFunction(node2);
      NodeUtil.getPureBooleanValue(node1);
      NodeUtil.opToStr(869);
      // Undeclared exception!
      try { 
        NodeUtil.isTryCatchNodeContainer(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NodeUtil.opToStr(131);
      NodeUtil.getStringValue(131);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isValidSimpleName("L#UMdQ");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.declareType("arguments", (JSType) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(133);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 133
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.opToStr(18);
      Node node0 = new Node(18);
      Compiler compiler0 = new Compiler();
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("<<", charset0);
      Node node1 = compiler0.parse(sourceFile0);
      NodeUtil.mayEffectMutableState(node1, compiler0);
      NodeUtil.isVarDeclaration(node0);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler1 = new Compiler();
      Compiler compiler2 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      NodeUtil.mayBeString(node0);
      NodeUtil.getPrototypeClassName(node0);
      NodeUtil.getStringNumberValue("1Q'h9{Su");
      // Undeclared exception!
      try { 
        NodeUtil.isSwitchCase((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(662, "mVi=H}be=z3nyL8}%>");
      Node node1 = new Node(36, node0);
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = peepholeSimplifyRegExp0.optimizeSubtree(node1);
      node2.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(59, 1541, 59);
      NodeUtil.isSimpleOperatorType(30);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.getStringNumberValue("-infinity");
      Node node0 = Node.newString("sGq>X");
      Node node1 = NodeUtil.newVarNode("( \"Z>G[S=", node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.mayBeString(node1);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      nodeUtil_MatchShallowStatement0.apply(node0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "_yERJR9qW");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("_yERJR9qW", "_yERJR9qW", (-871), 952);
      NodeUtil.isSimpleOperatorType(26);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = 10;
      NodeUtil.isSimpleOperatorType(10);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newString("JSC_INEXISTENT_PROPERTY");
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING JSC_INEXISTENT_PROPERTY does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node.newString("y3 }k=mA)");
      NodeUtil.precedence(43);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NodeUtil.opToStr(90);
      NodeUtil.precedence(90);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("<<=");
      NodeUtil.getSourceFile(node0);
      NodeUtil.isSimpleOperatorType(2432);
      NodeUtil.isStrWhiteSpaceChar(1556);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(255, (-1428), 255);
      Node node1 = Node.newString("n|F(/\"");
      Node node2 = new Node(54, node0, node0, node1, node0, 2, 32);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.isCommutative(49);
      NodeUtil.opToStr(16);
      NodeUtil.getBestJSDocInfo(node1);
      NodeUtil.isFunctionObjectCallOrApply(node1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = new Node(92);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(12);
      Node node1 = Node.newString("com.google.javascript.jscomp.NameReferenceGraphConstruction$NameUse");
      NodeUtil.isPrototypeProperty(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CONTINUE (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      NodeUtil.precedence(33);
      Node node0 = new Node(15, 33, 33);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        compiler0.acceptEcmaScript5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString(".");
      NodeUtil.getLoopCodeBlock(node0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(149);
      NodeUtil.getStringValue((-694.37380072311));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.isValidSimpleName("-694.37380072311");
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      Compiler compiler0 = new Compiler();
      ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      Node node0 = compiler1.parseTestCode("-694.37380072311");
      node0.setWasEmptyNode(false);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isSimpleOperatorType(11);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "0;yERJRW");
      node0.setString("0;yERJRW");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "A@ocW");
      NodeUtil.newUndefinedNode(node1);
      node0.getJSType();
      Node node2 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.isNullOrUndefined(node2);
      Compiler compiler0 = new Compiler();
      NodeUtil.evaluatesToLocalValue(node1);
      Compiler compiler1 = new Compiler();
      NodeUtil.isCommutative(42);
      NodeUtil.opToStr(103);
      NodeUtil.isValidSimpleName("!=");
      NodeUtil.getBestJSDocInfo(node1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newNumber((-1828.7150277), 811, 811);
      peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.isSimpleOperatorType(46);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      NodeUtil.getStringNumberValue("46^EH%]|w}M}z@mxxo");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.pollFirst();
      Node node0 = new Node(113, (-2179), 138);
      Node node1 = new Node(15, node0, node0);
      node1.setSourceEncodedPositionForTree(83);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.isConstantName(node0);
      Node node2 = null;
      try {
        node2 = new Node(1, node1, node0, 8, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention1);
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "4iRk", node0, "4iRk");
      NodeUtil.referencesThis(node1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(9);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(47);
      Node node1 = Node.newString("K?Ux0k81]K");
      node1.removeChildren();
      NodeUtil.isPrototypeProperty(node0);
      NodeUtil.isSimpleOperatorType(30);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      NodeUtil.opToStr(63);
      NodeUtil.precedence(25);
      NodeUtil.precedence(63);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(68);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "|goog.tweak.gStrng");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.declareType("5Wd~If=N'", (JSType) null);
      NodeUtil.opToStr(16);
      NodeUtil.isLatin("0?sV<)nQQHHOc.");
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newString((-3760), "{Us[@C 0u=>0c].4f");
      NodeUtil.isNumericResultHelper(node0);
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("i.");
      Node node0 = new Node(154);
      node0.removeChildren();
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_BooleanResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(72);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 72
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      NodeUtil.numberNode(2, node0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      NodeUtil.opToStr(90);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "<<=");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      jSTypeRegistry0.getType("<<=");
      NodeUtil.isExprCall(node1);
      NodeUtil.precedence(39);
      NodeUtil.isLatin("Named type with empty name component");
      Node node2 = new Node(40, node1, 47, 30);
      NodeUtil.isSwitchCase(node2);
      NodeUtil.redeclareVarsInsideBranch(node1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      NodeUtil.opToStr(75);
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.getStringNumberValue("amL0v(N b'");
      Compiler compiler0 = new Compiler();
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.isBooleanResultHelper(node0);
      NodeUtil.isStrWhiteSpaceChar((-60));
      NodeUtil.getBestLValueName(node0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      NodeUtil.isCommutative(77);
      Node node0 = new Node(67);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.precedence(88);
      NodeUtil.isSimpleOperatorType(2);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      PeepholeFoldWithTypes peepholeFoldWithTypes1 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes1.optimizeSubtree(node0);
      Node node2 = Node.newNumber((double) 39);
      PeepholeFoldWithTypes peepholeFoldWithTypes2 = new PeepholeFoldWithTypes();
      NodeUtil.precedence(11);
      node1.wasEmptyNode();
      NodeUtil.isEmptyBlock(node0);
      NodeUtil.isLiteralValue(node2, false);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      NodeUtil.precedence(90);
      Node node0 = new Node(26, 3610, 90);
      node0.children();
      Node node1 = new Node(29, node0, node0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("odJ.w");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      node0.getAncestor(54);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream0.printf("odJ.w", (Object[]) null);
      NodeUtil.isLatin("gd$<383|?");
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.getStringNumberValue("]q~*:GeVq$luq]v");
      Compiler compiler0 = new Compiler();
      NodeUtil.mayEffectMutableState(node0, compiler0);
      NodeUtil.isStrWhiteSpaceChar(42);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.precedence(122);
      Node node0 = Node.newString(2, "@E}");
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      nodeUtil_MatchDeclaration0.apply(node0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.getInputId(node0);
      NodeUtil.isStatementParent(node0);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "arguments", "arguments");
      NodeUtil.mayBeStringHelper(node1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.pollFirst();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "Named type with empty name component");
      node0.setJSType((JSType) null);
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.isConstantName(node0);
      NodeUtil.newExpr(node1);
      NodeUtil.isSimpleOperator(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      NodeUtil.opToStr(90);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeUtil.isSimpleOperatorType(90);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(":");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      compiler0.parseSyntheticCode("PFJY/3|", "P");
      NodeUtil.isStrWhiteSpaceChar(15);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(4362, 4362, 161);
      Node node1 = new Node(154, node0, node0, node0);
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      NodeUtil.isExpressionResultUsed(node0);
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = new Integer(139);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(139);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 139
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.mayBeString(node0);
      Node node1 = NodeUtil.numberNode(46, node0);
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.isValidQualifiedName("--e=xl@2-krP");
      NodeUtil.getStringValue(node0);
      NodeUtil.isEmptyFunctionExpression(node0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "_yERJR9qW");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 81
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      NodeUtil.isLatin("com.google.javascript.jscomp.NodeUtil$MatchNameNode");
      NodeUtil.isSimpleOperatorType((-497));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSType.toMaybeFunctionType((JSType) null);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      ObjectType objectType1 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, objectType1);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) parameterizedType0, (List<JSType>) arrayList0);
      jSTypeArray0[0] = (JSType) functionType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(111, node0, 2558, 1007);
      NodeUtil.redeclareVarsInsideBranch(node1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      NodeUtil.isCommutative(2229);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      Compiler compiler0 = new Compiler();
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(78);
      Node node0 = new Node(78);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.precedence(16);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NodeUtil.isAssociative(77);
      Node node0 = new Node(94, 154, 154);
      NodeUtil.containsFunction(node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Integer integer0 = new Integer(32);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = Node.newString("", 32, 32);
      NodeUtil.referencesThis(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.getPureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) (-1799), 1180, (-1799));
      NodeUtil.newExpr(node0);
      NodeUtil.opToStr(0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      NodeUtil.opToStr(117);
      NodeUtil.getStringValue(117);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "gQhW", (String) null);
      Node node1 = new Node((-2488), node0, 122, 35);
      NodeUtil.containsFunction(node1);
      NodeUtil.getImpureBooleanValue(node1);
      NodeUtil.opToStr(45);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      NodeUtil.opToStr(90);
      NodeUtil.precedence(90);
      Node node0 = Node.newString(25, "u(S8o");
      node0.setLength(1);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got MOD
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = null;
      NodeUtil.isAssociative(23);
      Node node1 = new Node(126, 126, 154);
      // Undeclared exception!
      try { 
        NodeUtil.containsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NodeUtil.opToStr(101);
      NodeUtil.getStringValue(101);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = new Node(11);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypeClassName((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(109, 109, 255);
      Node node1 = new Node(4);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 106
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(120);
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString("com.google.javascript.jscomp.CleanupPasses$2");
      NodeUtil.precedence(98);
      NodeUtil.isPrototypeProperty(node0);
      Node node2 = NodeUtil.numberNode(8, node1);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.getNodeTypeReferenceCount(node2, 43, nodeUtil_MayBeStringResultPredicate0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.getIntProp(31);
      NodeUtil.getSourceName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(130);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for EXPR_RESULT (type 130)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(41, 37, 43);
      node0.removeChildren();
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.isSwitchCase(node1);
      NodeUtil.mayBeStringHelper(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(77);
      Node node0 = NodeUtil.booleanNode(false);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = new Node(29, node0, 1, 30);
      node1.setWasEmptyNode(false);
      NodeUtil.getNumberValue(node1);
      NodeUtil.isCommutative(4);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105, 105, 105);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node2 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getLoopCodeBlock(node2);
      NodeUtil.isLiteralValue(node1, false);
      NodeUtil.isConstantName(node1);
      NodeUtil.isSimpleOperatorType(100);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(59, 1541, 59);
      Node node1 = new Node(122);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 59
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node((-1813));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node.newString("");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodePARAM_LIST
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      NodeUtil.opToStr(39);
      NodeUtil.getStringValue(906.54604828867);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.precedence(97);
      NodeUtil.isCommutative((-536870912));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      NodeUtil.trimJsWhiteSpace("i.");
      Node node0 = new Node(92);
      NodeUtil.evaluatesToLocalValue(node0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      NodeUtil.opToStr(61);
      Node node0 = new Node(61);
      Node node1 = Node.newNumber((double) 4, 433, 61);
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 61
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = new Node(41, 37, 43);
      node0.removeChildren();
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.isSwitchCase(node1);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "Unexpected node type: ";
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("a`", "Unexpected node type: ", (-2281), (-2281));
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.declareType("SL:]y<D_", (JSType) null);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(135);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 135
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(56);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("F;76i.!<$+j6nIyLL", 116, 320);
      NodeUtil.isReferenceName(node0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2926, "y3 }k=mA)");
      Node node1 = new Node(48, node0);
      NodeUtil.isSimpleOperatorType(79);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(89);
      Node node0 = new Node(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.extractClassNameIfRequire(node0, node0);
      googleCodingConvention0.isPrototypeAlias(node0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      NodeUtil.opToStr(90);
      Node node0 = new Node(90, 90, 90);
      node0.removeChildren();
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.mayBeStringHelper(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      NodeUtil.isCommutative(77);
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.isConstantName(node1);
      Node node2 = NodeUtil.newExpr(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      sourceMap_DetailLevel0.apply(node1);
      SourceMap.DetailLevel sourceMap_DetailLevel1 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel1.apply(node2);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.isCommutative(6);
      NodeUtil.opToStr(114);
      NodeUtil.getBestJSDocInfo(node2);
      NodeUtil.isFunctionObjectCallOrApply(node3);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(154);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      sourceMap_DetailLevel0.apply(node0);
      NodeUtil.isLoopStructure(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4095
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = new Node(38, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getPureBooleanValue(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(87);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      NodeUtil.opToStr(90);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "<<=");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      Node node2 = new Node(20, node1);
      NodeUtil.evaluatesToLocalValue(node2);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<<=");
      Compiler compiler0 = new Compiler();
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeParameterizedType((JSType) null);
      NodeUtil.isStatement(node0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(53);
      NodeUtil.isSimpleOperator(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getInputId((Node) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node((-2165), (-2165), (-2165));
      Node node1 = new Node(31);
      NodeUtil.isSimpleOperator(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node.newString(":ZYF[z/WvGk");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      node0.setLineno(2982);
      Node node1 = new Node(48, node0);
      peepholeRemoveDeadCode0.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = NodeUtil.opToStr(68);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(68);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 68
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      NodeUtil.opToStr(90);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "<<=");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node1.getJSType();
      Node node2 = NodeUtil.newUndefinedNode(node1);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      compiler1.getState();
      Node.newString(4, "<<=");
      NodeUtil.isExprCall(node2);
      NodeUtil.isReferenceName(node0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(68);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "|goog.tweak.gStrng");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.declareType("5Wd~If=N'", (JSType) null);
      NodeUtil.precedence(103);
      NodeUtil.precedence(16);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      NodeUtil.opToStr(90);
      Node node0 = new Node((-1813));
      NodeUtil.opToStr(9);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(307);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for EQUALS (type 307)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isWithinLoop(node0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.mayBeString(node0);
      NodeUtil.precedence(30);
      NodeUtil.getStringNumberValue("L#UMdQ");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getSourceFile(node0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(64);
      NodeUtil.evaluatesToLocalValue(node0);
      node0.removeChildren();
      NodeUtil.getNumberValue(node0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = 35;
      NodeUtil.precedence(35);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1539);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1539
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.precedence(87);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.jsRoot;
      NodeUtil.getBestLValueOwner((Node) null);
      // Undeclared exception!
      try { 
        NodeUtil.isRelationalOperation((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.pollFirst();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      Node.newString(40, "Not declared as a constructor", 48, 2);
      Node node1 = NodeUtil.newVarNode("Named type with empty name component", node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      NodeUtil.isEmptyBlock(node1);
      NodeUtil.getStringNumberValue("[P},AL+5A|t&)YM");
      Compiler compiler0 = new Compiler();
      NodeUtil.mayEffectMutableState(node1, compiler0);
      NodeUtil.isBooleanResultHelper(node1);
      NodeUtil.isStrWhiteSpaceChar(0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = new Node(154);
      NodeUtil.isSimpleOperatorType(54);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Node node0 = new Node(105);
      NodeUtil.evaluatesToLocalValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(74);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 74
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.getBestJSDocInfo(node0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(77, 933, 77);
      Node node1 = new Node(133, node0, node0);
      node1.setSourceEncodedPositionForTree(31);
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.isConstantName(node0);
      Node node2 = null;
      try {
        node2 = new Node(628, node1, node0, 150, 2513);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(66);
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.externsRoot;
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(":");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NodeUtil.opToStr(22);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(68);
      Node node0 = new Node(98);
      NodeUtil.isSimpleOperator(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.isSymmetricOperation(node0);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Node node2 = new Node(43);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assignment op:VOID
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(136);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 136
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(4362, 4362, 161);
      Node node1 = new Node(154, node0, node0, node0);
      NodeUtil.arrayToString(node1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newNumber((-3317.47125), 66, 45);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.precedence(32);
      NodeUtil.precedence(16);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(closureCodingConvention0);
      NodeUtil.newQualifiedNameNode(closureCodingConvention1, "5sE#v");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(91);
      Node node0 = new Node(91);
      node0.isUnscopedQualifiedName();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Compiler compiler0 = new Compiler();
      NodeUtil.getSourceFile(node0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isCommutative(77);
      Node node0 = new Node(77);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = new Node(87);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      MockFile mockFile0 = new MockFile("Invalid token: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Node node2 = NodeUtil.numberNode(9.007199254740992E15, node0);
      NodeUtil.isWithinLoop(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node2);
      NodeUtil.getImpureBooleanValue(node2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("Unexpected node type: ", "Unexpected node type: ", (-2281), (-2281));
      NodeUtil.getStringNumberValue("Unexpected node type: ");
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(53);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
      Node.newString("|");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(89);
      Node node0 = new Node(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.isRelationalOperation(node0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      NodeUtil.getStringNumberValue("-infinity");
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-15));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -15
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(149);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CONST (type 149)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      int int0 = 67;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(67);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 67
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(122);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node1 = compiler0.externAndJsRoot;
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      node2.setLineno(4095);
      NodeUtil.getStringValue(node2);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = (-1547);
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew((Node) null, (-1810));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = new Node(92);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(12);
      Node node1 = Node.newString("com.google.javascript.jscomp.NameReferenceGraphConstruction$NameUse");
      NodeUtil.isPrototypeProperty(node1);
      NodeUtil.isSimpleOperatorType(51);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      NodeUtil.referencesThis(node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      NodeUtil.opToStr(90);
      Node node0 = NodeUtil.booleanNode(true);
      NodeUtil.isGet(node0);
      NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      NodeUtil.getSourceFile(node0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(9, "w5NaklUM1_Vvg+b");
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention();
      googleCodingConvention1.isPrototypeAlias(node0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(77, 933, 77);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      NodeUtil.isNameReferenced(node1, "<<");
      peepholeFoldWithTypes0.mayHaveSideEffects(node0);
      Node node2 = new Node(31, node0, node0, 4, 77);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      compilerOptions0.getCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.newName((CodingConvention) null, "5$'I'!m", (Node) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "_yERJR9qW");
      NodeUtil.isSimpleOperator(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = new Node(47, node0);
      NodeUtil.canBeSideEffected(node1);
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.getBestLValueOwner(node1);
      Node.newNumber((double) 1);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      PeepholeFoldWithTypes peepholeFoldWithTypes1 = new PeepholeFoldWithTypes();
      peepholeFoldWithTypes1.optimizeSubtree(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isSimpleFunctionObjectCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention(jqueryCodingConvention0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention1, "U=ToO^>4KY>)]U@%");
      NodeUtil.isBooleanResultHelper(node0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      NodeUtil.isAssociative(28);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NodeUtil.isValidSimpleName("pY=D#kd8Wo}");
      NodeUtil.precedence(105);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      NodeUtil.isSimpleOperatorType((-852));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.opToStr(18);
      NodeUtil.opToStrNoFail(18);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        nodeUtil_MatchDeclaration0.apply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.isSimpleOperatorType(111);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(35);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node((-1813));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.precedence(19);
      NodeUtil.isSimpleOperatorType(1);
      // Undeclared exception!
      try { 
        AbstractPeepholeOptimization.validateResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      NodeUtil.precedence(92);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      compiler1.getState();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(148);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for SETTER_DEF (type 148)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "y3 }k=CmA)";
      Node node0 = Node.newString(2982, "y3 }k=CmA)");
      Node node1 = new Node(48, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      NodeUtil.opToStr(30);
      Node node2 = new Node(1);
      NodeUtil.mayBeString(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for THROW (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(":");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NodeUtil.precedence(22);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("0rWG0TQ .sA");
      NodeUtil.getNumberValue(node0);
      NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING 0rWG0TQ .sA does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.getStringValue(496.4010381131);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for WHILE (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(98);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node1 = compiler0.externAndJsRoot;
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      exploitAssigns0.mayHaveSideEffects(node2);
      node2.setLineno(4095);
      NodeUtil.getStringValue(node2);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      NodeUtil.isCommutative(67);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node.newString("goog.tweak.getString");
      NodeUtil.evaluatesToLocalValue(node0);
      node0.isNoSideEffectsCall();
      Compiler compiler0 = new Compiler();
      NodeUtil.isCommutative(39);
      NodeUtil.opToStr(50);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("JSCompiler_renameProperty", "JSCompiler_renameProperty", 3919, 60);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^/jz");
      NodeUtil.getStringNumberValue(">>");
      NodeUtil.isSimpleOperatorType(60);
      NodeUtil.isValidPropertyName("JSCompiler_renameProperty");
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(35, 35, 35);
      Node.newNumber(0.0, 41, 269);
      NodeUtil.getBestLValueName(node0);
      NodeUtil.isNullOrUndefined(node0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      node1.getIntProp(31);
      NodeUtil.getSourceName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      Node node1 = new Node(48, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("y3 }k=mA)", "Infinity.", 54, 12);
      simpleErrorReporter0.warning("y3 }k=mA)", "T>k", 1043, 51);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node2 = Node.newString("y3 }k=mA)");
      node2.setSourceEncodedPositionForTree(54);
      NodeUtil.isExprCall(node2);
      NodeUtil.isSwitchCase(node0);
      node2.setWasEmptyNode(false);
      NodeUtil.isImmutableValue(node2);
      NodeUtil.isFunctionExpression(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.isSimpleOperatorType(17);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = Node.newString((-1051), "4iRk");
      NodeUtil.isSimpleOperatorType(39);
      node0.copyInformationFromForTree(node0);
      NodeUtil.isPrototypeProperty(node0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = Node.newString(2982, "y3 }k=CmA)");
      Node node1 = new Node(48, node0);
      node0.cloneNode();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      NodeUtil.newQualifiedNameNode(closureCodingConvention0, "),,iGk6Pc");
      Node node2 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getNumberValue(node2);
      Node.newString(30, "y3 }k=CmA)");
      Compiler compiler0 = new Compiler();
      NodeUtil.precedence(37);
      NodeUtil.containsFunction(node2);
      NodeUtil.opToStr(54);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(119);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for WITH (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(96);
      NodeUtil.newUndefinedNode(node0);
      NodeUtil.isGet(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString("y3 }k=mA)");
      NodeUtil.precedence(38);
      NodeUtil.isFunctionDeclaration(node1);
      NodeUtil.isCommutative(3785);
      NodeUtil.opToStr(35);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = Node.newNumber((-3315.4696606229872), 4477, (-1799));
      NodeUtil.newExpr(node0);
      NodeUtil.getStringNumberValue("arguments");
      PipedInputStream pipedInputStream0 = new PipedInputStream(49);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSCompiler_renameProperty");
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 84
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node(64);
      NodeUtil.evaluatesToLocalValue(node0);
      node0.removeChildren();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) node0;
      objectArray0[1] = (Object) node0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintStream0.printf("_", objectArray0);
      NodeUtil.isLatin("qyty");
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(53);
      Compiler compiler0 = new Compiler();
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      Node node0 = compiler_IntermediateState0.externsRoot;
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(123);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 123
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      NodeUtil.opToStr(43);
      Node node0 = Node.newString(43, "B6A%ylC6XR*\"");
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      googleCodingConvention0.isPrototypeAlias(node0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(117, (-1643), (-1643));
      NodeUtil.opToStr(16);
      NodeUtil.precedence(39);
      NodeUtil.precedence(90);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      Node node1 = new Node(53);
      NodeUtil.isSimpleOperator(node0);
      NodeUtil.precedence(51);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(105);
      NodeUtil.getStringValue((-1776.44913));
      Node node1 = Node.newString(38, "-1776.44913");
      NodeUtil.mayEffectMutableState(node1);
      Compiler compiler0 = new Compiler();
      Node.newString(19, "split");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(50);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(99, "(");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 99
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node((-1828));
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.newVarNode("DnZWd'wS\"<8m|G", node0);
      NodeUtil.precedence(13);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.booleanNode(false);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isAssignmentOp(node0);
      NodeUtil.isNullOrUndefined(node0);
      Node node2 = new Node(52, node1);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      peepholeFoldWithTypes0.mayHaveSideEffects(node2);
      Node.newString("MIN");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) (-1799), 1180, (-1799));
      Node node1 = NodeUtil.newExpr(node0);
      Node.newNumber((double) 32, 147, 49);
      node1.getIntProp(51);
      NodeUtil.getSourceName(node1);
      NodeUtil.getBestLValue(node0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = new Node(117, (-1643), (-1643));
      node0.setSourceEncodedPositionForTree((-3165));
      NodeUtil.isGet(node0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.google.common.collect.Lists$2", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString("com.google.javascript.jscomp.ExportTestFunctions");
      NodeUtil.precedence(47);
      NodeUtil.isFunctionDeclaration(node1);
      NodeUtil.isCommutative(45);
      NodeUtil.opToStr(113);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newString(2982, "F3::})k=F)");
      NodeUtil.isValidPropertyName("F3::})k=F)");
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(68);
      ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.getNumberValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.opToStr(8);
      NodeUtil.isStrWhiteSpaceChar(45);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NodeUtil.precedence(20);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-3672));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3672
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      int int0 = 110;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for SWITCH (type 110)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(98);
      Node node1 = new Node(51);
      NodeUtil.evaluatesToLocalValue(node1);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      NodeUtil.containsCall(node0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "rpxIZ6O#");
      NodeUtil.newUndefinedNode(node0);
      node0.getJSType();
      NodeUtil.evaluatesToLocalValue(node0);
      node0.removeFirstChild();
      node0.addChildrenToFront(node0);
      NodeUtil.getBestLValueName(node0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(2558);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for THROW (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeUtil.isSimpleOperatorType(21);
      NodeUtil.precedence(21);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(53);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      Node node0 = new Node(37, 37, 37);
      Node node1 = new Node(122);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(102);
      NodeUtil.isValidPropertyName("q(e+t;i");
      NodeUtil.isAssociative((-1016));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      NodeUtil.getBestLValueOwner((Node) null);
      NodeUtil.isCommutative(49);
      NodeUtil.opToStr((-2));
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(106, 106, 106);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 106
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(90, "rena'eCssNames");
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      Node node1 = Node.newString(1574, "rena'eCssNames");
      NodeUtil.isValidQualifiedName(".J!@~pN+oD.<;k^Zi_");
      NodeUtil.getStringValue(node1);
      NodeUtil.isEmptyFunctionExpression(node0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node0 = new Node(200000);
      NodeUtil.getPrototypeClassName(node0);
      // Undeclared exception!
      try { 
        peepholeFoldWithTypes0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldWithTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      NodeUtil.isCommutative(77);
      Node node0 = new Node(67);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 67
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(18);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStrNoFail(86);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      NodeUtil.isCommutative(42);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.pollFirst();
      Node node0 = new Node(187, 0, 1);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.setSourceEncodedPositionForTree(2);
      NodeUtil.mayHaveSideEffects(node1);
      NodeUtil.isConstantName(node1);
      Node node2 = new Node(48, node0, node1, 4095, 4095);
      NodeUtil.arrayToString(node1);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, (NodeTraversal.Callback) null);
      NodeUtil.getStringValue((-1291.858));
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node(2755);
      NodeUtil.isPrototypePropertyDeclaration(node0);
      NodeUtil.isSimpleOperatorType(42);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      NodeUtil.isCommutative(77);
      NodeUtil.precedence(46);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = new Node(68);
      Node node1 = ControlFlowAnalysis.computeFallThrough(node0);
      NodeUtil.getNumberValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.opToStr(8);
      NodeUtil.getPureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(93, 933, (-3512));
      Node node1 = new Node(39);
      Node.newNumber((double) 1, 98, 1);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler0 = new Compiler();
      NodeUtil.getNameReferenceCount(node1, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Ljava/lang/Object;)Lorg/mozilla/javascript/Scriptable;");
      NodeUtil.getBestJSDocInfo(node0);
      NodeUtil.isSymmetricOperation(node1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = Node.newNumber(2563.9);
      node0.setStaticSourceFile((StaticSourceFile) null);
      NodeUtil.isGet(node0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      NodeUtil.isCommutative(77);
      Node node0 = new Node(68);
      NodeUtil.precedence(52);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.isValidSimpleName("goog.tweak.getString");
      NodeUtil.redeclareVarsInsideBranch(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NodeUtil.getObjectLitKeyTypeFromValueType(node0, objectType0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(77);
      Node node0 = new Node(86);
      Node node1 = Node.newNumber(2680.51, 43, 1);
      node0.useSourceInfoIfMissingFromForTree(node1);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(85);
      Node node0 = new Node(85, 85, 85);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      NodeUtil.newUndefinedNode(node0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      Compiler compiler0 = new Compiler(mockPrintStream0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Compiler compiler1 = nodeTraversal0.getCompiler();
      // Undeclared exception!
      try { 
        compiler1.getTypeRegistry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "";
      NodeUtil.getStringNumberValue("");
      Compiler compiler0 = new Compiler();
      VarCheck varCheck0 = null;
      try {
        varCheck0 = new VarCheck(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("0rWG0TQ .sA");
      NodeUtil.getNumberValue(node0);
      Node.newString(39, "ncL7ulm|}\"_nblAr[:O");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      NodeUtil.getImpureBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = new Node((-2165), (-2165), (-2165));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Compiler compiler0 = new Compiler();
      String string0 = "|hxed~\\";
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      // Undeclared exception!
      try { 
        NodeUtil.precedence(147);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for GETTER_DEF (type 147)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(102);
      NodeUtil.precedence(102);
      int int0 = 25;
      // Undeclared exception!
      try { 
        Node.newString(102, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = new Integer(110);
      NodeUtil.isSimpleOperatorType(110);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("IaN");
      NodeUtil.isNullOrUndefined(node0);
      NodeUtil.isLiteralValue(node0, false);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(96);
      NodeUtil.newUndefinedNode(node0);
      NodeUtil.evaluatesToLocalValue(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(77);
      Node node0 = new Node(68);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.mayEffectMutableState(node0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      NodeUtil.opToStr(41);
      NodeUtil.getPureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 800, 800, 800);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      NodeUtil.isVarDeclaration(node0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      NodeUtil.opToStr(118);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for VAR (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Node node0 = new Node(117, (-1643), (-1643));
      node0.setSourceEncodedPositionForTree((-3186));
      NodeUtil.mayHaveSideEffects(node0);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCONTINUE 1048575
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "rpxIZ6O#");
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.getJSType();
      NodeUtil.newUndefinedNode(node1);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(145);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 145
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      NodeUtil.opToStr(90);
      NodeUtil.precedence(90);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(76);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 76
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.isLatin("y3 }k=mA)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString(":0?sV<)nQQHIOc");
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      Object object0 = new Object();
      nodeUtil_NumbericResultPredicate0.equals(object0);
      NodeUtil.isWithinLoop(node1);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode1 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
      node2.getQualifiedName();
      Node node3 = new Node(1134, node0);
      NodeUtil.containsFunction(node3);
      NodeUtil.getImpureBooleanValue(node0);
      NodeUtil.opToStr(51);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      NodeUtil.opToStr(78);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 78
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "|goog.tweak.gStrng");
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isInc());
      assertEquals(33, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
      
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNull(staticSourceFile0);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isInc());
      assertEquals(33, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node1);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isInc());
      assertEquals(33, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(38, node1.getType());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      
      Node node2 = NodeUtil.getBestLValueOwner(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNull(node2);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isInc());
      assertEquals(33, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(38, node1.getType());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      
      NodeUtil.getImpureBooleanValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isInc());
      assertEquals(33, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isName());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(38, node1.getType());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node((-1813));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(35, 38, 54);
      NodeUtil.isGetOrSetKey(node0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Node node0 = new Node(92);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(12);
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler2 = new Compiler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node.newString(32, "uN");
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 109
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      NodeUtil.isCommutative(73);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      NodeUtil.isLatin("~%?Elh@");
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      NodeUtil.getStringNumberValue("~%?Elh@");
      Node node0 = new Node(26);
      // Undeclared exception!
      try { 
        NodeUtil.getStringValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      NodeUtil.opToStr(43);
      String string0 = "B6A%ylC6XR*\"";
      Node node0 = Node.newString(85, "B6A%ylC6XR*\"");
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Node node0 = Node.newString(102, "y6__+rp{rW", (-1), 102);
      NodeUtil.evaluatesToLocalValue(node0);
      Node node1 = new Node(121, (-602), 123);
      NodeUtil.isSimpleOperatorType(64);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) (-1799), (-1799), (-1799));
      NodeUtil.evaluatesToLocalValue(node0);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      nodeUtil_NumbericResultPredicate0.equals(simpleErrorReporter0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      peepholeRemoveDeadCode0.optimizeSubtree(node0);
      NodeUtil.containsFunction(node0);
      NodeUtil.opToStr(748);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
      
      Node node0 = new Node(15, 33, 33);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isScript());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Node node1 = new Node(149, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node1);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isScript());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertEquals(149, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      
      node1.setOptionalArg(false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isScript());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertEquals(149, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      
      String string0 = NodeUtil.getStringValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNull(string0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isScript());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertEquals(149, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      
      boolean boolean1 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isScript());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertEquals(33, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(33, node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertEquals(149, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      
      Integer integer0 = new Integer(683);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(683, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = Node.newString("J!@~pN+oD.<;k^Zi_");
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
      
      boolean boolean1 = NodeUtil.isFunctionDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      
      boolean boolean2 = NodeUtil.isCommutative(53);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("com.google.javascript.jscomp.NodeUtil$1");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "com.google.javascript.jscomp.NodeUtil$1");
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      
      boolean boolean0 = node0.isLocalResultCall();
      assertFalse(boolean0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      
      boolean boolean1 = NodeUtil.isWithinLoop(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      
      boolean boolean2 = NodeUtil.isNameReferenced(node0, "com.google.javascript.jscomp.NodeUtil$1");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      
      JSType jSType0 = node0.getJSType();
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNull(jSType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertTrue(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      assertNotNull(peepholeReplaceKnownMethods0);
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean0 = sourceMap_DetailLevel0.apply(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertTrue(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      
      Node node2 = node1.useSourceInfoFromForTree(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotNull(node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertTrue(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertTrue(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isScript());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNE());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCatch());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isString());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertEquals(122, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      boolean boolean1 = NodeUtil.isCommutative(9);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
      
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNull(jSDocInfo0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertTrue(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      
      boolean boolean2 = NodeUtil.isFunctionObjectCallOrApply(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals(83, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertTrue(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFalse());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "<<=");
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(38, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotNull(node1);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(38, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertTrue(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(122, node1.getType());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
      
      Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node2);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(38, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertEquals(38, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.isName());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      
      boolean boolean1 = NodeUtil.isSimpleFunctionObjectCall(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(38, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertEquals(38, node2.getType());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isBreak());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.isName());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      
      boolean boolean2 = NodeUtil.isNameReferenced(node0, "<<");
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertSame(node0, node2);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(38, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.isName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for DEFAULT_CASE (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = NodeUtil.opToStr(77);
      assertNull(string0);
      
      Node node0 = new Node(77);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertEquals(77, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertTrue(node0.isTry());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node1 = Node.newString("qIC]");
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node1);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertTrue(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(40, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(1688);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isCommutative(1563);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(33);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(33, node0.getType());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals(33, node0.getType());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      assertTrue(string1.equals((Object)string0));
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = new Node(98);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertTrue(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFunction());
      assertEquals(98, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      Node node1 = new Node(51);
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node1);
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      
      Node node2 = node0.removeChildren();
      assertFalse(node0.equals((Object)node1));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNull(node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertTrue(node0.isHook());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFunction());
      assertEquals(98, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node1, node0);
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      assertNotNull(nodeUtil_NumbericResultPredicate0);
      
      boolean boolean1 = NodeUtil.has(node1, nodeUtil_BooleanResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node1, node0);
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(51, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Node node0 = new Node((-1813));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1813), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node1 = NodeUtil.newVarNode("82wrK", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1813), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertEquals(118, node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertTrue(node1.isVar());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for PARAM_LIST (type 83)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Node node0 = new Node(2558);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(2558, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      boolean boolean0 = googleCodingConvention0.isPrototypeAlias(node0);
      assertFalse(boolean0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(2558, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      
      InputId inputId0 = NodeUtil.getInputId(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNull(inputId0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(2558, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(2558, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      
      JSType jSType0 = node0.getJSType();
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(jSType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      
      boolean boolean0 = NodeUtil.isCommutative(51);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStr(1);
      assertNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(8);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean1 = NodeUtil.isSwitchCase(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isVoid());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isComma());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      
      String string1 = NodeUtil.arrayToString(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals("", string1);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(string1);
      assertNotSame(node0, node1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertEquals(83, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLatin("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = 86;
      String string0 = NodeUtil.opToStr(86);
      assertEquals("=", string0);
      assertNotNull(string0);
      
      int int1 = NodeUtil.precedence(86);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(151);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 151
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-1397), (-472), (-472));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = new Node(41);
      assertFalse(node1.equals((Object)node0));
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node1);
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isNull());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertEquals(41, node1.getType());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      
      Node node2 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotNull(node2);
      assertNotSame(node2, node1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThrow());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertEquals(33, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertTrue(node2.isGetProp());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVar());
      assertFalse(node2.isContinue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNE());
      assertFalse(node2.isNumber());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isInstanceOf());
      
      Node node3 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertTrue(node3.isGetProp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCatch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isNE());
      assertFalse(node3.isVar());
      assertFalse(node3.isNull());
      assertFalse(node3.isIn());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isNew());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertEquals(33, node3.getType());
      assertFalse(node3.isCall());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isReturn());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isInc());
      assertFalse(node3.isDo());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isBlock());
      assertEquals((-1), node3.getLineno());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNumber());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isFor());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getSourceOffset());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Double double0 = NodeUtil.getNumberValue(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(double0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.isNull());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertEquals(41, node1.getType());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node3, (-1058));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isFalse());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertEquals(43, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      
      Node node1 = NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isFalse());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertEquals(43, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertTrue(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(118, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("i.");
      assertEquals("i.", string0);
      assertNotNull(string0);
      
      Double double0 = NodeUtil.getStringNumberValue("i.");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement1 = new NodeUtil.MatchShallowStatement();
      assertFalse(nodeUtil_MatchShallowStatement1.equals((Object)nodeUtil_MatchShallowStatement0));
      assertNotNull(nodeUtil_MatchShallowStatement1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      assertTrue(string1.equals((Object)string0));
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = new Node(15, 1541, 15);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(15, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      
      Node node1 = new Node(122);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node1);
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(122, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(15, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      assertNotNull(nodeUtil_NumbericResultPredicate0);
      
      boolean boolean1 = nodeUtil_NumbericResultPredicate0.equals(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(15, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      
      boolean boolean2 = NodeUtil.isWithinLoop(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(15, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(122, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWith());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isBreak());
      assertFalse(node2.isHook());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertEquals(122, node2.getType());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCall());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      
      boolean boolean3 = NodeUtil.containsFunction(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertEquals(122, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isFor());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isAssignAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isWith());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInstanceOf());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isBreak());
      assertFalse(node2.isHook());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertEquals(122, node2.getType());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isCall());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      
      NodeUtil.getImpureBooleanValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isNew());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertEquals(15, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      
      String string2 = NodeUtil.opToStr(31);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      assertTrue(string1.equals((Object)string0));
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = new Node(15, 1578, 15);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertEquals(1578, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(6463503, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      
      Node node1 = new Node(16);
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node1);
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertEquals(16, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertEquals(1578, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(15, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(6463503, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isEmpty());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(121);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = compiler_IntermediateState0.externsRoot;
      assertNull(node0);
      
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile((Node) null);
      assertNull(staticSourceFile0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertNotNull(node0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      assertNotNull(reorderConstantExpression0);
      
      ReorderConstantExpression reorderConstantExpression1 = new ReorderConstantExpression();
      assertFalse(reorderConstantExpression1.equals((Object)reorderConstantExpression0));
      assertNotNull(reorderConstantExpression1);
      
      ReorderConstantExpression reorderConstantExpression2 = new ReorderConstantExpression();
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression1));
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression0));
      assertNotNull(reorderConstantExpression2);
      
      Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
      assertFalse(reorderConstantExpression0.equals((Object)reorderConstantExpression2));
      assertFalse(reorderConstantExpression0.equals((Object)reorderConstantExpression1));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node1);
      assertSame(node0, node1);
      assertNotSame(reorderConstantExpression0, reorderConstantExpression2);
      assertNotSame(reorderConstantExpression0, reorderConstantExpression1);
      assertSame(node1, node0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(33, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertFalse(reorderConstantExpression0.equals((Object)reorderConstantExpression2));
      assertFalse(reorderConstantExpression0.equals((Object)reorderConstantExpression1));
      assertTrue(boolean0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertSame(node0, node1);
      assertNotSame(reorderConstantExpression0, reorderConstantExpression2);
      assertNotSame(reorderConstantExpression0, reorderConstantExpression1);
      assertSame(node1, node0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertEquals(33, node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      
      String string0 = NodeUtil.opToStr(4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
      assertNotNull(string0);
      
      Node node0 = new Node(100);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isOr());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertEquals(100, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isValidPropertyName("q(e+t;i");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals(44, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      
      NodeUtil.getImpureBooleanValue(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals(44, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean0 = NodeUtil.isReferenceName(node0);
      boolean boolean1 = NodeUtil.isExprCall(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.isFalse());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Node node0 = new Node(98);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(98, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
      
      Node node1 = Node.newString(822, ":mEAp(S+h [F:)T5l");
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotNull(node1);
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertEquals(822, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertEquals(822, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDo());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = new Node(96);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertTrue(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(122, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node1);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      
      CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(jqueryCodingConvention0);
      assertNotNull(codingConventions_Proxy0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(codingConventions_Proxy0.getExportPropertyFunction());
      assertNull(codingConventions_Proxy0.getAbstractMethodName());
      assertEquals("window", codingConventions_Proxy0.getGlobalObject());
      assertNull(codingConventions_Proxy0.getExportSymbolFunction());
      assertNull(codingConventions_Proxy0.getDelegateSuperclassName());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(codingConventions_Proxy0);
      assertNotNull(googleCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(codingConventions_Proxy0.getExportPropertyFunction());
      assertNull(codingConventions_Proxy0.getAbstractMethodName());
      assertEquals("window", codingConventions_Proxy0.getGlobalObject());
      assertNull(codingConventions_Proxy0.getExportSymbolFunction());
      assertNull(codingConventions_Proxy0.getDelegateSuperclassName());
      assertNull(googleCodingConvention0.getExportSymbolFunction());
      assertNull(googleCodingConvention0.getExportPropertyFunction());
      assertEquals("window", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertNull(googleCodingConvention0.getAbstractMethodName());
      
      boolean boolean1 = NodeUtil.isSwitchCase(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertTrue(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(122, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      
      boolean boolean2 = NodeUtil.mayBeStringHelper(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertTrue(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(122, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      
      NodeUtil.getImpureBooleanValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertTrue(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isVar());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals(122, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertEquals(122, node0.getType());
      assertTrue(node0.isVoid());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      
      Node node1 = ControlFlowAnalysis.computeFollowNode(node0);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNull(node1);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertEquals(122, node0.getType());
      assertTrue(node0.isVoid());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      
      Node node2 = AbstractPeepholeOptimization.validateResult((Node) null);
      assertNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.isEmptyFunctionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = new Node(96, 96, 96);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertEquals(96, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals(393312, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertEquals(96, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals(393312, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertEquals(96, node1.getCharno());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertEquals(393312, node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTry());
      assertTrue(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals(96, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertEquals(96, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals(393312, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertEquals(96, node1.getCharno());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertEquals(393312, node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTry());
      assertTrue(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertEquals(96, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(134);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 134
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CASE (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      assertNotNull(exploitAssigns0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      assertNotNull(peepholeSubstituteAlternateSyntax0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ".*Bb@jS1&i9k10~Q");
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertEquals(33, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      boolean boolean0 = NodeUtil.isGet(node0);
      assertTrue(boolean0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertEquals(33, node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      assertNotNull(peepholeSimplifyRegExp0);
      
      Node node0 = Node.newString("*Bb@jS1&i9k10~Q", 127, 127);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(127, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(127, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertEquals(520319, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      Node node1 = peepholeSimplifyRegExp0.optimizeSubtree(node0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node1);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(127, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(127, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertEquals(520319, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(520319, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(127, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals(127, node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      
      String string0 = NodeUtil.getNearestFunctionName(node1);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNull(string0);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals(127, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(127, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertEquals(520319, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node1.isWhile());
      assertEquals(520319, node1.getSourcePosition());
      assertTrue(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertEquals(127, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertEquals(127, node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      assertNotNull(peepholeCollectPropertyAssignments0);
      
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals(43, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      
      Node node1 = peepholeCollectPropertyAssignments0.optimizeSubtree(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertNotNull(node1);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals(43, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertTrue(node1.isFalse());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertEquals(43, node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertNotNull(double0);
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals(43, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertTrue(node1.isFalse());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertEquals(43, node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for DEFAULT_CASE (type 112)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
      
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
      
      Node node0 = Node.newString("MIN");
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(77);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
      assertNotNull(compiler1);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      
      Node node0 = Node.newString("com.google.javascript.jscomp.NameReferenceGraphConstruction$NameUse");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTrue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(45);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      boolean boolean0 = NodeUtil.isLatin("y3 }k=mA)");
      assertTrue(boolean0);
      
      Node node1 = Node.newString(":0?sV<)nQQHIOc");
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertEquals(40, node1.getType());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isAssignAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isIn());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNull(node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      boolean boolean1 = NodeUtil.isAssociative(29);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = NodeUtil.opToStr(29);
      assertEquals("-", string0);
      assertNotNull(string0);
      
      boolean boolean2 = NodeUtil.isLatin(":0?sV<)nQQHIOc");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node node0 = Node.newString(102, "y6__+rp{rW", (-1), 102);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(102, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isInc());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
      
      boolean boolean1 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(102, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWith());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isInc());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertEquals(43, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      
      Node node1 = NodeUtil.newVarNode("\n parent:", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertEquals(43, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isComma());
      assertTrue(node1.isVar());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 82
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = NodeUtil.opToStr(61);
      assertNull(string0);
      
      Node node0 = new Node(61);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotNull(node0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(61, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(61, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1177));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1177
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Node node0 = new Node(98);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertTrue(node0.isHook());
      assertEquals(98, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      Node node1 = new Node(51);
      assertFalse(node1.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node1);
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNull());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertEquals(51, node1.getType());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      
      Node node2 = node0.removeChildren();
      assertFalse(node0.equals((Object)node1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNull(node2);
      assertNotSame(node0, node1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNull());
      assertTrue(node0.isHook());
      assertEquals(98, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 48
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      assertNotNull(nodeUtil_NumbericResultPredicate0);
      
      Node node0 = new Node(146);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertEquals(146, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 146
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 23;
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
      assertNotNull(string0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Node node0 = Node.newString(105, "2!2", 105, 23);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(105, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertTrue(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(430103, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(23, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionJSDocInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Node node0 = new Node((-1310));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertEquals((-1310), node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node1 = Node.newString("f");
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotNull(node1);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isNull());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNew());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertEquals(33, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      assertNotNull(reorderConstantExpression0);
      
      ReorderConstantExpression reorderConstantExpression1 = new ReorderConstantExpression();
      assertFalse(reorderConstantExpression1.equals((Object)reorderConstantExpression0));
      assertNotNull(reorderConstantExpression1);
      
      ReorderConstantExpression reorderConstantExpression2 = new ReorderConstantExpression();
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression1));
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression0));
      assertNotNull(reorderConstantExpression2);
      
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertEquals(33, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for DO (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(54);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("y3 }k=mA)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNull(string0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isWith());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      assertTrue(string1.equals((Object)string0));
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = new Node(15, 1541, 15);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(15, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      
      Node node1 = new Node(52);
      assertFalse(node1.equals((Object)node0));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node1);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertEquals(52, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = sourceMap_DetailLevel0.apply(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node1, node0);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertEquals(52, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      
      SourceMap.DetailLevel sourceMap_DetailLevel1 = SourceMap.DetailLevel.SYMBOLS;
      boolean boolean1 = sourceMap_DetailLevel1.apply(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(sourceMap_DetailLevel1.equals((Object)sourceMap_DetailLevel0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node1, node0);
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertEquals(52, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertTrue(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      boolean boolean2 = NodeUtil.isRelationalOperation(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(15, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertEquals(15, node0.getCharno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertEquals(6311951, node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertEquals(1541, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 4095);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAnd());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(83, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      
      InputId inputId0 = NodeUtil.getInputId(node0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNull(inputId0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAnd());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCatch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(83, node0.getType());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Node node0 = new Node(200);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(200, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      
      Node node1 = NodeUtil.booleanNode(true);
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals(44, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isScript());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      
      Node[] nodeArray0 = new Node[0];
      Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, nodeArray0.length);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotNull(node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(200, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(37, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertTrue(node2.isCall());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      
      Node node3 = Node.newString(42, "AGGRESSIVE_HEURISTIC");
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node3);
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCall());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertEquals((-1), node3.getLineno());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isOr());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isTry());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isParamList());
      assertFalse(node3.isCase());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isHook());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isIf());
      assertEquals(42, node3.getType());
      assertFalse(node3.isNE());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertFalse(node3.isVoid());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isExprResult());
      assertTrue(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.isFromExterns());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isString());
      
      String string0 = node2.getQualifiedName();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertEquals(0, nodeArray0.length);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNull(string0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(200, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(37, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertTrue(node2.isCall());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      
      boolean boolean0 = NodeUtil.isNumericResultHelper(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertEquals(0, nodeArray0.length);
      assertFalse(boolean0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(200, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(37, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertTrue(node2.isCall());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      
      boolean boolean1 = NodeUtil.mayBeString(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, nodeArray0.length);
      assertTrue(boolean1);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(200, node0.getType());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(37, node2.getType());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertTrue(node2.isCall());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(2982, node0.getType());
      
      Node node1 = Node.newString(":0?sV<)nQQHIOc");
      assertFalse(node1.equals((Object)node0));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDo());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertTrue(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNull(node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(2982, node0.getType());
      
      boolean boolean1 = NodeUtil.isAssociative(29);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotSame(node0, node1);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(2982, node0.getType());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(129);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 129
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = new Node(113);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(113, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(113, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertFalse(boolean0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(113, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      boolean boolean1 = nodeUtil_MatchShallowStatement0.apply(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(113, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertTrue(node0.isWhile());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(634);
      assertEquals((-1), int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = new Node(103, 103, 39);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertEquals(103, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(39, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(421927, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(103, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertEquals(103, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(39, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(421927, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(103, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(39, node1.getCharno());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isFalse());
      assertEquals(103, node1.getLineno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      assertEquals(421927, node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotSame(node0, node1);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertEquals(103, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(39, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(421927, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals(103, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertTrue(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      boolean boolean1 = NodeUtil.isValidQualifiedName("0?sV<)nQQHHOc.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newString(1940, "infinity");
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1940, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      
      Node node1 = new Node(30, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node1);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1940, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(30, node1.getType());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      
      Node node2 = node0.useSourceInfoFromForTree(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node2);
      assertSame(node0, node2);
      assertSame(node2, node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1940, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(30, node1.getType());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isSetterDef());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertEquals((-1), node2.getSourceOffset());
      assertEquals(1940, node2.getType());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVar());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertSame(node0, node2);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(1940, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDefaultCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertEquals(30, node1.getType());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.isNew());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isNE());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = new Node(120);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals(120, node0.getType());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      
      boolean boolean1 = NodeUtil.isConstantName(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      
      Node node1 = new Node(81, node0, node0, 1, 53);
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertEquals(4149, node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertEquals(81, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLabel());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      
      Node node2 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isComma());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isOr());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isInc());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isThrow());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertEquals(122, node2.getType());
      assertFalse(node2.isIn());
      assertTrue(node2.isVoid());
      
      // Undeclared exception!
      try { 
        NodeUtil.getRValueOfLValue(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = Node.newString(1574, "!==");
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(1574, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNull(string0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(1574, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(1574, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      boolean boolean1 = NodeUtil.isWithinLoop(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(1574, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      boolean boolean2 = NodeUtil.isForIn(node0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(1574, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      NodeUtil.getPureBooleanValue(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(1574, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = new Node(92);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(92, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
      assertNotNull(compiler1);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
      
      Node node1 = Node.newString("com.google.javascript.jscomp.NameReferenceGraphConstruction$NameUse");
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node1);
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isReturn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTry());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAdd());
      assertFalse(node1.isHook());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      
      Compiler compiler2 = new Compiler();
      assertFalse(compiler2.equals((Object)compiler0));
      assertFalse(compiler2.equals((Object)compiler1));
      assertNotNull(compiler2);
      assertEquals(0.0, compiler2.getProgress(), 0.01);
      
      NodeUtil.isStrWhiteSpaceChar(1);
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("com/google/javascript/rhino/head/Script");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      
      Node node0 = Node.newString("_yERJR9qW");
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      
      Node node1 = new Node(47, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFromExterns());
      assertEquals(47, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      
      boolean boolean2 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFromExterns());
      assertEquals(47, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      assertNotNull(exploitAssigns0);
      
      boolean boolean3 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      
      NodeUtil.isStrWhiteSpaceChar(42);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "");
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      boolean boolean0 = NodeUtil.isLatin("");
      assertTrue(boolean0);
      
      String string0 = ":0?sV\\<)nQQHIOc";
      Node node1 = Node.newString(":0?sV<)nQQHIOc");
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertEquals(40, node1.getType());
      assertTrue(node1.isString());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getLineno());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNot());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNull(node2);
      assertNotSame(node0, node1);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = NodeUtil.opToStr(131);
      assertNull(string0);
      
      String string1 = NodeUtil.getStringValue(131);
      assertEquals("131", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(121);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 121
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Node node0 = new Node((-26), (-26), (-26));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertEquals((-26), node0.getType());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      
      // Undeclared exception!
      try { 
        NodeUtil.getBestLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      
      node0.setLineno(2982);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertEquals(2982, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(12214272, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      
      Node node1 = new Node(48, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node1);
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertEquals(2982, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(12214272, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals(48, node1.getType());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = NodeUtil.isStatementBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertEquals(2982, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(12214272, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals(48, node1.getType());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNE());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = NodeUtil.opToStr(82);
      assertNull(string0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
      assertFalse(boolean0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("-infinity", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Node node0 = new Node(90);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertEquals(90, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertEquals(90, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isVoid());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      
      boolean boolean0 = NodeUtil.isGet(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertEquals(90, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isVoid());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertEquals(90, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isVoid());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      
      StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertNull(staticSourceFile0);
      assertNotSame(node0, node1);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertEquals(90, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      
      boolean boolean2 = NodeUtil.containsCall(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isVar());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFor());
      assertEquals(90, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.isVoid());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertEquals(122, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isFalse());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      Node node1 = NodeUtil.newVarNode("]q~*:GeVq$luq]v", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isFalse());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(43, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertTrue(node1.isVar());
      assertEquals(118, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(131);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 131
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(">MiL", ">MiL");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // >MiL
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node node0 = new Node((-2165), (-2165), (-2165));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-2165), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      
      Node node1 = new Node(31);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertNotNull(node1);
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertEquals(31, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isIf());
      assertTrue(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.isScript());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWhile());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isString());
      assertEquals(83, node2.getType());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      
      Node node3 = NodeUtil.newUndefinedNode(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.isScript());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWhile());
      assertTrue(node2.isParamList());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isString());
      assertEquals(83, node2.getType());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isOr());
      assertFalse(node3.isReturn());
      assertTrue(node3.isVoid());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isWith());
      assertFalse(node3.isWhile());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInstanceOf());
      assertEquals(122, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isComma());
      assertFalse(node3.isInc());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isFunction());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTrue());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isVar());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isScript());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isArrayLit());
      
      Node node4 = NodeUtil.newUndefinedNode((Node) null);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node4);
      assertNotSame(node4, node2);
      assertNotSame(node4, node3);
      assertNotSame(node4, node0);
      assertNotSame(node4, node1);
      assertFalse(node4.isContinue());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isDo());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isLabel());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isWhile());
      assertFalse(node4.isReturn());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isGetElem());
      assertEquals(122, node4.getType());
      assertFalse(node4.isAssign());
      assertNull(node4.getSourceFileName());
      assertFalse(node4.isName());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isCall());
      assertFalse(node4.isAdd());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isOr());
      assertTrue(node4.isVoid());
      assertFalse(node4.isNull());
      assertFalse(node4.isWith());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertFalse(node4.isScript());
      assertFalse(node4.isTry());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isThis());
      assertFalse(node4.isStringKey());
      assertEquals((-1), node4.getSourceOffset());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isNumber());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isParamList());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isCase());
      assertFalse(node4.isIn());
      assertFalse(node4.isString());
      assertFalse(node4.isInc());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isHook());
      assertEquals(1, node4.getChildCount());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isFor());
      assertFalse(node4.isThrow());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isTrue());
      assertFalse(node4.isAnd());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isComma());
      assertFalse(node4.isFunction());
      assertFalse(node4.isFalse());
      assertFalse(node4.isDebugger());
      assertEquals((-1), node4.getSourcePosition());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertNotSame(node1, node0);
      assertNotSame(node1, node4);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertEquals(31, node1.getType());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isIf());
      assertTrue(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      
      Node node5 = NodeUtil.getBestLValueOwner(node0);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNull(node5);
      assertNotSame(node0, node4);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-2165), node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      
      Node node6 = Node.newNumber((double) 42);
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node0));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node6);
      assertFalse(node6.isFunction());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isVoid());
      assertFalse(node6.isTry());
      assertFalse(node6.isDefaultCase());
      assertFalse(node6.isTrue());
      assertFalse(node6.isFor());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isArrayLit());
      assertFalse(node6.isCatch());
      assertTrue(node6.isNumber());
      assertFalse(node6.isParamList());
      assertFalse(node6.isCase());
      assertEquals((-1), node6.getSourceOffset());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isString());
      assertFalse(node6.isBlock());
      assertFalse(node6.isHook());
      assertFalse(node6.isThrow());
      assertFalse(node6.isFalse());
      assertEquals(39, node6.getType());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isContinue());
      assertEquals((-1), node6.getLineno());
      assertFalse(node6.isIf());
      assertFalse(node6.isNE());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isIn());
      assertFalse(node6.isInc());
      assertFalse(node6.isGetElem());
      assertFalse(node6.isWith());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isDec());
      assertFalse(node6.isAssign());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isComma());
      assertFalse(node6.isFromExterns());
      assertEquals((-1), node6.getSourcePosition());
      assertFalse(node6.hasChildren());
      assertFalse(node6.isAnd());
      assertFalse(node6.isThis());
      assertFalse(node6.isReturn());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isNot());
      assertFalse(node6.isScript());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isNew());
      assertFalse(node6.isAdd());
      assertEquals((-1), node6.getCharno());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isWhile());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isVar());
      assertFalse(node6.isName());
      assertFalse(node6.isBreak());
      assertFalse(node6.isCall());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isLabel());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isOr());
      assertFalse(node6.isNull());
      assertFalse(node6.isDo());
      assertNull(node6.getSourceFileName());
      assertFalse(node6.isEmpty());
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
      
      PeepholeFoldWithTypes peepholeFoldWithTypes1 = new PeepholeFoldWithTypes();
      assertFalse(peepholeFoldWithTypes1.equals((Object)peepholeFoldWithTypes0));
      assertNotNull(peepholeFoldWithTypes1);
      
      // Undeclared exception!
      try { 
        peepholeFoldWithTypes0.optimizeSubtree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldWithTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "rpxIZ6O#");
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNotNull(node0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertTrue(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node1);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertTrue(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertTrue(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertEquals(122, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      
      JSType jSType0 = node0.getJSType();
      assertFalse(node0.equals((Object)node1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNull(jSType0);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertTrue(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      
      boolean boolean2 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertTrue(node0.isName());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      
      node0.addChildrenToFront(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertTrue(node0.isName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Double double0 = NodeUtil.getStringNumberValue("com.google.javascript.jscomp.CodingConventions$Proxy");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSType jSType0 = linkedList0.pollFirst();
      assertNull(jSType0);
      assertEquals(0, linkedList0.size());
      
      Node node0 = new Node(95, 2173, 1);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals(8900609, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertEquals(2173, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(95, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      Node node1 = new Node(114, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node1);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals(8900609, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertEquals(2173, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(95, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isDo());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertEquals(114, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      
      node1.setSourceEncodedPositionForTree(4276);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCatch());
      assertEquals(4276, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertEquals(180, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(95, node0.getType());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isComma());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertEquals(180, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isDo());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertEquals(114, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(4276, node1.getSourcePosition());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(71);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "gQhW");
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertTrue(node0.isName());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      int int1 = NodeUtil.getCount(node0, sourceMap_DetailLevel0, sourceMap_DetailLevel0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertTrue(node0.isName());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertEquals(38, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      boolean boolean0 = NodeUtil.isCommutative(384);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
      
      Node node0 = Node.newString("com.google.javascript.jscomp.AnonymousFunctionNamingCallback");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      
      Node node1 = NodeUtil.getBestLValueOwner(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNull(node1);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      int int0 = 75;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(75);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 75
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = new Node(87);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(87, node0.getType());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Object object0 = node0.getProp(87);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNull(object0);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(87, node0.getType());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      Node node1 = new Node(32);
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node1);
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertEquals(32, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
      assertNotNull(nodeUtil_NumbericResultPredicate0);
      
      boolean boolean0 = NodeUtil.has(node1, nodeUtil_BooleanResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node1, node0);
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertTrue(node1.isTypeOf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isComma());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertEquals(32, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFromExterns());
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(138, 138, 138);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node0);
      assertEquals(565386, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(138, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(138, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertEquals(138, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
      
      int int1 = NodeUtil.precedence(47);
      assertTrue(int1 == int0);
      assertEquals(15, int1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(255, (-1428), 255);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(255, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      
      Node node1 = Node.newString("n|F(/\"");
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node1);
      assertEquals(40, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      
      Node node2 = new Node(54, node0, node0, node1, node0, 2, 32);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node2);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertEquals(255, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertEquals(8224, node2.getSourcePosition());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isDo());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertEquals(2, node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBreak());
      assertEquals(54, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertEquals(32, node2.getCharno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInstanceOf());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "|goog.tweak.gStrng");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals(33, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.isGetProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertEquals(33, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNot());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      Node node1 = new Node(1, 47, 38);
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotNull(node1);
      assertFalse(node1.isParamList());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertEquals(1, node1.getType());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(192550, node1.getSourcePosition());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isFunction());
      assertEquals(38, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      
      Node node0 = Node.newString("JSCompiler_renameProperty");
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      
      Node node1 = Node.newString(147, "Boolean");
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertEquals(147, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node1, node0);
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertEquals(147, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      boolean boolean1 = googleCodingConvention0.isPrototypeAlias(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotSame(node0, node1);
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
      assertTrue(boolean0);
      
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean1 = NodeUtil.isCommutative((-384));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
      assertFalse(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Node node0 = new Node(118);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(118, node0.getType());
      assertTrue(node0.isVar());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      
      int int0 = NodeUtil.getNameReferenceCount(node0, "RZ3;Rg~xfXU");
      assertEquals(0, int0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(118, node0.getType());
      assertTrue(node0.isVar());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(98);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertEquals(98, node0.getType());
      assertFalse(node0.isCall());
      assertTrue(node0.isHook());
      assertFalse(node0.isCatch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".(Fa->Y|<m\"");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("Operand out of range, bitwise operation will lose information: {0}");
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Operand out of range, bitwise operation will lose information: {0}");
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertNotNull(printStream0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream1);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0, false);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)printStream0));
      assertNotNull(mockPrintStream2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) node0;
      objectArray0[1] = (Object) objectOutputStream0;
      objectArray0[2] = (Object) objectOutputStream0;
      objectArray0[3] = (Object) node0;
      objectArray0[4] = (Object) "Operand out of range, bitwise operation will lose information: {0}";
      PrintStream printStream1 = mockPrintStream1.printf(".(Fa->Y|<m\"", objectArray0);
      assertFalse(printStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream1.equals((Object)mockPrintStream2));
      assertFalse(printStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream2));
      assertEquals(5, objectArray0.length);
      assertNotNull(printStream1);
      assertNotSame(printStream1, mockPrintStream0);
      assertSame(printStream1, mockPrintStream1);
      assertNotSame(printStream1, mockPrintStream2);
      assertNotSame(printStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertSame(mockPrintStream1, printStream1);
      assertNotSame(mockPrintStream1, mockPrintStream2);
      
      boolean boolean0 = NodeUtil.isLatin("<<=");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getImpureBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSType jSType0 = linkedList0.pollFirst();
      assertNull(jSType0);
      assertEquals(0, linkedList0.size());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = Node.newString(40, "Not declared as a constructor", 48, 2);
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node1);
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals(196610, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTrue());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      
      Node node2 = NodeUtil.newVarNode("Named type with empty name component", node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node2);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertEquals(118, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.isVar());
      assertFalse(node2.isComma());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node3 = peepholeRemoveDeadCode0.tryOptimizeBlock(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertEquals(0, linkedList0.size());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertEquals(118, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.isVar());
      assertFalse(node2.isComma());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isScript());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNot());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNew());
      assertFalse(node3.isComma());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isVoid());
      assertFalse(node3.isAdd());
      assertFalse(node3.isTrue());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertTrue(node3.hasChildren());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isRegExp());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isString());
      assertFalse(node3.isCase());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isThrow());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isBlock());
      assertTrue(node3.isVar());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInc());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertEquals(118, node3.getType());
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertEquals(0, linkedList0.size());
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isNew());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertEquals(118, node2.getType());
      assertFalse(node2.isName());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.isVar());
      assertFalse(node2.isComma());
      assertFalse(node2.isFunction());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      boolean boolean2 = NodeUtil.isSimpleFunctionObjectCall(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals(196610, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTrue());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      
      Double double0 = NodeUtil.getNumberValue(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(double0);
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssignAdd());
      assertEquals(196610, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isWhile());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isTrue());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isOr());
      
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node2, 47);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
      
      Node node0 = new Node(105);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertEquals(33, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Double double0 = NodeUtil.getStringNumberValue("Infinity");
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertNotNull(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
      assertNotNull(reorderConstantExpression0);
      
      ReorderConstantExpression reorderConstantExpression1 = new ReorderConstantExpression();
      assertFalse(reorderConstantExpression1.equals((Object)reorderConstantExpression0));
      assertNotNull(reorderConstantExpression1);
      
      ReorderConstantExpression reorderConstantExpression2 = new ReorderConstantExpression();
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression1));
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression0));
      assertNotNull(reorderConstantExpression2);
      
      Node node2 = reorderConstantExpression2.optimizeSubtree(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression1));
      assertFalse(reorderConstantExpression2.equals((Object)reorderConstantExpression0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertNotNull(node2);
      assertNotSame(node0, node1);
      assertSame(node0, node2);
      assertNotSame(reorderConstantExpression2, reorderConstantExpression1);
      assertNotSame(reorderConstantExpression2, reorderConstantExpression0);
      assertSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isFor());
      assertEquals(105, node2.getType());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isWith());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.isFunction());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isThrow());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFromExterns());
      
      boolean boolean1 = NodeUtil.mayBeString(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertEquals(33, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
      
      NodeUtil.getPureBooleanValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertEquals(33, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(107);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStr(76);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isBooleanResultHelper((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = new Node(64);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertEquals(64, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.isObjectLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCatch());
      assertEquals(64, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      
      boolean boolean1 = NodeUtil.isValidQualifiedName("Gi):dhsd(\b0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Node node0 = new Node(105, 105, 106);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(106, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals(430186, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(105, node0.getLineno());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals(106, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals(430186, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isFunction());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(105, node0.getLineno());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      int int0 = 108;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.trimJsWhiteSpace("JSCompiler_renameProperty");
      assertTrue(string1.equals((Object)string0));
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = Node.newString(1960, "infinity");
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(1960, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      
      Node node1 = new Node(30, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node1);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertEquals(1960, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFalse());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertTrue(node1.isNew());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertEquals(30, node1.getType());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      
      Node node2 = Node.newNumber((double) 52);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node2);
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertEquals(39, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isParamList());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNull());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertTrue(node2.isNumber());
      assertFalse(node2.isString());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      
      boolean boolean0 = NodeUtil.isCommutative(4095);
      assertFalse(boolean0);
      
      String string2 = NodeUtil.opToStr(40);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("o|x.36|R#[35@E%)W;]", (Node) null);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertEquals(118, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertTrue(node0.isVar());
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-1621));
      assertFalse(boolean0);
      
      Node node0 = new Node((-1621));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertEquals((-1621), node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JqueryCodingConvention jqueryCodingConvention1 = new JqueryCodingConvention();
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      assertNotNull(jqueryCodingConvention1);
      assertNull(jqueryCodingConvention1.getAbstractMethodName());
      assertNull(jqueryCodingConvention1.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertNull(jqueryCodingConvention1.getExportPropertyFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention1, "goog.tweak.getString");
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node1);
      assertNotSame(jqueryCodingConvention1, jqueryCodingConvention0);
      assertNotSame(node1, node0);
      assertNull(jqueryCodingConvention1.getAbstractMethodName());
      assertNull(jqueryCodingConvention1.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertNull(jqueryCodingConvention1.getExportPropertyFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      assertFalse(node1.isInc());
      assertEquals(33, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertTrue(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Node node2 = NodeUtil.newUndefinedNode(node1);
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(node2);
      assertNotSame(jqueryCodingConvention1, jqueryCodingConvention0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNull(jqueryCodingConvention1.getAbstractMethodName());
      assertNull(jqueryCodingConvention1.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertNull(jqueryCodingConvention1.getExportPropertyFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      assertFalse(node1.isInc());
      assertEquals(33, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertTrue(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertTrue(node2.isVoid());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertEquals(122, node2.getType());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      
      boolean boolean1 = NodeUtil.canBeSideEffected(node1);
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(jqueryCodingConvention1, jqueryCodingConvention0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNull(jqueryCodingConvention1.getAbstractMethodName());
      assertNull(jqueryCodingConvention1.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertNull(jqueryCodingConvention1.getExportPropertyFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      assertFalse(node1.isInc());
      assertEquals(33, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertTrue(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      
      Node node3 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertEquals((-1621), node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertTrue(node3.isVoid());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isThis());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isBlock());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isAdd());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isParamList());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDefaultCase());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isEmpty());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      assertEquals(122, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      
      boolean boolean2 = NodeUtil.mayBeString(node2, false);
      assertFalse(jqueryCodingConvention1.equals((Object)jqueryCodingConvention0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(jqueryCodingConvention1, jqueryCodingConvention0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertNull(jqueryCodingConvention1.getAbstractMethodName());
      assertNull(jqueryCodingConvention1.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention1.getGlobalObject());
      assertNull(jqueryCodingConvention1.getExportPropertyFunction());
      assertNull(jqueryCodingConvention1.getDelegateSuperclassName());
      assertFalse(node1.isInc());
      assertEquals(33, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNumber());
      assertTrue(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertTrue(node2.isVoid());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertEquals(122, node2.getType());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isInc());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAnd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      
      JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNull(jSDocInfo0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertEquals((-1621), node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      
      boolean boolean3 = NodeUtil.isSymmetricOperation(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertEquals((-1621), node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertTrue(node3.isVoid());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isThis());
      assertFalse(node3.isWith());
      assertFalse(node3.isBreak());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isExprResult());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isBlock());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isAdd());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isParamList());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDefaultCase());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isEmpty());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isIn());
      assertFalse(node3.isNull());
      assertFalse(node3.isNE());
      assertFalse(node3.isDelProp());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isIf());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertFalse(node3.isCatch());
      assertTrue(node3.hasChildren());
      assertEquals(122, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string0);
      assertNotNull(string0);
      
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      assertEquals("JSCompiler_renameProperty", string1);
      assertNotNull(string1);
      
      Node node0 = new Node(120);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertTrue(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(120, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node0);
      assertFalse(boolean0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertTrue(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(120, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasOneChild());
      
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = Node.newString(102, "y6__+rp{rW", (-1), 102);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(102, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertTrue(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(102, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertTrue(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(33);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = new Node(98);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(98, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertTrue(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      Node node1 = new Node(51);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node1);
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertEquals(51, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      
      Node node2 = node0.removeChildren();
      assertFalse(node0.equals((Object)node1));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNull(node2);
      assertNotSame(node0, node1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(98, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertTrue(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotSame(node1, node0);
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFor());
      assertFalse(node1.isNumber());
      assertEquals(51, node1.getType());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertTrue(node1.isIn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      
      Node node3 = Node.newString("JSC_INEXISTENT_PROPERTY");
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node3);
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isContinue());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertEquals((-1), node3.getSourceOffset());
      assertEquals(40, node3.getType());
      assertFalse(node3.isScript());
      assertFalse(node3.isFor());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isThis());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNull());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      
      boolean boolean1 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotSame(node0, node1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(98, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertTrue(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      boolean boolean2 = NodeUtil.isRelationalOperation(node0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotSame(node0, node1);
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertEquals(98, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertTrue(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      NodeUtil.getImpureBooleanValue(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node3.isBlock());
      assertFalse(node3.isVar());
      assertFalse(node3.isAdd());
      assertNull(node3.getSourceFileName());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSetterDef());
      assertTrue(node3.isString());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isContinue());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertEquals((-1), node3.getSourceOffset());
      assertEquals(40, node3.getType());
      assertFalse(node3.isScript());
      assertFalse(node3.isFor());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isThis());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isWith());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isHook());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isInc());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isTrue());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isReturn());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNull());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      
      String string0 = NodeUtil.opToStr(54);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      Compiler compiler1 = new Compiler();
      assertFalse(compiler1.equals((Object)compiler0));
      assertNotNull(compiler1);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler1.getState();
      assertFalse(compiler1.equals((Object)compiler0));
      assertNotNull(compiler_IntermediateState0);
      assertNotSame(compiler1, compiler0);
      assertEquals(0.0, compiler1.getProgress(), 0.01);
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(143);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(16);
      assertEquals(14, int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = new Node(14, 16, 16);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertFalse(node0.isTry());
      
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isString());
      assertEquals(122, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(65552, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node0, node1);
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertFalse(node0.isTry());
      
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      assertNotNull(nodeUtil_MatchShallowStatement0);
      
      Node node2 = NodeUtil.newExpr(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertEquals(16, node0.getLineno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isScript());
      assertEquals(65552, node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(14, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertEquals(16, node1.getLineno());
      assertFalse(node1.isString());
      assertEquals(122, node1.getType());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isVoid());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertEquals(16, node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(65552, node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isScript());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertTrue(node2.isExprResult());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isThis());
      assertEquals(130, node2.getType());
      assertEquals(16, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isRegExp());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isNumber());
      assertFalse(node2.isOr());
      assertNull(node2.getSourceFileName());
      assertFalse(node2.isLabelName());
      assertEquals(16, node2.getLineno());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals(65552, node2.getSourcePosition());
      assertFalse(node2.isVar());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isNull());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isComma());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: VOID 16 of LT 16
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
      
      Node node0 = new Node(105);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isFunction());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertEquals(105, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertFalse(node1.equals((Object)node0));
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFunction());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertEquals(33, node1.getType());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(101);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node node0 = Node.newString(141, "_@ocs");
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(141, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
      
      boolean boolean1 = NodeUtil.isLatin("_@ocs");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Node node1 = Node.newString("_@ocs");
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNull(node2);
      assertNotSame(node1, node0);
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(40, node1.getType());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      
      boolean boolean3 = NodeUtil.isAssociative(1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string0 = NodeUtil.opToStr(52);
      assertEquals("instanceof", string0);
      assertNotNull(string0);
      
      boolean boolean4 = NodeUtil.isLatin("instanceof");
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = new Node((-2165));
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals((-2165), node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      
      Node node1 = new Node(31);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node1);
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isDelProp());
      assertEquals(31, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      
      boolean boolean0 = NodeUtil.isSimpleOperator(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node1, node0);
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isDelProp());
      assertEquals(31, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      
      int int0 = new Integer((-2165));
      assertEquals((-2165), int0);
      
      boolean boolean1 = NodeUtil.containsCall(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node1, node0);
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOr());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getSourcePosition());
      assertTrue(node1.isDelProp());
      assertEquals(31, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = NodeUtil.booleanNode(true);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01);
      
      InputId inputId0 = NodeUtil.getInputId(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNull(inputId0);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-49);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-49)}, byteArray0);
      
      InputId inputId1 = NodeUtil.getInputId(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNull(inputId1);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      boolean boolean2 = NodeUtil.isStatementParent(node0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("true", string0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(string0);
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isVar());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 35);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(76);
      assertFalse(boolean0);
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(77);
      assertFalse(boolean0);
      
      Node node0 = new Node(68);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertEquals(68, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "goog.tweak.getString");
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(33, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasMoreThanOneChild());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      
      int int0 = NodeUtil.precedence(52);
      assertEquals(9, int0);
      
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node1, (JSType) null);
      assertFalse(node1.equals((Object)node0));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNull(jSType0);
      assertNotSame(node1, node0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isNot());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNew());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertEquals(33, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertTrue(node1.hasMoreThanOneChild());
      assertTrue(node1.isGetProp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(80);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(80, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertEquals(80, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*^zAb6DK");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = NodeUtil.opToStr((-2507));
      assertNull(string0);
      
      Node node0 = new Node((-2507));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-2507), node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      boolean boolean2 = NodeUtil.mayBeString(node0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-2507), node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(125);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for BLOCK (type 125)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        NodeUtil.precedence(137);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 137
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString(25, "u`(S8o");
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertEquals(25, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "0;yERJRW");
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertTrue(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      
      node0.setString("0;yERJRW");
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertTrue(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      assertNotNull(peepholeFoldWithTypes0);
      
      boolean boolean1 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertTrue(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(double0);
      assertNull(jqueryCodingConvention0.getExportPropertyFunction());
      assertNull(jqueryCodingConvention0.getExportSymbolFunction());
      assertNull(jqueryCodingConvention0.getAbstractMethodName());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertNull(jqueryCodingConvention0.getDelegateSuperclassName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertEquals(38, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertTrue(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      
      boolean boolean2 = NodeUtil.isCommutative((-2540));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = NodeUtil.booleanNode(false);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertEquals(43, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = NodeUtil.newVarNode("infinity", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertEquals(43, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isInc());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFalse());
      assertTrue(node1.isVar());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertEquals(118, node1.getType());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNew());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      
      // Undeclared exception!
      try { 
        NodeUtil.isExecutedExactlyOnce(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(53);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(53, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
      boolean boolean0 = sourceMap_DetailLevel0.apply(node0);
      assertTrue(boolean0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(53, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      assertNotNull(nodeUtil_BooleanResultPredicate0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 53
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      
      Node node1 = new Node(48, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertEquals(2982, node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isThrow());
      assertEquals(48, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertNull(node1.getSourceFileName());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(96);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(57);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(11);
      assertTrue(boolean0);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "q`=]S ");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      Node node2 = NodeUtil.newQualifiedNameNode((CodingConvention) jqueryCodingConvention0, "undefined", node1, "HW&HaEx_I6~wrL<> E");
      node2.setIsSyntheticBlock(false);
      node1.setVarArgs(false);
      Node.newString(105, "'g:m?");
      node1.getQualifiedName();
      boolean boolean1 = NodeUtil.isNumericResultHelper(node1);
      boolean boolean2 = NodeUtil.mayBeString(node2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(92);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      NodeUtil.isSimpleOperatorType(12);
      Compiler compiler2 = new Compiler();
      boolean boolean0 = NodeUtil.isCommutative(4095);
      NodeUtil.opToStr(158);
      NodeUtil.opToStr((-66));
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean1 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node0 = Node.newString("*Bb@jS1&i9k10~Q", 127, 127);
      node0.detachChildren();
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("*Bb@jS1&i9k10~Q", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertNotNull(string0);
      assertEquals("<<=", string0);
      
      Node node0 = new Node((-1813));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString("<<=");
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      peepholeCollectPropertyAssignments0.optimizeSubtree(node1);
      boolean boolean0 = NodeUtil.mayBeString(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      NodeUtil.precedence(94);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("NRg!m*\".gPUsY8os");
      assertFalse(node0.isBlock());
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Node node0 = Node.newNumber((double) 87855567, (-2150), 87855567);
      NodeUtil.isSimpleFunctionObjectCall(node0);
      NodeUtil.getNumberValue(node0);
      node0.siblings();
      Node node1 = Node.newString(15, "%=");
      PeepholeSimplifyRegExp peepholeSimplifyRegExp0 = new PeepholeSimplifyRegExp();
      Node node2 = new Node(87855567, node1, node1, node0, node1);
      NodeUtil.getImpureBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = new Node(138, 138, 138);
      NodeUtil.newUndefinedNode(node0);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.isConstantName(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newExpr(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      int int0 = 10;
      NodeUtil.isAssociative(10);
      NodeUtil.opToStr(10);
      int int1 = 1298;
      // Undeclared exception!
      try { 
        NodeUtil.precedence(1298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1298
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = NodeUtil.opToStr(18);
      assertNotNull(string0);
      assertEquals("<<", string0);
      
      Node node0 = new Node(18);
      Compiler compiler0 = new Compiler();
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile("<<", charset0);
      Node node1 = compiler0.parse(sourceFile0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node1, compiler0);
      boolean boolean1 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean1);
      
      NodeUtil.evaluatesToLocalValue(node0);
      Compiler compiler1 = new Compiler();
      Compiler compiler2 = new Compiler();
      boolean boolean2 = NodeUtil.isValidSimpleName("lWgpSN,b#sl>");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      NodeUtil.isSimpleOperatorType(105);
      Node node0 = new Node(105);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "f7'%x^i`zLDt5d");
      assertFalse(node1.isGetProp());
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(62);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.opToStr(138);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(138);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 138
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidQualifiedName("Gi):dhsd(\b0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      int int0 = NodeUtil.getInverseOperator(16);
      assertEquals(14, int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = new Node(14, 16, 16);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      assertEquals(16, node1.getCharno());
      
      boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
      assertNotSame(node0, node1);
      
      boolean boolean1 = NodeUtil.isValidQualifiedName("com.google.javascript.jscomp.DefinitionsRemover$FunctionArgumentDefinition");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Node node0 = new Node(122);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node1 = compiler0.externAndJsRoot;
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.referencesThis(node2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.isGet(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      NodeUtil.getStringNumberValue("46^EH%]|w}M}z@mxxo");
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Compiler compiler0 = new Compiler();
      Node node0 = null;
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionParameters((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.getStringNumberValue("JSCompiler_renameProperty");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.pollFirst();
      Node node0 = new Node(47, 579, 79);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      node0.setSourceEncodedPositionForTree(0);
      NodeUtil.mayHaveSideEffects(node0);
      NodeUtil.isConstantName(node1);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) null);
      CodingConventions.Proxy codingConventions_Proxy0 = null;
      try {
        codingConventions_Proxy0 = new ClosureCodingConvention((CodingConvention) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.ClosureCodingConvention", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = "y3 }k=mA)";
      Node node0 = Node.newString(2982, "y3 }k=mA)");
      Node node1 = new Node(48, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for BREAK (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = new Node(23);
      Node node1 = new Node(39);
      NodeUtil.mayBeString(node0);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for CATCH (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      NodeUtil.opToStr(117);
      Logger logger0 = Logger.getGlobal();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(closureCodingConvention0);
      Node node0 = NodeUtil.newQualifiedNameNode(codingConventions_Proxy0, "0");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.declareType("0", (JSType) null);
      NodeUtil.opToStr(4845);
      NodeUtil.isLatin("LK8");
      // Undeclared exception!
      try { 
        NodeUtil.isLValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      NodeUtil.precedence(98);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      NodeUtil.precedence(98);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node.newString("JSCompiler_renameProperty");
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      Node node0 = new Node(98);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionObjectCallOrApply((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
      assertNotNull(string0);
      
      Node node0 = NodeUtil.booleanNode(true);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isGet(node1);
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node0, (AbstractCompiler) null);
      assertTrue(boolean1 == boolean0);
      
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      boolean boolean2 = NodeUtil.isLiteralValue(node1, true);
      assertTrue(boolean2);
      assertTrue(node1.hasChildren());
      assertFalse(node0.isFalse());
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
      
      boolean boolean0 = NodeUtil.isLatin("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      Node node0 = new Node(93, 933, (-3512));
      NodeUtil.getArrayElementStringValue(node0);
      PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
      Node node1 = peepholeFoldWithTypes0.optimizeSubtree(node0);
      NodeUtil.isSimpleFunctionObjectCall(node1);
      NodeUtil.isNameReferenced(node1, "<<");
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got ASSIGN_ADD
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = new Node(71);
      Compiler compiler0 = new Compiler();
      node0.getProp(71);
      Node node1 = new Node(47);
      Node node2 = Node.newNumber((-1960.76), (-967), 2);
      NodeUtil.evaluatesToLocalValue(node1);
      boolean boolean0 = NodeUtil.isImmutableValue(node2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Integer integer0 = new Integer(54);
      // Undeclared exception!
      try { 
        NodeUtil.precedence(54);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node((-1813));
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Compiler compiler1 = new Compiler();
      Node node1 = compiler1.parseTestCode("LK8");
      node0.setWasEmptyNode(false);
      NodeUtil.isImmutableValue(node0);
      NodeUtil.isFunctionExpression(node1);
      NodeUtil.isConstantName(node0);
      NodeUtil.isSimpleOperatorType(50);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = NodeUtil.JSC_PROPERTY_NAME_FN;
      String string1 = NodeUtil.JSC_PROPERTY_NAME_FN;
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      assertTrue(boolean0);
  }
}

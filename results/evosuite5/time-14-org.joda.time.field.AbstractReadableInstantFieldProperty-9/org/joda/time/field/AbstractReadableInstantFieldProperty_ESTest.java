/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:45:47 GMT 2019
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractReadableInstantFieldProperty_ESTest extends AbstractReadableInstantFieldProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = new DateMidnight((-1729L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateMidnight1);
      DateMidnight dateMidnight2 = DateMidnight.now((Chronology) gJChronology0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight2.dayOfYear();
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.dayOfYear();
      boolean boolean0 = dateMidnight_Property1.equals(dateMidnight_Property0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.dayOfYear();
      boolean boolean0 = dateMidnight_Property0.equals(dateMidnight_Property1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.dayOfYear();
      boolean boolean0 = dateMidnight_Property0.equals(dateMidnight_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      boolean boolean0 = mutableDateTime_Property0.equals(mutableDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      MockDate mockDate0 = new MockDate(1904L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      int int0 = mutableDateTime_Property0.compareTo((ReadablePartial) localDate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(30L, (Chronology) ethiopicChronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      LocalDateTime.Property localDateTime_Property1 = localDateTime1.weekOfWeekyear();
      int int0 = localDateTime_Property1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.compareTo((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.field.AbstractReadableInstantFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      int int0 = localDate_Property0.compareTo((ReadablePartial) localDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) dateMidnight0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfCeilingCopy();
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.dayOfYear();
      int int0 = dateMidnight_Property1.compareTo((ReadableInstant) dateMidnight1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.compareTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractReadableInstantFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      int int0 = dateMidnight_Property0.compareTo((ReadableInstant) dateMidnight0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      long long0 = localTime_Property0.getDifferenceAsLong((ReadableInstant) null);
      assertEquals((-1392409281320L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      long long0 = dateMidnight_Property0.getDifferenceAsLong(dateMidnight0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      int int0 = dateMidnight_Property0.getDifference((ReadableInstant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      int int0 = dateMidnight_Property0.getDifference(dateMidnight0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      assertEquals(1388530800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      DurationField durationField0 = mutableDateTime_Property0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      long long0 = dateMidnight_Property0.remainder();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      localTime_Property0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      DurationField durationField0 = dateMidnight_Property0.getLeapDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      Interval interval0 = dateMidnight_Property0.toInterval();
      assertEquals(1392332400000L, interval0.getStartMillis());
      assertEquals(1392418800000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      int int0 = localDate_Property0.getMaximumValueOverall();
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      String string0 = localTime_Property0.getAsString();
      assertEquals("21", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      String string0 = dateMidnight_Property0.getAsShortText();
      assertEquals("Fri", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      int int0 = mutableDateTime_Property0.getMaximumShortTextLength((Locale) null);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-22L));
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      String string0 = dateMidnight_Property0.getAsText();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      int int0 = dateMidnight_Property0.getMinimumValueOverall();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      DurationField durationField0 = dateMidnight_Property0.getDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      Locale locale0 = Locale.UK;
      int int0 = dateMidnight_Property0.getMaximumTextLength(locale0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      int int0 = dateMidnight_Property0.getLeapAmount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      String string0 = dateMidnight_Property0.toString();
      assertEquals("Property[year]", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight.Property dateMidnight_Property1 = dateMidnight0.yearOfEra();
      boolean boolean0 = dateMidnight_Property0.equals(dateMidnight_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfYear();
      boolean boolean0 = dateMidnight_Property0.isLeap();
      assertFalse(boolean0);
  }
}

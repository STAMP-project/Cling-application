/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 00:47:38 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NFD", "NFD");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("|p.+;'b?4`R5`", stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("<sFfJ^&HJSl:5>8ev6N", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.endsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, "A5<O3'{Na/>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.endsWithAny("he array must not b", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "";
      boolean boolean0 = StringUtils.startsWithAny("ij", stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("q)Yq,9w", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.startsWithAny("ij", stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.repeat("he array must not b", 61);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("The character must not be null", string0);
      assertEquals("The character must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("', is neither of type Map.Entry nor an Array", "}4wZ^Lj&&p4Cqs(m0u6");
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("?@", "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("The Array must not b null", "p{InCombiningDiacriticalMarks}+");
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("i:'J+aV:t", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "@=9`SVq4(!tZ-m+@`");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[2] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[3] = "org.apache.commons.lang3.ArrayUtils";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.rightPad("?", 8192, '=');
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = "?";
      stringArray0[2] = "?";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("?", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("_Minimum abbreviation width with offset is 7");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.difference("qWS|#rO<KDIr", (String) null);
      assertEquals("qWS|#rO<KDIr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "th wits<dffset is 7");
      assertEquals("th wits<dffset is 7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.difference("Z", "pg");
      assertEquals("pg", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("yk&,LVNO)", ", Length: ", (-2705));
      assertEquals("yk&,LVNO)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("g1G6X3U&#IV2#(W>\"", ", Length: ", 13);
      assertEquals("g1, Length: \"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("org.appdi&`|0$?}is.lang3.stri\"gutils", (String) null, (-1));
      assertEquals("org.appdi&`|0$?}is.lang3.stri\"gutils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("HI!|e2\"u()<3x", "p{InCombiKingDiariticalMarks}+", 90);
      assertEquals("HI!|e2\"u()<3x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, "java.text.Normalizer$Form", 105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("S]gqaYp&]}k1", 32, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.abbreviate(")=,W-~Cw:,v@U", 256, 9);
      assertEquals("...w:,v@U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.abbreviate("_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7_MiniWum abbreviation w>dth with *ffset is 7", (int) '>', (int) '>');
      assertEquals("...ion w>dth with *ffset is 7_MiniWum abbreviation w>dth wi...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("java.lang.Object@", 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-1), (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '>');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.reverse("the array must not be null");
      assertEquals("llun eb ton tsum yarra eht", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "/xceptin cloning Cloneable.type ");
      assertEquals("/xceptin cloning Cloneable.type ", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "/xceptin cloning Cloneable.type", (CharSequence) "/xceptin cloning Cloneable.type ");
      assertEquals("/xceptin cloning Cloneable.type", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.defaultString("NFD", ":W5-x*O\"D=}");
      assertEquals("NFD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("The Array must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("The Array must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("7k~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("3C\"uS9ho");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext?8;`e<)}(^e1=@ext8;`e<)}(^e1=@ext");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(" vs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("ache.commons.lang3.ArrayUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("The Array must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("The Array must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("qWS|#rO<KDIr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("The character ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.countMatches("', is neither of type Map.Entry nor an Array", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.countMatches("x_h# JMQ", "x_h# JMQ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "y=dbp");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.swapCase("Arguments cannot both be null");
      assertEquals("aRGUMENTS CANNOT BOTH BE NULL", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" is less than 0: ");
      assertEquals(" is less than 0: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.capitalize((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.capitalize("mbiningdia");
      assertEquals("Mbiningdia", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.lowerCase("mbiningdia", locale0);
      assertEquals("mbiningdia", string0);
      assertNotNull(string0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = StringUtils.lowerCase("-");
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.upperCase("Indx ", locale0);
      assertEquals("INDX ", string0);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = StringUtils.upperCase("dT\"F0#(4&'s[");
      assertEquals("DT\"F0#(4&'S[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.center("ml4&_~K;Av^@rTml4&_~K;Av^@rTm", 29, "ml4&_~K;Av^@rT");
      assertEquals("ml4&_~K;Av^@rTml4&_~K;Av^@rTm", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.center("The Array must not be null", 0, "p{InCombiningDiacriticalMarks}+");
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 261, "org.apache.commons.lang3.ObjectUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.center("NV", 2569);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.center("!3", 2);
      assertEquals("!3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.center("[X~6( f7ErEJl?h", (-195), 'g');
      assertEquals("[X~6( f7ErEJl?h", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.length("?");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.leftPad("2baQbc@&", 10, "2baQbc@");
      assertEquals("2b2baQbc@&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = StringUtils.leftPad("HI!|e2\"u()<3x", 17, "p{5D");
      assertEquals("p{5DHI!|e2\"u()<3x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.leftPad("p{5D", (-1), "zbq3#L;RjHiXv.");
      assertEquals("p{5D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.leftPad("7N`<wYi?V#)6=D${", 3424, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-5), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.leftPad("', has a length less than 2", 0);
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 440, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.repeat("NX", 2569);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("NX", 2569, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.rightPad("%k", 32, "vi33%c!W/`XbgT/vi33%c!W/`XbgT/");
      assertEquals("%kvi33%c!W/`XbgT/vi33%c!W/`XbgT/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.center("java.text.Normalizer", 29, "");
      assertEquals("    java.text.Normalizer     ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.center(" vs ", 321, " vs ");
      assertEquals(" vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  v vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.rightPad("Jl<]B Ki&pPloA{", (-904), (String) null);
      assertEquals("Jl<]B Ki&pPloA{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 29, " ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = StringUtils.rightPad("?", 8206, '=');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.rightPad("OpJLO`/", 2, 'K');
      assertEquals("OpJLO`/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.repeat("=;t>W7Hd<WNfGDpP", (String) null, 93);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.repeat("q", "q", 2);
      assertEquals("qqq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.repeat("9}9z^gk@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@er$formqs@", 6);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference(string0, "9}9z^gk@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@er$formqs@");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.repeat("-", 8197);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringUtils.repeat("q", 763);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.repeat("", Integer.MAX_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.repeat("Index: ", 1);
      assertEquals("Index: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.repeat("-", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "e_&", 6);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.chop("array and element cann~e1xv5l#b`k~ll");
      assertEquals("array and element cann~e1xv5l#b`k~l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.chomp("/xceptin cloning Cloneable.type ", "/xceptin cloning Cloneable.type ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.chomp("%f?LStv+Z", (String) null);
      assertEquals("%f?LStv+Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.chomp("`I0i%ATz*_", "NFD");
      assertEquals("`I0i%ATz*_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.chomp("", "/xceptin cloning Cloneable.type ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.chomp(";`[[;1m");
      assertEquals(";`[[;1m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.overlay("%", ", Length: 0", 36, (-2545));
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.overlay("?", "?", (-438), (-438));
      assertEquals("??", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.overlay("the array must not be null", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", (-1642), 0);
      assertEquals("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~the array must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.overlay("'0HO.sc]DhQry^R\"-~", (String) null, 256, 256);
      assertEquals("'0HO.sc]DhQry^R\"-~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "NV", 2569, 2569);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" - ", "iacritical", "iacritical");
      assertEquals(" - ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.replaceChars("IlegalArgumentException occurrNd", "IlegalArgumentException occurrNd", "IlegalArgumentException occurrNd");
      assertEquals("IlegalArgumentException occurrNd", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.replaceChars("IllegalArgumentException occurrNd", "IllegalArgumentException occurrNd", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.replaceChars("South Korea", (String) null, "South Korea");
      assertEquals("South Korea", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'U', 'x');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Cannot store ", '3', '-');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ", Length: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(", Length: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: , Length: 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Index: ";
      stringArray0[3] = "~`E|*pv3";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Index: ";
      stringArray1[3] = " in an array of ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Index: ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Index: 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[0] = " ";
      stringArray0[1] = "Excepin cloning CloneVble type ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Excepin cloning CloneVble type ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: Excepin cloning CloneVble type 
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "q";
      stringArray0[1] = "q>";
      String string0 = StringUtils.replaceEach("q>", stringArray0, stringArray0);
      assertEquals("q>", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "T)N7hX%ccg&$[,#^l?";
      String string0 = StringUtils.replaceEach("q>", stringArray0, stringArray0);
      assertEquals("q>", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[13];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("java.text.Normalizer is not available", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEachRepeatedly("wz8*lVQi;g", stringArray0, stringArray1);
      assertEquals("wz8*lVQi;g", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("NVArguments cannot both be null", stringArray0, (String[]) null);
      assertEquals("NVArguments cannot both be null", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("NV", stringArray0, stringArray0);
      assertEquals("NV", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEachRepeatedly(stringArray0[3], stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "\\uQ&Q&";
      String string1 = StringUtils.replaceEachRepeatedly(string0, (String[]) null, (String[]) null);
      assertEquals("\\uQ&Q&", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (int) 'K');
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.remove("Arguments cannot both be null", "9}9Z^GK");
      assertEquals("Arguments cannot both be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.replace("The Array Just not be null", "The Array Just not be null", "The Array Just not be null", 0);
      assertEquals("The Array Just not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.replace("3@>hAw8J\"1", (String) null, "Strings must vo be ull", 71);
      assertEquals("3@>hAw8J\"1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.remove("q", 'f');
      assertEquals("q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.remove(" is less than 0:  is less than 0: ", ' ');
      assertEquals("islessthan0:islessthan0:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'v');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.remove("]M", "]M");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.remove("f*j*TtKLa", (String) null);
      assertEquals("f*j*TtKLa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("qWS|#rO<KDIr", "the array must not be null");
      assertEquals("qWS|#rO<KDIr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("7R=Ygly=-J)p'8y8+&", (String) null);
      assertEquals("7R=Ygly=-J)p'8y8+&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Yea,SLks(~q", "mgwm[nuUVM&2r;");
      assertEquals("Yea,SLks(~q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.removeEnd("he array must not b", "");
      assertEquals("he array must not b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("?*iAyHr$OL3`&", "?*iAyHr$OL3`&");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("tTSzSiL{>{[2$yq", (String) null);
      assertEquals("tTSzSiL{>{[2$yq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.removeStart("!oa1VR+g,9Ekb|h~w|9ADYA!oa1VR+g,9Ekb|h~w|9ARYA1VR+l,9Ekb|h~w|9ARYA", "!oa1VR+g,9Ekb|h~w|9ADYA!oa1VR+g,9Ekb|h~w|9ARYA1VR+l,9Ekb|h~w|9ARYA");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.removeStart("9}9Z^GK", "");
      assertEquals("9}9Z^GK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.removeStart("0$>hq", "Index: ");
      assertEquals("0$>hq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Search and Replace arra lengths dont match: ");
      assertEquals("SearchandReplacearralengthsdontmatch:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("y?e|K");
      assertEquals("y?e|K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "QP7f7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '+');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add((Object) "");
      assertTrue(boolean0);
      assertTrue(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean1 = vector0.add((Object) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals("[, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "mgwm[nuUVM&2r;");
      assertEquals("mgwm[nuUVM&2r;", string0);
      assertNotNull(string0);
      assertFalse(vector0.contains("mgwm[nuUVM&2r;"));
      assertTrue(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals("[, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, ",/");
      assertEquals("AUTOSELECT_FILTERING,/EXTENDED_FILTERING,/IGNORE_EXTENDED_RANGES,/MAP_EXTENDED_RANGES,/REJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
      assertEquals(5, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(vector0.contains(object0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      boolean boolean1 = vector0.add(object0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains(object0));
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertNotNull(string0);
      assertTrue(vector0.contains(object0));
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean0 = stack0.add((Object) locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[MAP_EXTENDED_RANGES]", stack0.toString());
      assertEquals(1, stack0.size());
      
      String string0 = StringUtils.join((Iterable<?>) stack0, "aY1CxcG]@NO5 ow");
      assertNotNull(string0);
      assertFalse(stack0.contains("aY1CxcG]@NO5 ow"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[MAP_EXTENDED_RANGES]", stack0.toString());
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, " ");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(hashSet0.contains(" "));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "/pgY_<lYjge\"L");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, 'o');
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>((-1642));
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, '\\');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'Q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(5, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, 'c');
      assertEquals("AUTOSELECT_FILTERINGcEXTENDED_FILTERINGcIGNORE_EXTENDED_RANGEScMAP_EXTENDED_RANGEScREJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
      assertEquals(5, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.concatWith("|} Fy0A],Yq", objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.concat(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "p{InCombiningDiacriticalMarks}+", 15, 15);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0, 'q');
      assertEquals("q", string0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("NV", 'N');
      assertEquals("V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, ']', (-2669), (-2669));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '?');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("SecurityException occurred");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("WCr?)QY/5)ec/`F>=");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("?", "?");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("A", "A");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The character mlst not be null", " ");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" is not in the range '0' - '9'");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9}9Z^GK", '^');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9}9Z^GK", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 9}9Z^GK
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" in an Kry of ", ' ');
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '%');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Y');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" in an Kry of ", " ");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', has a length less than 2", (String) null);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "sun.text.Normalizer is not available{ ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("9}9z^gk@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3er$forms@3wqs@3wqs@3wqs@3wqs@3wqs@", "J+r3z9", "J+r3z9");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.repeat("NX", 2569);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, "NX", "NX");
      assertNotNull(stringArray0);
      assertEquals(1284, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", " O(Mus,kr,", " O(Mus,kr,");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("^", "&#)", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The Array must not be null", "The Array must not be null", " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "a", "a");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.substringBetween("F", "sun.text.Normalizer is not available{ ", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.substringBetween("p{InCombiningDiacriticalMarks}+", (String) null, "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("The Array must not be null                                                                ", "The Array must not be null");
      assertEquals("                                                                ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("j%8pCn*w", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("%{nV", "C C#?I");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("he array must not b", "s+");
      assertEquals("he array must not b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext8;`e<)}(^E1=@ext", "?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext?8;`e<)}(^E1=@ext8;`e<)}(^E1=@ext");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("b&b$>!7", (String) null);
      assertEquals("b&b$>!7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.substringAfter("NVNV", "NVNV");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.substringAfter("HtNa", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" vs ", "p{incnot both be niticalmarks}+");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.substringBefore("d", "d");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" is less than 0: ", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.substringBefore("?*ia/hrl;3", (String) null);
      assertEquals("?*ia/hrl;3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.substringBefore("NV", "cx7nZr~");
      assertEquals("NV", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.mid("~[OPMe8X\"", 4, 4);
      assertEquals("Me8X", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.mid(", Length: ", 6, 1006);
      assertEquals("th: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.mid("sun.text.Normalizer is not available", 'C', 'C');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.mid("normalize", (-4803), (-4803));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 4, 4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.mid("R", (-1), 7);
      assertEquals("R", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.right("$lkIZ2ZP- mmU)a-7g", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.right("WCr?)QY/5)ec/`F>=", (-4715));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.right(stringArray0[0], (-751));
      assertNull(string0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.right("aoW[h", 13);
      assertEquals("aoW[h", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.left("2u", 935);
      assertEquals("2u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.left("InvocationTargetException occurred", 7);
      assertEquals("Invocat", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.left("]!{C]l", (-526));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.substring("1IG~hrT", 2, 2);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.substring("q", 2, (int) '>');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (int) 'y', (-146));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.substring("org.apache.cppi&`|0$?}i3.stringutils", (-1355), (-1355));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.substring("?", (-3084));
      assertEquals("?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 66);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.substring("(?", 2569);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Z";
      int int0 = StringUtils.lastIndexOfAny("Z", stringArray0);
      assertEquals(0, int0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "+#Xs*s}ht";
      int int0 = StringUtils.lastIndexOfAny("{}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("8;`e<)}(^E1=@ext", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "b$|cmN";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0Bl>DJgp7<7U81AqP>-<", "The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "HI!|e2\"u()<3x", charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "g1, Length: \"", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "&+Yy!,(@QF@'hO0`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "U|)u:", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("K-qs#oYOfIRnWob*c+B", "K-qs#oYOfIRnWob*c+B");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("xEz,pIEAZi+n", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("=[W[a5)RpT>%MX6", "# ik");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", "`cSY,v8b$e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "q>", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " in an Kry of ", " in an Kry of ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[14];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(14, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      boolean boolean0 = StringUtils.containsAny("CS[Yc1HhDb'+", charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny(".y", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsAny("CS[Yc1HhDb'+", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@55c8d441java.lang.Object@777fdc77", "+kfIZZ_b");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "NFD", "NFD");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '~';
      int int0 = StringUtils.indexOfAny((CharSequence) "mnopqrstuvwxyz{|}~", charArray0);
      assertEquals(17, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "mnopqrstuvwxyz{|}~", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("?*iAyHr$OLP3`&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("8V8 2/#");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("The characer must not be null", "The characer must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Cannot clone Cloneable type ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("ud ) ", ".uQ f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "9}9Z^TK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("e+eTlrHWnuG~98<C#m", "e+eTlrHWnuG~98<C#m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("p{InCombiningDiac4iticalarks}+", "p{InC?*ia/hrl;3p{InCo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("CyZ2Q},~kB~.\"QumEK", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("org.apache.commons.lang3.CharUtils", (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("Cannot pad a negative amount: ", 105);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("^]Ghn\"{q", " ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("p{incombininnot both be narks}+", "", 533);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("NFD", "NFD");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("AD8'5 I)D:'=", "/@a3szr", (-46));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("he array must not b", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null, (-743));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase("\"K8O~q)oG%&{6M)hEM", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("L!Bk@X", "%tMgh]x", (-168));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null, (-2545));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "iPUMTioMUw>#Qs&5rd", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("The Array must not b null", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(" ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", 16, (-1836));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("B<&^]bBMo}Rsbzp~", 128, 128);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, (-4754));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("zv", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("Array and element cannot both be null", "~E1Xv5L#B`k~");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("qQL@.J", "qQL@.J");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("!QPWNp_H,S", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("", "$dnCwR", (-167));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase("'=&hi%z>$Ax#i", (String) null, 17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((String) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "q", 2);
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("z[v1t+ib&", "z[v1t+ib&", 1949);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 2348);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("9}9z^gk@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqser$formwqs@3wqs@3wqs@3wqs@3wqs@", "9}9z^gk@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqs@3wqser$formwqs@3wqs@3wqs@3wqs@3wqs@", (-2550));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("iPUMTioMUw>#Qs&5rd", (String) null, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.indexOf("z[vz[v", (String) null, 90);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.indexOf("X", "X", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, (String) null, 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      int int0 = StringUtils.indexOf("yaw:uuAH>", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = StringUtils.indexOf("J_[D(]F&v+j4", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "{");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 4, 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int int0 = StringUtils.indexOf("oFq^2?U?", 7, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 1913);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = StringUtils.indexOf(" ", (-2452));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "_Minimum abbreviation width wit| offset is 7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("0(L!;:OP{", "0(L!;:OP{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "3C\"uS9ho");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.overlay("V(mf]|ap_2", "7k~", 146, 146);
      assertEquals("V(mf]|ap_27k~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " vs ", (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.stripAccents((CharSequence) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Arrayarray and e~e1xv5l#b`k~ both be nullelementarray and e~e1xv5l#b`k~ both be null");
      assertEquals("Arrayarray and e~e1xv5l#b`k~ both be nullelementarray and e~e1xv5l#b`k~ both be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.stripEnd("IllegalArgumentException occurred", "IllegalArgumentException occurred");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.stripEnd("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "");
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "+#Xs*s}ht";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "MYKR<>vYeWSQh");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.stripStart("nopqrstuvwxyz{|}~", "");
      assertEquals("nopqrstuvwxyz{|}~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.stripStart("o2^2$uU&]", "o2^2$uU&]");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Go");
      assertEquals("Go", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.stripToNull("-");
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.trimToNull("vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("=;t>w7hd<wnfgdppg cloneable type ");
      assertEquals("=;t>w7hd<wnfgdppg cloneable type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("Minimum abbreviation width with offset is 7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "NFD", (CharSequence) ":W5-x*O\"D=}");
      assertEquals("NFD", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", (CharSequence) " ");
      assertEquals(" ", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("he array must not b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("o2^2$uU&]", "o2^2$uU&]");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("o2^2$uU&]", stringArray0, stringArray0);
      assertEquals("o2^2$uU&]", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("*l", "*l");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.replace("o%k}uwY", "...", (String) null);
      assertEquals("o%k}uwY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 48);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("q", 'q');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.substringBetween("pVB'ST}C%|`-}>m(vU0", "pVB'ST}C%|`-}>m(vU0");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "Cannot store ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("L:*i2N}A", "V(mf]|ap_2V(mf]|ap_2", (-1));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("InvocationTargetException occurred", "InvocationTargetException occurred");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.strip("/xceptin cloning Cloneable.type ");
      assertEquals("/xceptin cloning Cloneable.type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.concat((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.leftPad("?*ia/hrl;3", 9955);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(" v", " v", " v");
      assertEquals(" v", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("o2^2$uU&]");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("o2^2$uU&]", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: o2^2$uU&]
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 2806);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("9}9^GK", "9}9^GK");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("GG~M.pGS&9I!h_|", "_QB", 11);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Strings must vo be ull", (int) ':');
      assertEquals("Strings must vo be ull", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Array element ");
      String string0 = StringUtils.join((Object[]) stringArray0, "array and e~e1xv5l#b`k~ both be null");
      assertEquals("Arrayarray and e~e1xv5l#b`k~ both be nullelementarray and e~e1xv5l#b`k~ both be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("9}9Z^6K");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gYS", "", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 14:21:20 GMT 2019
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionFormat;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FractionFormat_ESTest extends FractionFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      try { 
        properFractionFormat0.parse(" ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \" \"
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      // Undeclared exception!
      try { 
        properFractionFormat0.setNumeratorFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator format can not be null.
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      fractionFormat0.setNumeratorFormat(decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      // Undeclared exception!
      try { 
        fractionFormat0.setDenominatorFormat((NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator format can not be null.
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      properFractionFormat0.setDenominatorFormat(decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      try { 
        fractionFormat0.parse("2/!^fj B");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"2/!^fj B\"
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      try { 
        properFractionFormat0.parse("2*,w!{].l)azDl95j");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"2*,w!{].l)azDl95j\"
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      Fraction fraction0 = properFractionFormat0.parse("6");
      assertEquals(6, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FractionFormat.formatFraction((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given object as a fraction
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      Long long0 = new Long((-908L));
      AttributedCharacterIterator attributedCharacterIterator0 = fractionFormat0.formatToCharacterIterator(long0);
      assertEquals(8, attributedCharacterIterator0.getEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FractionFormat fractionFormat0 = new FractionFormat();
      try { 
        fractionFormat0.parseObject("$ob;");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      try { 
        properFractionFormat0.parse(" / ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \" / \"
         //
         verifyException("org.apache.commons.math.fraction.FractionFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FractionFormat fractionFormat0 = FractionFormat.getProperInstance();
      Fraction fraction0 = fractionFormat0.parse("0 / 1");
      assertNotNull(fraction0);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = FractionFormat.formatFraction(fraction0);
      assertEquals("0 / 1", string0);
  }
}

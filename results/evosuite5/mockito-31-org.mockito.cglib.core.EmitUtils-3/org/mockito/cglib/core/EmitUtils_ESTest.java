/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:04:24 GMT 2019
 */

package org.mockito.cglib.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.asm.ClassWriter;
import org.mockito.asm.Label;
import org.mockito.asm.MethodVisitor;
import org.mockito.asm.Type;
import org.mockito.cglib.core.Block;
import org.mockito.cglib.core.ClassEmitter;
import org.mockito.cglib.core.CodeEmitter;
import org.mockito.cglib.core.Customizer;
import org.mockito.cglib.core.EmitUtils;
import org.mockito.cglib.core.MethodInfo;
import org.mockito.cglib.core.ObjectSwitchCallback;
import org.mockito.cglib.core.ProcessArrayCallback;
import org.mockito.cglib.core.Signature;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EmitUtils_ESTest extends EmitUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      Type[] typeArray1 = new Type[1];
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, typeArray1, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Block block0 = new Block(codeEmitter0);
      block0.end();
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, (Type[]) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Block block0 = codeEmitter0.begin_block();
      block0.end();
      // Undeclared exception!
      try { 
        EmitUtils.wrap_undeclared_throwable(codeEmitter0, block0, typeArray0, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[1];
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        EmitUtils.add_properties(classEmitter0, stringArray0, typeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[0];
      Type[] typeArray0 = new Type[4];
      EmitUtils.add_properties(classEmitter0, stringArray0, typeArray0);
      assertEquals(4, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(56);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@hi|T4yH{|I=Q:N2ve!";
      stringArray0[1] = "@hi|T4yH{|I=Q:N2ve!";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|I=Q:N2ve!", "@hi|T4yH{|I=Q:N2ve!", "@hi|T4yH{|I=Q:N2ve!", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type type1 = Type.getObjectType("@hi|T4yH{|I=Q:N2ve!");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@hi|T4yH{|I=Q:N2ve!", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      EmitUtils.append_string(codeEmitter0, type1, emitUtils_ArrayDelimiters0, (Customizer) null);
      assertEquals(96, CodeEmitter.ADD);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = Type.getObjectType("[]");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[]", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 9, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[]", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 9, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("[]", "[]", "[]");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = Type.getType("F");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("F", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("F", "F", "F");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("c", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("c", "c", "c");
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("F", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 10, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("F", "F", "F");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("F", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 6, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("[]", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 9, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("F", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 6, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = EmitUtils.DEFAULT_DELIMITERS;
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, (Customizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(159);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u9RN)2aBS";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "u9RN)2aBS";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "u9RN)2aBS", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[3];
      Type type1 = Type.getObjectType("u9RN)2aBS");
      typeArray0[0] = type1;
      typeArray0[1] = type1;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("u9RN)2aBS", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("u9RN)2aBS", "u9RN)2aBS", "u9RN)2aBS");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.append_string(codeEmitter0, type1, emitUtils_ArrayDelimiters0, customizer0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("GF", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, (MethodVisitor) null, 2, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.append_string(codeEmitter0, type0, (EmitUtils.ArrayDelimiters) null, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.CodeEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(96);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[1] = "";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(124, "@hi|T4yH{|IQ:Nve!", "`9RN)AaBS", "", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type type1 = Type.getObjectType("@hi|T4yH{|IQ:Nve!");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@hi|T4yH{|IQ:Nve!", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Label label0 = codeEmitter0.make_label();
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.not_equals(codeEmitter0, type1, label0, customizer0);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(80);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V{V+EX\"u{b\"D!iQ?fJk";
      stringArray0[1] = "V{V+EX\"u{b\"D!iQ?fJk";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "V{V+EX\"u{b\"D!iQ?fJk", "V{V+EX\"u{b\"D!iQ?fJk", "V{V+EX\"u{b\"D!iQ?fJk", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("V{V+EX\"u{b\"D!iQ?fJk", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 1, customizer0);
      assertEquals(158, CodeEmitter.LE);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U5j]YWc8va[?~90t q";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "-U5j]YWc8va[?~90t q";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-41), "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "-U5j]YWc8va[?~90t q", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[3];
      Type type1 = Type.LONG_TYPE;
      typeArray0[0] = type1;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-41), signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 104, customizer0);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U5j]YWc8va[?~90t q";
      stringArray0[1] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[2] = "-U5j]YWc8va[?~90t q";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-41), "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "-U5j]YWc8va[?~90t q", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("-U5j]YWc8va[?~90t q", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      Type type1 = Type.FLOAT_TYPE;
      EmitUtils.hash_code(codeEmitter0, type1, 5496, customizer0);
      assertEquals(104, CodeEmitter.MUL);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 3, customizer0);
      assertEquals(5, type0.getSort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[1] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[2] = "@hi|T4yH{|IQ:Nve!";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|IQ:Nve!", "R)2aBS", "@hi|T4yH{|IQ:Nve!", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("D", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      Type type1 = Type.SHORT_TYPE;
      EmitUtils.hash_code(codeEmitter0, type1, 10, (Customizer) null);
      assertEquals(1, type1.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U5j]YWc8va[?~90t q";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "-U5j]YWc8va[?~90t q";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-41), "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "-U5j]YWc8va[?~90t q", stringArray0);
      Type type0 = Type.FLOAT_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, (-41), signature0, typeArray0);
      Type type1 = Type.BYTE_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, 104, customizer0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(78);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 3, signature0, typeArray0);
      Type type1 = Type.CHAR_TYPE;
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type1, (-1829), customizer0);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 3, customizer0);
      assertEquals(5, Type.INT);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[1] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[2] = "@hi|T4yH{|IQ:Nve!";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|IQ:Nve!", "R)2aBS", "@hi|T4yH{|IQ:Nve!", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("@hi|T4yH{|IQ:Nve!", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2849, signature0, typeArray0);
      Type type1 = Type.getObjectType("D");
      EmitUtils.hash_code(codeEmitter0, type1, 7, (Customizer) null);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U5j]YWc8va[?~90t q";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "-U5j]YWc8va[?~90t q";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-41), "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "-U5j]YWc8va[?~90t q", stringArray0);
      Class<Type> class0 = Type.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray0);
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.hash_code(codeEmitter0, type0, 1742, customizer0);
      assertEquals(154, CodeEmitter.NE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".@hi|-k)yH{|IQ:Nve";
      stringArray0[1] = ".@hi|-k)yH{|IQ:Nve";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", ".@hi|-k)yH{|IQ:Nve", stringArray0);
      Type type0 = Type.INT_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature(".@hi|-k)yH{|IQ:Nve", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      // Undeclared exception!
      try { 
        EmitUtils.push_object(codeEmitter0, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: class org.mockito.asm.ClassWriter
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U5j]YWc8va[?~90t q";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "-U5j]YWc8va[?~90t q";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-41), "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "-U5j]YWc8va[?~90t q", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[3];
      Type[] typeArray1 = new Type[1];
      typeArray1[0] = type0;
      Signature signature0 = new Signature("", type0, typeArray1);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 2, signature0, typeArray1);
      EmitUtils.push_array(codeEmitter0, typeArray0);
      assertEquals(130, CodeEmitter.XOR);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-U5j]YWc8va[?~90t q";
      stringArray0[1] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[2] = "-U5j]YWc8va[?~90t q";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-41), "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "-U5j]YWc8va[?~90t q", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Signature signature0 = new Signature("-U5j]YWc8va[?~90t q", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.push_array(codeEmitter0, stringArray0);
      assertEquals(126, CodeEmitter.AND);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(159);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u9RN)2aBS";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "u9RN)2aBS";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "u9RN)2aBS", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[3];
      Type type1 = Type.getObjectType("u9RN)2aBS");
      typeArray0[0] = type1;
      typeArray0[1] = type1;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("u9RN)2aBS", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      classEmitter0.visit(10, 7, "u9RN)2aBS", "u9RN)2aBS", "u9RN)2aBS", stringArray0);
      EmitUtils.push_object(codeEmitter0, type1);
      EmitUtils.push_object(codeEmitter0, type1);
      assertEquals(100, CodeEmitter.SUB);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.push_object((CodeEmitter) null, type0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot load void type
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, ")Qo:ozYuG}pN");
      // Undeclared exception!
      try { 
        EmitUtils.getSwitchKeys(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, (String[]) null, 5, objectSwitchCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown switch style 5
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(80);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "V{V+EX\"u{b\"D!iQ?fJk";
      stringArray0[1] = "V{V+EX\"u{b\"D!iQ?fJk";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "V{V+EX\"u{b\"D!iQ?fJk", "V{V+EX\"u{b\"D!iQ?fJk", "V{V+EX\"u{b\"D!iQ?fJk", stringArray0);
      Type type0 = Type.getType("V{V+EX\"u{b\"D!iQ?fJk");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("V{V+EX\"u{b\"D!iQ?fJk", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 0, signature0, typeArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("<=N+>M%Ul8>{gE");
      // Undeclared exception!
      try { 
        EmitUtils.method_switch(codeEmitter0, linkedList0, (ObjectSwitchCallback) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.mockito.cglib.core.MethodInfo
         //
         verifyException("org.mockito.cglib.core.EmitUtils$11", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.wrap_throwable((Block) null, (Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      ProcessArrayCallback processArrayCallback0 = mock(ProcessArrayCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.process_arrays((CodeEmitter) null, type0, processArrayCallback0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type F is not an array
         //
         verifyException("org.mockito.cglib.core.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      Type type0 = Type.getObjectType("\"$gak 2>6Rbd5/:B");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("\"$gak 2>6Rbd5/:B", type0, typeArray0);
      // Undeclared exception!
      try { 
        EmitUtils.factory_method(classEmitter0, signature0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.load_class_this((CodeEmitter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, stringArray0, 0, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        EmitUtils.begin_method(classEmitter0, (MethodInfo) null, (-2977));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(171);
      ClassEmitter classEmitter0 = new ClassEmitter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[1] = "@hi|T4yH{|IQ:Nve!";
      stringArray0[2] = "@hi|T4yH{|IQ:Nve!";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|IQ:Nve!", "R)2aBS", "@hi|T4yH{|IQ:Nve!", stringArray0);
      Type type0 = Type.DOUBLE_TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = type0;
      Signature signature0 = new Signature("D", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.hash_code(codeEmitter0, type0, 130, (Customizer) null);
      assertEquals(1, Type.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Type> linkedList0 = new LinkedList<Type>();
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.constructor_switch((CodeEmitter) null, linkedList0, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(56);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@hi|T4yH{|I=Q:N2ve!";
      stringArray0[1] = "@hi|T4yH{|I=Q:N2ve!";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|I=Q:N2ve!", "@hi|T4yH{|I=Q:N2ve!", "@hi|T4yH{|I=Q:N2ve!", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type type1 = Type.getObjectType("@hi|T4yH{|I=Q:N2ve!");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@hi|T4yH{|I=Q:N2ve!", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Label label0 = codeEmitter0.mark();
      EmitUtils.not_equals(codeEmitter0, type1, label0, (Customizer) null);
      assertEquals(0, Type.VOID);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        EmitUtils.begin_method(classEmitter0, (MethodInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        EmitUtils.load_method((CodeEmitter) null, (MethodInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.add_property((ClassEmitter) null, ";dr={z ]`>0`dvDS#", type0, ";dr={z ]`>0`dvDS#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Type type0 = Type.getType("[oC1eB#lD");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.hash_code((CodeEmitter) null, type0, 3, customizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      // Undeclared exception!
      try { 
        EmitUtils.process_array((CodeEmitter) null, type0, (ProcessArrayCallback) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type D is not an array
         //
         verifyException("org.mockito.cglib.core.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassEmitter classEmitter0 = new ClassEmitter();
      // Undeclared exception!
      try { 
        EmitUtils.null_constructor(classEmitter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // classInfo is null! org.mockito.cglib.core.ClassEmitter@1
         //
         verifyException("org.mockito.cglib.core.ClassEmitter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(159);
      ClassEmitter classEmitter0 = new ClassEmitter(classWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u9RN)2aBS";
      stringArray0[1] = "u9RN)2aBS";
      stringArray0[2] = "u9RN)2aBS";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|IQ:Nve!", "u9RN)2aBS", "u9RN)2aBS", stringArray0);
      Type type0 = Type.VOID_TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Signature signature0 = new Signature("u9RN)2aBS", type0, typeArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 1, signature0, typeArray0);
      EmitUtils.ArrayDelimiters emitUtils_ArrayDelimiters0 = new EmitUtils.ArrayDelimiters("u9RN)2aBS", "u9RN)2aBS", "u9RN)2aBS");
      Customizer customizer0 = mock(Customizer.class, new ViolatedAssumptionAnswer());
      EmitUtils.append_string(codeEmitter0, type0, emitUtils_ArrayDelimiters0, customizer0);
      assertEquals(10, Type.OBJECT);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(56);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@hi|T4yH{|I=Q:N2ve!";
      stringArray0[1] = "@hi|T4yH{|I=Q:N2ve!";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(2, "@hi|T4yH{|I=Q:N2ve!", "@hi|T4yH{|I=Q:N2ve!", "@hi|T4yH{|I=Q:N2ve!", stringArray0);
      Type type0 = Type.LONG_TYPE;
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("@hi|T4yH{|I=Q:N2ve!", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 10, signature0, typeArray0);
      Label label0 = codeEmitter0.mark();
      EmitUtils.not_equals(codeEmitter0, type0, label0, (Customizer) null);
      assertEquals(9, Type.ARRAY);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EmitUtils.string_switch((CodeEmitter) null, stringArray0, 2, objectSwitchCallback0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.cglib.core.EmitUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Type type0 = Type.getObjectType("M\"tiJ83v`G\"h");
      Type[] typeArray0 = new Type[0];
      Signature signature0 = new Signature("M\"tiJ83v`G\"h", type0, typeArray0);
      ClassEmitter classEmitter0 = new ClassEmitter();
      ClassWriter classWriter0 = new ClassWriter(4);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "41wyEA#j:";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(10, "41wyEA#j:", "41wyEA#j:", "M\"tiJ83v`G\"h", stringArray0);
      CodeEmitter codeEmitter0 = new CodeEmitter(classEmitter0, methodVisitor0, 7, signature0, typeArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ObjectSwitchCallback objectSwitchCallback0 = mock(ObjectSwitchCallback.class, new ViolatedAssumptionAnswer());
      EmitUtils.method_switch(codeEmitter0, linkedList0, objectSwitchCallback0);
      assertEquals(156, CodeEmitter.GE);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 22:05:27 GMT 2019
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.PipedWriter;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DateTimeFormatterBuilder$PaddedNumber_ESTest extends DateTimeFormatterBuilder$PaddedNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 75, true, 0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Locale locale0 = Locale.TAIWAN;
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) null, (ReadablePartial) yearMonth0, locale0);
      assertEquals(75, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber((DateTimeFieldType) null, (-2399), true, (-2399));
      PipedWriter pipedWriter0 = new PipedWriter();
      LocalTime localTime0 = new LocalTime((Object) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) pipedWriter0, (ReadablePartial) localTime0, locale0);
      assertEquals((-2399), dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 412, false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Locale locale0 = Locale.FRANCE;
      dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(412, stringBuffer0.length());
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002014", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-1531), true, (-1531));
      StringBuffer stringBuffer0 = new StringBuffer("|*!m_5*7~6Jpn:R}");
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (ReadablePartial) localTime0, locale0);
      assertEquals(16, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 75, true, 0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      Locale locale0 = Locale.TAIWAN;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DateTime dateTime1 = dateTime0.plusYears((-960));
      LimitChronology limitChronology0 = LimitChronology.getInstance(iSOChronology0, dateTime1, dateTime0);
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Writer) null, 15778800000L, (Chronology) limitChronology0, 1949, dateTimeZone0, locale0);
      assertEquals("zh", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, (-5810), true, (-2070));
      StringBuffer stringBuffer0 = new StringBuffer("_qO%#gC0cS.Ovw=qi");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(463, 0);
      Locale locale0 = Locale.PRC;
      dateTimeFormatterBuilder_PaddedNumber0.printTo(stringBuffer0, (long) (-2070), (Chronology) null, (-5810), dateTimeZone0, locale0);
      assertEquals("_qO%#gC0cS.Ovw=qi24", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
  }
}

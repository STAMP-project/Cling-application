/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:27:32 GMT 2019
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BigMatrixImpl_ESTest extends BigMatrixImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5098, 5098);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(4);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.copy();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl2.getColumnDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl2.getRowDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl3);
      
      BigMatrixImpl bigMatrixImpl4 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl3);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertEquals(4, bigMatrixImpl4.getRowDimension());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(4, bigMatrixImpl4.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertNotNull(bigMatrixImpl4);
      
      BigMatrixImpl bigMatrixImpl5 = (BigMatrixImpl)bigMatrixImpl4.add(bigMatrixImpl3);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertEquals(4, bigMatrixImpl4.getRowDimension());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(4, bigMatrixImpl4.getColumnDimension());
      assertEquals(4, bigMatrixImpl5.getRowDimension());
      assertTrue(bigMatrixImpl5.isSquare());
      assertEquals(4, bigMatrixImpl5.getRoundingMode());
      assertEquals(4, bigMatrixImpl5.getColumnDimension());
      assertEquals(64, bigMatrixImpl5.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl5, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl5, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl5, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl5, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl5, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl5.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl5.equals((Object)bigMatrixImpl4));
      assertTrue(bigMatrixImpl5.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl5.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl5.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl5);
      
      BigDecimal bigDecimal0 = bigMatrixImpl3.getDeterminant();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl5);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl5));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl5));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl3.equals((Object)bigMatrixImpl5));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl2);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl3);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertNotNull(bigDecimal0);
      
      BigMatrixImpl bigMatrixImpl4 = (BigMatrixImpl)bigMatrixImpl2.solve((BigMatrix) bigMatrixImpl1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(11, bigMatrixImpl4.getRowDimension());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertEquals(11, bigMatrixImpl4.getColumnDimension());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1024, 352);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1024, bigMatrixImpl0.getRowDimension());
      assertEquals(352, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.setRoundingMode(352);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(352, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1024, bigMatrixImpl0.getRowDimension());
      assertEquals(352, bigMatrixImpl0.getColumnDimension());
      
      double[] doubleArray0 = new double[1];
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[3][8];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      bigDecimalArray0[0] = bigDecimalArray1;
      BigDecimal[] bigDecimalArray2 = new BigDecimal[1];
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
      
      bigDecimalArray0[1] = bigDecimalArray2;
      BigDecimal[] bigDecimalArray3 = new BigDecimal[0];
      assertFalse(bigDecimalArray3.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray3.equals((Object)bigDecimalArray2));
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5098, 5098);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getEntryAsDouble(5098, 5098);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix entry does not exist
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(7, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(7, bigDecimalArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[8];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(8, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(8, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[9];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(9, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(9, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(9, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(9, bigDecimalArray0.length);
      assertEquals(64, int0);
      
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 1281;
      try { 
        bigMatrixImpl0.getSubMatrix(0, 0, 0, 1281);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(13, 4952);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(13, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4952, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[][] stringArray0 = new String[1][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5185, 5185);
      assertEquals(5185, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5185, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(5185, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5185, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5116, 5116);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      bigMatrixImpl1.hashCode();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1946, 1946);
      assertEquals(1946, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1946, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumnMatrix(1946);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5105, 5105);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5105, bigMatrixImpl0.getRowDimension());
      assertEquals(5105, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(5105, 5105, 5105, 5105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5105
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1024, 352);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1024, bigMatrixImpl0.getRowDimension());
      assertEquals(352, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[0];
      try { 
        bigMatrixImpl0.operate(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((-4), (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      String[][] stringArray0 = new String[1][2];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl1 = null;
      try {
        bigMatrixImpl1 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1071, 4);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(string0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = new BigDecimal((-841L));
      assertEquals((byte) (-73), bigDecimal0.byteValue());
      assertEquals((short) (-841), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal(4);
      assertEquals((short)4, bigDecimal1.shortValue());
      assertEquals((byte)4, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      bigDecimalArray0[1] = bigDecimal1;
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.copy();
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertNotNull(bigMatrixImpl3);
      
      BigMatrixImpl bigMatrixImpl4 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl3);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(11, bigMatrixImpl4.getColumnDimension());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(11, bigMatrixImpl4.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertNotNull(bigMatrixImpl4);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = bigMatrixImpl3.equals(bigMatrixImpl2);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl4));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray1 = new BigDecimal[8];
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal((-2309L));
      assertEquals((byte) (-5), bigDecimal1.byteValue());
      assertEquals((short) (-2309), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      bigDecimalArray1[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((-19.3215));
      assertEquals((short) (-19), bigDecimal2.shortValue());
      assertEquals((byte) (-19), bigDecimal2.byteValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      
      bigDecimalArray1[2] = bigDecimal2;
      BigDecimal bigDecimal3 = BigMatrixImpl.ONE;
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((short)1, bigDecimal3.shortValue());
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      
      bigDecimalArray1[3] = bigDecimal3;
      BigDecimal bigDecimal4 = new BigDecimal((-1.0));
      assertEquals((byte) (-1), bigDecimal4.byteValue());
      assertEquals((short) (-1), bigDecimal4.shortValue());
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertNotNull(bigDecimal4);
      
      bigDecimalArray1[4] = bigDecimal4;
      BigDecimal bigDecimal5 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal5.shortValue());
      assertEquals((byte)10, bigDecimal5.byteValue());
      assertNotSame(bigDecimal5, bigDecimal1);
      assertNotSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal5);
      
      bigDecimalArray1[5] = bigDecimal5;
      BigDecimal bigDecimal6 = new BigDecimal((-2309L));
      assertEquals((short) (-2309), bigDecimal6.shortValue());
      assertEquals((byte) (-5), bigDecimal6.byteValue());
      assertFalse(bigDecimal6.equals((Object)bigDecimal5));
      assertFalse(bigDecimal6.equals((Object)bigDecimal2));
      assertFalse(bigDecimal6.equals((Object)bigDecimal0));
      assertFalse(bigDecimal6.equals((Object)bigDecimal3));
      assertTrue(bigDecimal6.equals((Object)bigDecimal1));
      assertFalse(bigDecimal6.equals((Object)bigDecimal4));
      assertNotNull(bigDecimal6);
      
      bigDecimalArray1[6] = bigDecimal6;
      BigDecimal bigDecimal7 = new BigDecimal((-1279));
      assertEquals((byte)1, bigDecimal7.byteValue());
      assertEquals((short) (-1279), bigDecimal7.shortValue());
      assertFalse(bigDecimal7.equals((Object)bigDecimal1));
      assertFalse(bigDecimal7.equals((Object)bigDecimal4));
      assertFalse(bigDecimal7.equals((Object)bigDecimal6));
      assertFalse(bigDecimal7.equals((Object)bigDecimal0));
      assertFalse(bigDecimal7.equals((Object)bigDecimal5));
      assertFalse(bigDecimal7.equals((Object)bigDecimal2));
      assertFalse(bigDecimal7.equals((Object)bigDecimal3));
      assertNotNull(bigDecimal7);
      
      bigDecimalArray1[7] = bigDecimal7;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(8, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(8, bigDecimalArray1.length);
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(64, int0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
      
      try { 
        bigMatrixImpl1.solve((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(0, 0, 0, 0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.multiply(bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.preMultiply(bigDecimalArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[][] stringArray0 = new String[0][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5098, 5098);
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(4);
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.copy();
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(4, bigMatrixImpl2.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertNotNull(bigMatrixImpl3);
      
      BigMatrixImpl bigMatrixImpl4 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl3);
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(4, bigMatrixImpl4.getColumnDimension());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertEquals(4, bigMatrixImpl4.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertNotNull(bigMatrixImpl4);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl4));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      bigDecimalArray0[3] = bigDecimal0;
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[3][0];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      try { 
        bigMatrixImpl2.setSubMatrix(bigDecimalArray1, 0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(13, 4952);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4952, bigMatrixImpl0.getColumnDimension());
      assertEquals(13, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigMatrixImpl0.equals(object0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(1, bigDecimalArray0.length);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getColumnMatrix((-434));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 1;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.add(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getRowAsDoubleArray(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.multiply(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[][] stringArray0 = new String[8][6];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      double[][] doubleArray0 = new double[10][4];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(10, doubleArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.equals(bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1696, 1696);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1696, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1696, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(1696, (-1), 1696, 1696);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[0];
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // selected row and column index arrays must be non-empty
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      bigMatrixImpl0.setScale(2);
      assertEquals(2, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getNorm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1962, 1962);
      assertEquals(1962, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1962, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowMatrix((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigMatrixImpl2.luDecompose();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl2.scalarAdd(bigDecimal0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl3);
      
      BigDecimal bigDecimal1 = bigMatrixImpl2.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(2, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.multiply(bigMatrixImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getRowMatrix(1022);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(5102, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl1);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(5102, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getColumnAsDoubleArray(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigDecimalArray0.length);
      assertTrue(boolean0);
      
      try { 
        bigMatrixImpl0.getColumn(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1071, 4);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertNotNull(string0);
      
      try { 
        bigMatrixImpl0.getRow(1071);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      BigMatrixImpl bigMatrixImpl1 = null;
      try {
        bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getNorm();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl1.getDeterminant();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = new BigDecimal(956);
      assertEquals((short)956, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      bigDecimalArray0[1] = bigDecimal1;
      BigDecimal bigDecimal2 = new BigDecimal((double) 956);
      assertEquals((short)956, bigDecimal2.shortValue());
      assertEquals((byte) (-68), bigDecimal2.byteValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      
      bigDecimalArray0[2] = bigDecimal2;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(3, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl0.multiply(bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(3, bigMatrixImpl1.getColumnDimension());
      assertEquals(3, bigMatrixImpl2.getColumnDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(3, bigMatrixImpl2.getRowDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertEquals(3, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl2);
      
      try { 
        bigMatrixImpl0.solve((BigMatrix) bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Incorrect row dimension
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.operate(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray0[1] = doubleArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.inverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5185, 5185);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5185, bigMatrixImpl0.getColumnDimension());
      assertEquals(5185, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(5185, 2303);
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(5185, bigMatrixImpl1.getRowDimension());
      assertEquals(2303, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.scalarMultiply(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      bigMatrixImpl1.setRoundingMode(2778);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(2778, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.getDeterminant();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.scalarAdd(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(7, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.solve(bigDecimalArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getColumn(1242);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertEquals(5102, bigDecimalArray0.length);
      assertNotNull(bigDecimalArray0);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(11);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertFalse(bigMatrixImpl2.isSquare());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(5102, bigMatrixImpl2.getRowDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl2);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertNotNull(bigMatrixImpl3);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      try { 
        bigMatrixImpl0.add(bigMatrixImpl3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      bigMatrixImpl0.getIdentity(5102);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl1.operate(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertNotNull(bigDecimalArray1);
      
      BigDecimal[] bigDecimalArray2 = bigMatrixImpl1.preMultiply(bigDecimalArray1);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray0, bigDecimalArray2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray1, bigDecimalArray2);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotSame(bigDecimalArray2, bigDecimalArray1);
      assertNotSame(bigDecimalArray2, bigDecimalArray0);
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray0));
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertEquals(1, bigDecimalArray2.length);
      assertNotNull(bigDecimalArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.add(bigMatrixImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1946, 1946);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1946, bigMatrixImpl0.getRowDimension());
      assertEquals(1946, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowMatrix(1946);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getDataAsDoubleArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(1071, 4);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      String string0 = bigMatrixImpl0.toString();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertNotNull(string0);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getRow(1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertEquals(4, bigDecimalArray1.length);
      assertNotNull(bigDecimalArray1);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1071, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1071, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1247L);
      assertEquals((short)1247, bigDecimal0.shortValue());
      assertEquals((byte) (-33), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigMatrixImpl.ONE;
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal1;
      bigDecimalArray0[2] = bigDecimal0;
      bigDecimalArray0[3] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      bigMatrixImpl1.hashCode();
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigDecimalArray0.length);
      
      double[][] doubleArray0 = bigMatrixImpl1.getDataAsDoubleArray();
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(4, bigDecimalArray0.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      try { 
        bigMatrixImpl0.getRowMatrix((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getSubMatrix(0, 0, (-4874), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigMatrixImpl0.equals(object0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.copy();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertTrue(bigMatrixImpl2.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertNotNull(bigMatrixImpl3);
      
      BigMatrixImpl bigMatrixImpl4 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl3);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(11, bigMatrixImpl4.getRowDimension());
      assertEquals(11, bigMatrixImpl4.getColumnDimension());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl4);
      
      BigDecimal bigDecimal0 = bigMatrixImpl4.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertTrue(bigMatrixImpl4.isSquare());
      assertEquals(11, bigMatrixImpl4.getRowDimension());
      assertEquals(11, bigMatrixImpl4.getColumnDimension());
      assertEquals(64, bigMatrixImpl4.getScale());
      assertEquals(4, bigMatrixImpl4.getRoundingMode());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl4);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl4, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl4));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl4));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl4.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
      
      try { 
        bigMatrixImpl4.solve((BigMatrix) bigMatrixImpl3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Matrix is singular.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[][] stringArray0 = new String[17][6];
      String[] stringArray1 = new String[1];
      stringArray0[0] = stringArray1;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.equals(bigMatrixImpl0);
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(1818, (-1833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl2);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl3);
      
      int int0 = bigMatrixImpl3.getScale();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(11, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(11, bigMatrixImpl3.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigDecimal bigDecimal0 = new BigDecimal(1247L);
      assertEquals((short)1247, bigDecimal0.shortValue());
      assertEquals((byte) (-33), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      bigDecimalArray0[1] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertEquals((short)1247, bigDecimal0.shortValue());
      assertEquals((byte) (-33), bigDecimal0.byteValue());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      assertEquals((short)1247, bigDecimal0.shortValue());
      assertEquals((byte) (-33), bigDecimal0.byteValue());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(bigMatrixImpl2.isSquare());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(2, bigMatrixImpl2.getRowDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(1, bigMatrixImpl2.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl2);
      
      try { 
        bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      try { 
        bigMatrixImpl0.getSubMatrix(0, 7, (-2652), 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5098, 5098);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(4);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.copy();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(4, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl2);
      
      BigMatrixImpl bigMatrixImpl3 = (BigMatrixImpl)bigMatrixImpl1.subtract(bigMatrixImpl1);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertNotNull(bigMatrixImpl3);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = bigMatrixImpl1.equals(bigMatrixImpl2);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl2.getColumnDimension());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(4, bigMatrixImpl2.getRowDimension());
      assertTrue(bigMatrixImpl2.isSquare());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl3));
      assertTrue(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertTrue(boolean0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl3.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5098, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5098, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl3.getRowDimension());
      assertTrue(bigMatrixImpl3.isSquare());
      assertEquals(4, bigMatrixImpl3.getRoundingMode());
      assertEquals(4, bigMatrixImpl3.getColumnDimension());
      assertEquals(64, bigMatrixImpl3.getScale());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl3);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl3, bigMatrixImpl2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl3));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl3.equals((Object)bigMatrixImpl2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(2, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = (-435);
      try { 
        bigMatrixImpl0.getSubMatrix((-435), (-1), (-435), 1006);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(486, 486);
      assertEquals(486, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(486, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.copy();
      assertEquals(486, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(486, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(486, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(486, bigMatrixImpl1.getRowDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.getRowMatrix(486);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5185, 5185);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5185, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5185, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(5185, 2297);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(5185, bigMatrixImpl1.getRowDimension());
      assertEquals(2297, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertFalse(bigMatrixImpl1.isSquare());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl0.getSubMatrix(2297, 2297, 5185, 2297);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.solve(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray1.length);
      assertNotNull(bigDecimalArray1);
      
      BigDecimal[] bigDecimalArray2 = bigMatrixImpl0.solve(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotSame(bigDecimalArray0, bigDecimalArray2);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray2, bigDecimalArray0);
      assertNotSame(bigDecimalArray2, bigDecimalArray1);
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray0));
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(1, bigDecimalArray2.length);
      assertNotNull(bigDecimalArray2);
      
      BigDecimal[][] bigDecimalArray3 = new BigDecimal[3][2];
      BigDecimal[] bigDecimalArray4 = new BigDecimal[6];
      assertFalse(bigDecimalArray4.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray4.equals((Object)bigDecimalArray2));
      assertFalse(bigDecimalArray4.equals((Object)bigDecimalArray0));
      
      bigDecimalArray4[0] = bigDecimal0;
      bigDecimalArray4[1] = bigDecimal0;
      bigDecimalArray4[2] = bigDecimal0;
      bigDecimalArray4[3] = bigDecimal0;
      BigDecimal bigDecimal1 = new BigDecimal(0.0);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      bigDecimalArray4[4] = bigDecimal1;
      bigDecimalArray4[5] = bigDecimal0;
      bigDecimalArray3[0] = bigDecimalArray4;
      BigDecimal[] bigDecimalArray5 = new BigDecimal[6];
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray4));
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray2));
      assertFalse(bigDecimalArray5.equals((Object)bigDecimalArray0));
      
      bigDecimalArray5[0] = bigDecimal1;
      bigDecimalArray5[1] = bigDecimal1;
      bigDecimalArray5[2] = bigDecimal1;
      bigDecimalArray5[3] = bigDecimal0;
      bigDecimalArray5[4] = bigDecimal0;
      bigDecimalArray5[5] = bigDecimal1;
      bigDecimalArray3[1] = bigDecimalArray5;
      bigDecimalArray3[2] = bigDecimalArray1;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray3, 1657, 1657);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      boolean boolean0 = bigMatrixImpl1.isSingular();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(boolean0);
      
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertTrue(bigMatrixImpl2.isSquare());
      assertEquals(11, bigMatrixImpl2.getRowDimension());
      assertEquals(11, bigMatrixImpl2.getColumnDimension());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals(64, bigMatrixImpl2.getScale());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl2, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl2.equals((Object)bigMatrixImpl1));
      assertNotNull(bigMatrixImpl2);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5102, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5102, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(11, bigMatrixImpl1.getRowDimension());
      assertEquals(11, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl2);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl2));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl((BigDecimal[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      try { 
        bigMatrixImpl0.getRowAsDoubleArray((-2006));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getEntryAsDouble(4952, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[6];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertFalse(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(6, bigMatrixImpl0.getRowDimension());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(6, bigMatrixImpl1.getRowDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(6, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl1);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimalArray0.length);
      assertEquals(64, int0);
      
      BigDecimal bigDecimal0 = BigMatrixImpl.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][8];
      bigDecimalArray1[0] = bigDecimalArray0;
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 64, 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[0];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(0, bigMatrixImpl0.getRowDimension());
      assertEquals(0, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[4][2];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      bigDecimalArray1[2] = bigDecimalArray0;
      bigDecimalArray1[3] = bigDecimalArray0;
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, 1022, 1022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one column.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.luDecompose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(4952, 4952);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4952, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4952, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getTrace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][0];
      // Undeclared exception!
      try { 
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix must have at least one row.
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigDecimalArray0.length);
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[2][9];
      bigDecimalArray1[0] = bigDecimalArray0;
      bigDecimalArray1[1] = bigDecimalArray0;
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertFalse(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(2, bigDecimalArray1.length);
      assertNotNull(bigMatrixImpl1);
      
      try { 
        bigMatrixImpl1.solve(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5116, 5116);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(30);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(30, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(30, bigMatrixImpl1.getColumnDimension());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigMatrixImpl1);
      
      BigDecimal bigDecimal0 = bigMatrixImpl1.getDeterminant();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(30, bigMatrixImpl1.getRowDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(30, bigMatrixImpl1.getColumnDimension());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertNotNull(bigDecimal0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[0][5];
      try { 
        bigMatrixImpl1.setSubMatrix(bigDecimalArray0, 30, (-2583));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(string0);
      assertEquals("BigMatrixImpl{}", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5116, 5116);
      assertEquals(5116, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5116, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 5116;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 5116;
      try { 
        bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5185, 5185);
      assertEquals(5185, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5185, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 242;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertEquals(5185, bigMatrixImpl0.getColumnDimension());
      assertTrue(bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(5185, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertTrue(bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertEquals(1, intArray0.length);
      assertNotNull(bigMatrixImpl1);
      assertArrayEquals(new int[] {242}, intArray0);
      
      // Undeclared exception!
      try { 
        bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5116, 5116);
      BigMatrix bigMatrix0 = bigMatrixImpl0.getIdentity(11);
      bigMatrix0.getDeterminant();
      try { 
        bigMatrixImpl0.setSubMatrix((BigDecimal[][]) null, (-919), (-919));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
         verifyException("org.apache.commons.math.linear.BigMatrixImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(5102, 5102);
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getIdentity(11);
      BigMatrixImpl bigMatrixImpl2 = (BigMatrixImpl)bigMatrixImpl1.getLUMatrix();
      assertTrue(bigMatrixImpl0.isSquare());
      
      BigDecimal bigDecimal0 = bigMatrixImpl2.getDeterminant();
      assertEquals(64, bigMatrixImpl2.getScale());
      assertEquals(4, bigMatrixImpl2.getRoundingMode());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      bigMatrixImpl1.getColumnAsDoubleArray(7);
      assertEquals(64, bigMatrixImpl1.getScale());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
  }
}

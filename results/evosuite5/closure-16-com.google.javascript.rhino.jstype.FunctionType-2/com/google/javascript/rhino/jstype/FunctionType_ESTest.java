/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 07:08:20 GMT 2019
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionType_ESTest extends FunctionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "~SwHd3s$8 THa503");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("~SwHd3s$8 THa503", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, false, jSTypeArray0);
      assertEquals(1, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("~SwHd3s$8 THa503", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      
      boolean boolean0 = functionType0.hasAnyTemplateInternal();
      assertEquals(1, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isEnumElementType());
      assertEquals("~SwHd3s$8 THa503", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      String string0 = noResolvedType0.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (this:me, {9}): me", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      
      String string0 = functionType0.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function ({9}): {9}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      
      FunctionType functionType0 = noResolvedType0.supAndInfHelper(errorFunctionType0, true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      
      String string0 = functionType0.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("{18}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "&PDm6shlB");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolveInternal(simpleErrorReporter0, noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isRecordType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertTrue(errorFunctionType1.isResolved());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isVoidType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isFunctionType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      
      FunctionType functionType1 = (FunctionType)functionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "8{.&(x2F", (Node) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isEnumType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.hasCachedValues());
      
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(errorFunctionType0, jSTypeArray0);
      assertEquals(2, jSTypeArray0.length);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      
      // Undeclared exception!
      try { 
        functionType0.setImplicitPrototype(parameterizedType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(nullType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) nullType0, false, jSTypeArray0);
      assertEquals(0, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertEquals(0, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      
      boolean boolean0 = functionType0.hasCachedValues();
      assertEquals(0, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isNominalConstructor());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertFalse(nullType0.isParameterizedType());
      assertEquals("null", nullType0.getDisplayName());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isVoidType());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isEnumType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertFalse(nullType0.isNoResolvedType());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "};67^YO");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(2, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, (List<JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(2, immutableList0.size());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      
      functionType0.clearCachedValues();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(2, immutableList0.size());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString("");
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      
      FunctionType functionType0 = errorFunctionType0.cloneWithoutArrowType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      
      boolean boolean0 = errorFunctionType0.setPrototype(noObjectType0, node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString(105, "!lWEYjFM{&Os");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("CONSTRUCTOR", node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      
      String string0 = functionType0.toDebugHashCodeString();
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (this:{564554714}): {9}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      
      functionType0.setSource(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertEquals(105, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      
      Node[] nodeArray0 = new Node[1];
      noType0.setPrototypeBasedOn((ObjectType) noType0, nodeArray0[0]);
      assertEquals(1, nodeArray0.length);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      
      noType0.setSource((Node) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      Node node0 = Node.newString("");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      
      String string0 = errorFunctionType0.toDebugHashCodeString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (this:{0}, {12}, {12}, {12}): {0}", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      errorFunctionType0.setSource(node0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      
      noResolvedType0.setSource((Node) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.isNominalConstructor());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType[] arrowTypeArray0 = new ArrowType[3];
      Node node0 = Node.newNumber(0.0, (-581), (-581));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isAllType());
      
      arrowTypeArray0[0] = arrowType0;
      arrowTypeArray0[1] = arrowType0;
      arrowTypeArray0[2] = arrowType0;
      ImmutableList<ArrowType> immutableList0 = ImmutableList.copyOf(arrowTypeArray0);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertNotNull(immutableList0);
      assertEquals(3, immutableList0.size());
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertNotNull(immutableList1);
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) arrowType0, (List<JSType>) immutableList1);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isAllType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) arrowType0, node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      
      functionType0.setInstanceType(functionType1);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isAllType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType1, functionType0);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isAllType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isAllType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertTrue(functionType2.canBeCalled());
      
      FunctionType functionType3 = functionType2.supAndInfHelper(functionType0, true);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType3);
      assertSame(functionType0, functionType3);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType3);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType3);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType3, functionType1);
      assertSame(functionType3, functionType0);
      assertNotSame(functionType3, functionType2);
      assertFalse(functionType0.equals((Object)functionType2));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType3.equals((Object)functionType1));
      assertFalse(functionType3.equals((Object)functionType2));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isAllType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isAllType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNominalConstructor());
      assertTrue(functionType2.hasCachedValues());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType3.isNoType());
      assertFalse(functionType3.isNoObjectType());
      assertFalse(functionType3.isFunctionPrototypeType());
      assertFalse(functionType3.isParameterizedType());
      assertTrue(functionType3.hasCachedValues());
      assertFalse(functionType3.isResolved());
      assertFalse(functionType3.hasInstanceType());
      assertFalse(functionType3.isCheckedUnknownType());
      assertFalse(functionType3.isStringValueType());
      assertFalse(functionType3.isNumberValueType());
      assertFalse(functionType3.isEnumType());
      assertFalse(functionType3.isBooleanValueType());
      assertFalse(functionType3.isVoidType());
      assertFalse(functionType3.isRecordType());
      assertFalse(functionType3.isUnionType());
      assertFalse(functionType3.isNoResolvedType());
      assertEquals(0, functionType3.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType3.getPossibleToBooleanOutcomes());
      assertFalse(functionType3.isNominalConstructor());
      assertTrue(functionType3.isFunctionType());
      assertFalse(functionType3.isNullType());
      assertTrue(functionType3.isOrdinaryFunction());
      assertFalse(functionType3.isInterface());
      assertFalse(functionType3.isReturnTypeInferred());
      assertFalse(functionType3.isNominalType());
      assertFalse(functionType3.isEnumElementType());
      assertFalse(functionType3.isTemplateType());
      assertFalse(functionType3.isConstructor());
      assertFalse(functionType3.isAllType());
      assertTrue(functionType3.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType[] arrowTypeArray0 = new ArrowType[3];
      Node node0 = Node.newNumber(0.0, (-581), (-581));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      
      arrowTypeArray0[0] = arrowType0;
      arrowTypeArray0[1] = arrowType0;
      arrowTypeArray0[2] = arrowType0;
      ImmutableList<ArrowType> immutableList0 = ImmutableList.copyOf(arrowTypeArray0);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertNotNull(immutableList0);
      assertEquals(3, immutableList0.size());
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertNotNull(immutableList1);
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) arrowType0, (List<JSType>) immutableList1);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      
      functionType0.setInstanceType(functionType0);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType2 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType1);
      assertTrue(immutableList0.contains(arrowType0));
      assertEquals(3, arrowTypeArray0.length);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType2, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(3, immutableList0.size());
      assertEquals(3, immutableList1.size());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isNominalConstructor());
      assertTrue(functionType2.isOrdinaryFunction());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isResolved());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      
      // Undeclared exception!
      try { 
        functionType2.supAndInfHelper(functionType0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = Node.newString(105, "!lWEYjFM{&Os");
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(105, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("!lWEYjFM{&Os", node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(105, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "!lWEYjFM{&Os");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      
      boolean boolean0 = functionType0.isSubtype(errorFunctionType0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(105, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertEquals(3, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) voidType0, (List<JSType>) immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      String string0 = functionType0.toStringHelper(false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (undefined, undefined, ...[undefined]): undefined", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.matchesStringContext());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertEquals(3, immutableList0.size());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("N]=Nt&WUb", (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      
      String string0 = functionType0.toStringHelper(false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (this:N]=Nt&WUb): ?", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isNominalConstructor());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isNominalConstructor());
      
      String string0 = functionType1.toStringHelper(true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      
      String string0 = errorFunctionType0.toStringHelper(true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (new:, *=, *=, *=): ", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "%s (%s) must not be greater than size (%s)");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      
      errorFunctionType0.setPrettyPrint(false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      
      String string0 = errorFunctionType0.toStringHelper(false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(string0);
      assertEquals("Function", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Undefined", (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      jSTypeRegistry0.registerTypeImplementingInterface(functionType0, functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(11, immutableList0.size());
      
      functionType0.setImplementedInterfaces(immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(11, immutableList0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      
      boolean boolean0 = JSType.isEquivalent(functionType0, functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Qj0'|-sz[=", (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
      
      boolean boolean0 = functionType0.isEquivalentTo(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      NoObjectType noObjectType0 = (NoObjectType)functionType1.getTopMostDefiningType("Not declared as a type name");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isResolved());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isResolved());
      assertEquals(9, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isResolved());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      
      // Undeclared exception!
      try { 
        functionType0.getTopMostDefiningType("Not declared as a type name");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.getTopMostDefiningType("Not declared as a type name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isStringValueType());
      assertTrue(noResolvedType1.isConstructor());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isParameterizedType());
      assertTrue(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isTemplateType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isAllType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test30()  throws Throwable  {
      Node node0 = Node.newString(105, "!lWEYjFM{&Os");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("!lWEYjFM{&Os", node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "): ");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "", (-2742), (-2742));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, namedType0, functionType0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(indexedType0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasCachedValues());
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) errorFunctionType0, (ObjectType) indexedType0, (ObjectType) errorFunctionType0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasCachedValues());
      assertEquals(4, immutableList0.size());
      
      functionType0.setExtendedInterfaces(immutableList0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(4, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isConstructor());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertEquals("", namedType0.getReferenceName());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasCachedValues());
      assertEquals(4, immutableList0.size());
      
      ObjectType objectType0 = functionType0.getTopMostDefiningType("Not declared as a type name");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      assertSame(objectType0, indexedType0);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertTrue(node0.isFunction());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(4, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      ObjectType objectType0 = FunctionType.getTopDefiningInterface(functionType0, "DATE_FUNCTION_TYPE");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      
      FunctionType functionType0 = noType0.getBindReturnType(0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      
      // Undeclared exception!
      try { 
        functionType0.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      
      ImmutableList<AllType> immutableList0 = ImmutableList.of(allType0, allType0, allType0, allType0, allType0);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertEquals(5, immutableList0.size());
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) instanceObjectType0, (List<JSType>) immutableList1);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, stringType0);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isVoidType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isParameterizedType());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertTrue(allType0.isAllType());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNominalConstructor());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isNominalType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isAllType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertEquals(9, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isTemplateType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNoResolvedType());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertTrue(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isEnumType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.hasCachedValues());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isTemplateType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isStringValueType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isBooleanValueType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      
      NoResolvedType noResolvedType1 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType1);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isTemplateType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertNull(noResolvedType1.getReferenceName());
      
      FunctionType functionType0 = noResolvedType1.supAndInfHelper(noResolvedType0, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isTemplateType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertNull(noResolvedType1.getReferenceName());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType0, functionType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertNotSame(noResolvedType1, functionType1);
      assertSame(functionType1, noResolvedType0);
      assertNotSame(functionType1, noResolvedType1);
      assertFalse(noResolvedType0.equals((Object)noResolvedType1));
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(functionType1.equals((Object)noResolvedType1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertTrue(noResolvedType1.hasInstanceType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isVoidType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isResolved());
      assertFalse(noResolvedType1.isEnumType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isTemplateType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.canBeCalled());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(functionType1.hasCachedValues());
      assertTrue(functionType1.isConstructor());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.hasInstanceType());
      assertFalse(functionType1.isRecordType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNominalType());
      assertNull(functionType1.getReferenceName());
      assertTrue(functionType1.matchesStringContext());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.matchesNumberContext());
      assertFalse(functionType1.isFunctionType());
      assertTrue(functionType1.isNullable());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.matchesObjectContext());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isNoResolvedType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isVoidType());
      assertEquals(Integer.MAX_VALUE, functionType1.getPropertiesCount());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertSame(functionType1, functionType2);
      assertSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
      assertSame(functionType0, functionType2);
      assertSame(functionType2, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isParameterizedType());
      assertTrue(functionType2.isConstructor());
      assertTrue(functionType2.hasInstanceType());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isCheckedUnknownType());
      assertTrue(functionType2.canBeCalled());
      assertTrue(functionType2.isNominalConstructor());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isTemplateType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isBooleanValueType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isConstructor());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isConstructor());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertSame(functionType1, functionType2);
      assertSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals(9, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      Node node0 = new Node(1, 1, 0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertNotNull(node0);
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(1, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) allType0, node0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(1, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isVoidType());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isCheckedUnknownType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(1, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.hasCachedValues());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isRecordType());
      assertTrue(functionType2.canBeCalled());
      assertTrue(functionType2.hasCachedValues());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isNoType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isNominalConstructor());
      assertTrue(functionType2.isOrdinaryFunction());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isVoidType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals(9, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isReturnTypeInferred());
      assertTrue(functionType1.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isNullType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isStringValueType());
      assertFalse(functionType2.isResolved());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isTemplateType());
      assertTrue(functionType2.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isBooleanValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertEquals(9, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      
      Node node0 = Node.newString("Not declared as a type name");
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) allType0, node0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isStringValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertTrue(functionType1.hasCachedValues());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isStringValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isNominalType());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isBooleanValueType());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isEnumElementType());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isResolved());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isStringValueType());
      assertTrue(functionType2.hasCachedValues());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Not declared as a constructor", "dlS}(Y3", 2, 2683);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(namedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) namedType0, (JSType) namedType0, (JSType) allType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) namedType0, (JSType) allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertEquals(9, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, (List<JSType>) immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      
      Node node0 = new Node(0, 0, 1);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) noResolvedType0, node0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals("Not declared as a constructor", namedType0.getReferenceName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.matchesStringContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNullType());
      assertEquals(9, immutableList0.size());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAnd());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
      assertEquals(4, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      assertEquals(4, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isVoidType());
      
      FunctionType functionType2 = functionType0.supAndInfHelper(functionType1, true);
      assertEquals(4, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isResolved());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(noResolvedType0, false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isBooleanValueType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      
      FunctionType functionType0 = noResolvedType0.supAndInfHelper(noResolvedType0, true);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertSame(noResolvedType0, functionType0);
      assertSame(functionType0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.matchesObjectContext());
      assertTrue(functionType0.isNullable());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, functionType0.getPropertiesCount());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertNull(functionType0.getReferenceName());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.matchesNumberContext());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "{R!uB{m KEY)");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      
      FunctionType functionType0 = errorFunctionType0.getBindReturnType(3968);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      
      FunctionType functionType0 = noObjectType0.getBindReturnType(64336);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType("apply");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isNullType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isTemplateType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType("call");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
      
      String string0 = functionType0.toAnnotationString();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(string0);
      assertEquals("function ((Named type with empty name component|null)=, *=, *=, *=): Named type with empty name component", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(noResolvedType0, noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      boolean boolean0 = functionType0.defineInferredProperty("Unknown class name", noResolvedType0, (Node) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)functionType0.getPropertyType("Unknown class name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertTrue(noResolvedType1.isConstructor());
      assertNull(noResolvedType1.getReferenceName());
      assertFalse(noResolvedType1.isUnionType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertTrue(noResolvedType1.isNullable());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isEnumElementType());
      assertFalse(noResolvedType1.isEnumType());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNullType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isFunctionType());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType1.isInterface());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertFalse(noResolvedType1.isNoObjectType());
      assertFalse(noResolvedType1.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0, (ObjectType) noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertEquals(4, immutableList0.size());
      
      try { 
        noResolvedType0.setExtendedInterfaces(immutableList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, "Undefined", (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.AbstractMultimap$RandomAccessWrappedList");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      
      ImmutableList<ObjectType> immutableList0 = ImmutableList.of((ObjectType) functionType0, (ObjectType) functionType0, (ObjectType) errorFunctionType0, (ObjectType) functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(4, immutableList0.size());
      
      functionType0.setExtendedInterfaces(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(4, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertEquals(4, immutableList0.size());
      
      Iterable<ObjectType> iterable0 = functionType0.getAllExtendedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertEquals(4, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.FunctionType$Kind");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getAllImplementedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType(0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      
      Iterable<ObjectType> iterable0 = functionType0.getImplementedInterfaces();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Node node0 = Node.newString(105, "!lWEYjFM{&Os");
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("!lWEYjFM{&Os", node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoResolvedType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
      
      functionType1.setPrototypeBasedOn((ObjectType) functionType0, node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isNoResolvedType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isAllType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNoType());
      assertTrue(functionType1.isFunctionType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      
      Node node0 = Node.newString((-1797332415), "Named type with empty name component");
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertEquals((-1797332415), node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      
      boolean boolean0 = noResolvedType0.setPrototype((ObjectType) null, node0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertEquals((-1797332415), node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(set0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "prototype");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)errorFunctionType0.getPropertyType("prototype");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      
      int int0 = noResolvedType0.getMaxArguments();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNoType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(3, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ", ", (Node) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isConstructor());
      assertTrue(functionType0.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = (JSType) noType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, jSTypeArray0);
      assertEquals(4, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
      
      int int0 = functionType0.getMinArguments();
      assertEquals(4, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(3, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "8rS2U1");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "| WO s-Kf8of");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      
      boolean boolean0 = errorFunctionType0.hasImplementedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      
      FunctionType functionType0 = noResolvedType0.getBindReturnType((-69));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      
      boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      
      Set<String> set0 = noResolvedType0.getOwnPropertyNames();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(set0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isStringValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)stringType0.autoboxesTo();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      
      ImmutableList<AllType> immutableList0 = ImmutableList.of(allType0, allType0, allType0, allType0, allType0);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) instanceObjectType0, (List<JSType>) immutableList1);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      
      Node node0 = Node.newString("Named type with empty name component", 1, 1);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertNotNull(node0);
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) allType0, node0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      
      FunctionType functionType2 = functionType1.supAndInfHelper(functionType0, false);
      assertTrue(immutableList0.contains(allType0));
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType2, functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isInterface());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isOrdinaryFunction());
      assertEquals("string", stringType0.getDisplayName());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNominalConstructor());
      assertFalse(stringType0.isEnumType());
      assertTrue(stringType0.matchesObjectContext());
      assertFalse(stringType0.isNullType());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isStringValueType());
      assertTrue(allType0.hasDisplayName());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isParameterizedType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      assertEquals(5, immutableList1.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertEquals(4097, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isParameterizedType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNoObjectType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType2.isNoObjectType());
      assertFalse(functionType2.isConstructor());
      assertFalse(functionType2.hasInstanceType());
      assertFalse(functionType2.hasCachedValues());
      assertFalse(functionType2.isFunctionPrototypeType());
      assertFalse(functionType2.isUnionType());
      assertFalse(functionType2.isNoResolvedType());
      assertFalse(functionType2.isNumberValueType());
      assertFalse(functionType2.isParameterizedType());
      assertFalse(functionType2.isRecordType());
      assertFalse(functionType2.isResolved());
      assertFalse(functionType2.isReturnTypeInferred());
      assertFalse(functionType2.isVoidType());
      assertFalse(functionType2.isStringValueType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertFalse(functionType2.isNullType());
      assertFalse(functionType2.isAllType());
      assertFalse(functionType2.isEnumType());
      assertFalse(functionType2.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertFalse(functionType2.isBooleanValueType());
      assertTrue(functionType2.canBeCalled());
      assertFalse(functionType2.isInterface());
      assertFalse(functionType2.isCheckedUnknownType());
      assertFalse(functionType2.isEnumElementType());
      assertTrue(functionType2.isOrdinaryFunction());
      assertTrue(functionType2.isFunctionType());
      assertFalse(functionType2.isNoType());
      assertFalse(functionType2.isNominalConstructor());
      assertFalse(functionType2.isNominalType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Node node0 = Node.newString(105, "!lWEYjFM{&Os");
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("!lWEYjFM{&Os", node0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NumberType");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      
      FunctionType functionType1 = functionType0.supAndInfHelper(errorFunctionType0, false);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasInstanceType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
      
      boolean boolean0 = functionType1.isSubtype(functionType0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals(105, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(functionType0.hasCachedValues());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.hasInstanceType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isNominalConstructor());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isConstructor());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isInterface());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType((String) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-2061968331));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertEquals((-2061968331), node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      
      // Undeclared exception!
      try { 
        FunctionType.forInterface(jSTypeRegistry0, "ZAZ[ 2h8", node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node(0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getType());
      assertFalse(node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType("(9", node0, node0, (JSType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "4B_1$emc||RuOwgEIL(");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      
      List<FunctionType> list0 = errorFunctionType0.getSubTypes();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNull(list0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getOwnImplementedInterfaces();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(iterable0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      
      int int0 = noResolvedType0.getExtendedInterfacesCount();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      
      boolean boolean0 = noResolvedType0.canBeCalled();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isEnumType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
      
      boolean boolean0 = noResolvedType0.isInstanceType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      
      FunctionType functionType0 = noResolvedType0.cloneWithoutArrowType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      
      String string0 = functionType0.toStringHelper(true);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(string0);
      assertEquals("function (new:?, ...[?]): ?", string0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isFunctionType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isNullable());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.isReturnTypeInferred();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      functionType0.supAndInfHelper(functionType1, true);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.hasEqualCallType(noResolvedType0);
      assertFalse(noResolvedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.NumberType");
      Visitor<StringType> visitor0 = (Visitor<StringType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
      errorFunctionType0.visit(visitor0);
      assertFalse(errorFunctionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "bind");
      errorFunctionType0.getPropertyType("bind");
      assertTrue(errorFunctionType0.hasCachedValues());
  }
}

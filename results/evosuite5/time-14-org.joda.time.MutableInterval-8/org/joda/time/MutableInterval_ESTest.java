/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 20 21:42:54 GMT 2019
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MutableInterval_ESTest extends MutableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, instant0);
      mutableInterval0.setPeriodBeforeEnd((ReadablePeriod) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1296L), (-1296L));
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      mutableInterval0.setPeriodBeforeEnd(mutablePeriod0);
      assertEquals((-1296L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, instant0);
      mutableInterval0.setPeriodAfterStart((ReadablePeriod) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      mutableInterval0.setPeriodAfterStart(days0);
      assertEquals(1392927681320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      DateMidnight dateMidnight0 = new DateMidnight((long) 623158436);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) dateMidnight0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, instant0);
      mutableInterval0.setInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1296L), (-1296L));
      mutableInterval0.setInterval((ReadableInterval) mutableInterval0);
      assertEquals((-1296L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, instant0);
      Duration duration0 = new Duration(instant0, instant0);
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      // Undeclared exception!
      try { 
        mutableInterval0.setInterval((ReadableInterval) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Interval must not be null
         //
         verifyException("org.joda.time.MutableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1296L), (-1296L));
      DateTime dateTime0 = mutableInterval0.getStart();
      mutableInterval0.setEnd(dateTime0);
      assertEquals((-1296L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
      Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
      Duration duration0 = minutes0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.minutes(623158436);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, period0);
      assertEquals(38781915441320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L));
      Minutes minutes0 = Minutes.standardMinutesIn(mutablePeriod0);
      MutableInterval mutableInterval0 = new MutableInterval(minutes0, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      assertEquals(1392409281320L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval(duration0, (ReadableInstant) null);
      assertEquals(1392409281320L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableInterval mutableInterval0 = new MutableInterval((-716L), (-716L));
      // Undeclared exception!
      try { 
        mutableInterval0.setStart(instant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater or equal to the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-1296L), (-1296L));
      mutableInterval0.setDurationBeforeEnd(3255L);
      assertEquals((-4551L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertEquals(1392409281320L, mutableInterval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.SIX;
      Duration duration0 = days0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableInterval mutableInterval1 = new MutableInterval(mutableInterval0, gJChronology0);
      assertEquals(1392409281320L, mutableInterval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("IKkPeANigErV{{}`bd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: IKkPeANigErV{{}`bd
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationAfterStart(0L);
      assertEquals(0L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      assertNotSame(mutableInterval1, mutableInterval0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 17 12:20:46 GMT 2019
 */

package org.apache.commons.math.geometry;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.geometry.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Vector3D_ESTest extends Vector3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 1.0);
      Vector3D vector3D1 = Vector3D.plusK;
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
      assertEquals(0.7853981633974484, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        Vector3D.angle(vector3D1, vector3D0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // null norm
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = vector3D0.add((-3229.5486064), vector3D0);
      Vector3D vector3D2 = vector3D1.orthogonal();
      assertEquals(2074.057374860373, vector3D0.getY(), 0.01);
      assertEquals(0.0, vector3D2.getZ(), 0.01);
      assertEquals((-1.7383863358036346E-4), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = vector3D0.minusI.orthogonal();
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01);
      assertEquals((-1.0), vector3D1.getZ(), 0.01);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01);
      assertEquals(1.7383863358036344E-4, vector3D0.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(0.0, 0.0, 0.9999);
      // Undeclared exception!
      try { 
        vector3D0.zero.normalize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.geometry.Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = vector3D0.plusI.normalize();
      assertEquals(0.0, vector3D1.getAlpha(), 0.01);
      assertEquals(1.7383863358036344E-4, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, vector3D1.getDelta(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = vector3D0.plusK.subtract(2758.8, vector3D0);
      assertEquals(0.644650153420204, vector3D0.getAlpha(), 0.01);
      assertEquals((-1.7373361290103347E-4), vector3D1.getDelta(), 0.01);
      assertEquals((-2.496942500169589), vector3D1.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), (-1.0), 661.695);
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 0.0, vector3D0, (-1.0), vector3D0, 724.067137063, vector3D0);
      assertEquals(1.5686590710969417, vector3D1.getDelta(), 0.01);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      double double0 = vector3D0.getY();
      assertEquals(1.7383863358036344E-4, vector3D0.getDelta(), 0.01);
      assertEquals(2074.057374860373, double0, 0.01);
      assertEquals(0.644650153420204, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusJ;
      double double0 = vector3D0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D();
      assertEquals(0.0, vector3D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 1.0);
      double double0 = vector3D0.getDelta();
      assertEquals(0.7853981633974482, double0, 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = vector3D0.zero.add(vector3D0);
      assertEquals(1.7383863358036344E-4, vector3D1.getDelta(), 0.01);
      assertEquals(0.6, vector3D0.getZ(), 0.01);
      assertEquals(0.644650153420204, vector3D1.getAlpha(), 0.01);
      assertEquals(0.644650153420204, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-1.0), 1455.0, (-1.0));
      double double0 = vector3D0.getZ();
      assertEquals(1.5714836119100488, vector3D0.getAlpha(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = new Vector3D((-512.648037534158), vector3D0, 1117.264363328013, vector3D0);
      assertEquals(0.644650153420204, vector3D0.getAlpha(), 0.01);
      assertEquals(1.738386335803635E-4, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      double double0 = vector3D0.getAlpha();
      assertEquals(0.6, vector3D0.getZ(), 0.01);
      assertEquals(0.644650153420204, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 1.0);
      Vector3D vector3D1 = vector3D0.negate();
      assertEquals((-0.7853981633974482), vector3D1.getDelta(), 0.01);
      assertEquals(1.0, vector3D0.getZ(), 0.01);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(2758.8, 2074.057374860373, 0.6);
      Vector3D vector3D1 = vector3D0.subtract(vector3D0);
      assertEquals(1.7383863358036344E-4, vector3D0.getDelta(), 0.01);
      assertEquals(0.644650153420204, vector3D0.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.plusI;
      Vector3D vector3D1 = new Vector3D(0.0, vector3D0, 1161.685094647978, vector3D0, 1382.1, vector3D0);
      assertEquals(2543.785094647978, vector3D1.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 0.0, 1.0);
      double double0 = Vector3D.angle(vector3D0, vector3D0);
      assertEquals(0.7853981633974482, vector3D0.getDelta(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-5427.122376985097), (-5427.122376985097));
      Vector3D vector3D1 = new Vector3D((-5427.122376985097), vector3D0);
      double double0 = Vector3D.angle(vector3D0, vector3D1);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals((-1.5918642355237846), vector3D1.getAlpha(), 0.01);
      assertEquals((-1.5497284180660054), vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.zero;
      Vector3D vector3D1 = vector3D0.minusK.orthogonal();
      assertEquals(0.0, vector3D0.getNorm(), 0.01);
      assertEquals(1.0, vector3D1.getNorm(), 0.01);
      assertEquals((-1.5707963267948966), vector3D1.getAlpha(), 0.01);
      assertEquals(0.0, vector3D1.getX(), 0.01);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01);
  }
}

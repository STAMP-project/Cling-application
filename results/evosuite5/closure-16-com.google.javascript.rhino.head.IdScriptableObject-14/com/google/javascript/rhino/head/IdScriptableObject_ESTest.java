/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 22:20:03 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.IdScriptableObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeContinuation;
import com.google.javascript.rhino.head.NativeDate;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeGenerator;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeNumber;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.TopLevel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IdScriptableObject_ESTest extends IdScriptableObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  @Ignore
  public void test00()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.getOwnPropertyDescriptor(context0, "G&");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      ScriptableObject scriptableObject0 = importerTopLevel0.getOwnPropertyDescriptor(context0, "error reporter");
      assertNull(scriptableObject0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.getOwnPropertyDescriptor(context0, context0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2);
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Object object0 = nativeContinuation0.call(context0, nativeNumber0, nativeNumber0, context0.emptyArgs);
      importerTopLevel0.getOwnPropertyDescriptor(context0, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.getCurrentContext();
      nativeContinuation0.defineOwnProperty(context0, "error reporter", nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Context context0 = Context.getContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      importerTopLevel0.defineOwnProperty(context0, "Ss#> d8}?pzl&", nativeCall0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(8, nativeCall0, false);
      assertEquals(1, idFunctionObject0.methodId());
      
      nativeNumber0.initPrototypeConstructor(idFunctionObject0);
      assertFalse(idFunctionObject0.isSealed());
      assertEquals(1, idFunctionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(8, nativeCall0, true);
      assertEquals(1, idFunctionObject0.methodId());
      assertTrue(idFunctionObject0.isSealed());
      
      nativeNumber0.initPrototypeConstructor(idFunctionObject0);
      assertEquals(1, idFunctionObject0.getArity());
      assertEquals(1, idFunctionObject0.getLength());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      Context context0 = new Context();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeNumber0, "o8zD=/U.3eV(f", 110, "language version", 1, nativeCall0);
      // Undeclared exception!
      try { 
        importerTopLevel0.initPrototypeConstructor(idFunctionObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(8, nativeCall0, true);
      // Undeclared exception!
      try { 
        nativeNumber0.exportAsJSClass(4, idFunctionObject0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.exportAsJSClass(1, nativeCall0, true);
      boolean boolean0 = nativeNumber0.hasPrototypeMap();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2);
      boolean boolean0 = nativeNumber0.hasPrototypeMap();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeDate.init((Scriptable) null, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeArray nativeArray0 = new NativeArray(1304L);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      nativeArray0.defineOwnProperty(context0, context0, nativeCall0);
      Object[] objectArray0 = nativeArray0.getAllIds();
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeArray nativeArray0 = new NativeArray(1304L);
      Object[] objectArray0 = nativeArray0.getAllIds();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test15()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.exportAsJSClass(1, nativeCall0, true);
      // Undeclared exception!
      try { 
        nativeNumber0.getAttributes("dd;JEYqiG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property dd;JEYqiG not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.exportAsJSClass(4, nativeCall0, false);
      assertFalse(nativeCall0.isEmpty());
      
      int int0 = nativeNumber0.getAttributes("constructor");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test17()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2);
      // Undeclared exception!
      try { 
        nativeNumber0.getAttributes("constructor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Property constructor not found.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.activatePrototypeMap(2384);
      nativeCall0.delete("");
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      nativeCall0.delete("msg.modify.sealed");
      assertTrue(nativeCall0.isExtensible());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.exportAsJSClass(8, nativeCall0, true);
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      Context context0 = Context.getCurrentContext();
      nativeContinuation0.defineOwnProperty(context0, nativeNumber0, nativeNumber0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.exportAsJSClass(8, nativeCall0, false);
      assertFalse(nativeCall0.isEmpty());
      
      Object[] objectArray0 = nativeNumber0.getAllIds();
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.exportAsJSClass(13, nativeCall0, false);
      assertFalse(nativeCall0.isEmpty());
      
      NativeError nativeError0 = new NativeError();
      boolean boolean0 = nativeNumber0.has("constructor", (Scriptable) nativeError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0);
      NativeGenerator nativeGenerator0 = NativeGenerator.init(importerTopLevel0, true);
      // Undeclared exception!
      try { 
        importerTopLevel0.initPrototypeMethod(nativeGenerator0, 13, "error reporter", 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      // Undeclared exception!
      try { 
        nativeNumber0.exportAsJSClass((-1725), nativeCall0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject$PrototypeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2);
      nativeNumber0.defaultPut("", "G<>=HNiiZ:PL ");
      assertEquals("Number", nativeNumber0.getClassName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(0);
      // Undeclared exception!
      try { 
        nativeNumber0.initPrototypeValue(8, "", "", 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NativeNumber nativeNumber0 = new NativeNumber(2);
      Object object0 = nativeNumber0.defaultGet("com.google.javascript.rhino.head.ast.XmlDotQuery");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeString nativeString0 = new NativeString("g39Z+)=k6=LLy");
      // Undeclared exception!
      try { 
        nativeString0.getInstanceIdValue((-522));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -522
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        nativeIterator_StopIteration0.setInstanceIdValue(159, "StopIteration");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 159
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = new Context();
      NativeError nativeError0 = new NativeError();
      IdFunctionObject idFunctionObject0 = new IdFunctionObject(nativeError0, "o8zD=/U.3eV(f", 1897, "error reporter", 2, nativeError0);
      // Undeclared exception!
      try { 
        nativeError0.execIdCall(idFunctionObject0, context0, idFunctionObject0, idFunctionObject0, context0.emptyArgs);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BAD FUNCTION ID=1897 MASTER=com.google.javascript.rhino.head.NativeError@2
         //
         verifyException("com.google.javascript.rhino.head.IdFunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NativeContinuation nativeContinuation0 = new NativeContinuation();
      TopLevel topLevel0 = new TopLevel();
      // Undeclared exception!
      try { 
        topLevel0.exportAsJSClass(12, nativeContinuation0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // constructor
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      NativeNumber nativeNumber0 = new NativeNumber(2);
      IdFunctionObject idFunctionObject0 = nativeNumber0.exportAsJSClass(8, nativeCall0, false);
      // Undeclared exception!
      try { 
        IdScriptableObject.incompatibleCallError(idFunctionObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"Number\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      // Undeclared exception!
      try { 
        nativeCall0.setInstanceIdAttributes(2384, 2384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2384
         //
         verifyException("com.google.javascript.rhino.head.IdScriptableObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel(context0, false);
      importerTopLevel0.getOwnPropertyDescriptor(context0, "constructor");
  }
}

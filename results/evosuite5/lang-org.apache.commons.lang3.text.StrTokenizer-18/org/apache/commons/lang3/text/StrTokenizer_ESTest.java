/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 21 16:20:22 GMT 2019
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StrTokenizer_ESTest extends StrTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("k|iM>,Yy9Ev}Uk0%'");
      String string0 = strTokenizer0.toString();
      assertEquals("StrTokenizer[not tokenized yet]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      Object object0 = strTokenizer0.cloneReset();
      assertNotSame(object0, strTokenizer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.getContent();
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("L)T{Y}b-<'cbnmV", (StrMatcher) null);
      String string0 = strTokenizer0.getContent();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(string0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", "");
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0);
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher((StrMatcher) null);
      assertFalse(strTokenizer1.isEmptyTokenAsNull());
      assertTrue(strTokenizer1.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("WPz2`+#k C0=(BL@");
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strTokenizer0.setIgnoredMatcher(strMatcher_TrimMatcher0);
      List<String> list0 = strTokenizer0.getTokenList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("org.apace.commons.lang3.text.Struilder$StrBuilderWriter");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("org.apace.commons.lang3.text.Struilder$StrBuilderWriter");
      strTokenizer0.setQuoteMatcher(strMatcher0);
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"X4IX*}JpAtT(#\"M}");
      strTokenizer0.next();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("', has a length less than 2");
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("4voV!zLzuG&a{g4~|yg");
      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('K');
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      strTokenizer1.reset(charArray0);
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(", Length: ");
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      strTokenizer0.setQuoteMatcher(strMatcher0);
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("eWJ<", "eWJ<");
      boolean boolean0 = strTokenizer0.hasNext();
      assertFalse(boolean0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      // Undeclared exception!
      try { 
        strTokenizer0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      // Undeclared exception!
      try { 
        strTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((String) null);
      assertEquals(0, strTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("xpotCB=N6L!un(0]uI");
      strTokenizer0.next();
      strTokenizer0.toString();
      assertEquals(0, strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("np7>#NC)|'r>!H*sk");
      assertEquals((-1), strTokenizer0.previousIndex());
      
      strTokenizer0.next();
      assertEquals(1, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.previousToken();
      assertEquals("np7>#NC)|'r>!H*sk", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.previousToken();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("\"X4Ip*}JpQtT(+\"M}");
      strTokenizer0.nextToken();
      assertEquals(1, strTokenizer0.nextIndex());
      
      String string0 = strTokenizer0.previous();
      assertEquals("\"X4Ip*}JpQtT(+\"M}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.nextToken();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      int int0 = strTokenizer0.size();
      assertEquals(1, int0);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(" \t\n\r\f");
      strTokenizer0.setEmptyTokenAsNull(true);
      boolean boolean0 = strTokenizer0.hasNext();
      assertTrue(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      // Undeclared exception!
      try { 
        strTokenizer0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer();
      strTokenizer0.getTokenArray();
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      int int0 = strTokenizer0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("*T(}kQo|.o");
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('A');
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("pd^42A:|:cj|yK48+");
      // Undeclared exception!
      try { 
        strTokenizer0.set("pd^42A:|:cj|yK48+");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'e', 'e');
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"X^4IX*}JpAtT(#\"M}");
      assertFalse(strTokenizer0.isIgnoreEmptyTokens());
      
      strTokenizer0.setIgnoreEmptyTokens(true);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();
      StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null);
      assertEquals(0, strTokenizer1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance((char[]) null);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("", '2', '2');
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      int int0 = strTokenizer0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrTokenizer strTokenizer0 = new StrTokenizer("(zQ4#i)96i^,PF0$B>", strMatcher0);
      // Undeclared exception!
      try { 
        strTokenizer0.add("(zQ4#i)96i^,PF0$B>");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is unsupported
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer("m9A_PH:o", (StrMatcher) null, (StrMatcher) null);
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((String) null, (String) null);
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[0];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      boolean boolean0 = strTokenizer0.hasNext();
      assertFalse(boolean0);
      assertEquals((-1), strTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StrTokenizer strTokenizer0 = new StrTokenizer((char[]) null, "\"X4Ip*}JpQtT(+\"M}");
      assertFalse(strTokenizer0.isEmptyTokenAsNull());
      assertTrue(strTokenizer0.isIgnoreEmptyTokens());
  }
}

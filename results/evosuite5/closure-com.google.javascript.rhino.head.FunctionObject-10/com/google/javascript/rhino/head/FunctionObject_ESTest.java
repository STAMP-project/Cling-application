/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:35:42 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.BoundFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.IdFunctionCall;
import com.google.javascript.rhino.head.IdFunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeBoolean;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeString;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.ScriptableObject;
import com.google.javascript.rhino.head.Synchronizer;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, false, false);
      assertNotNull(functionObject0);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("Function", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(2, functionObject0.getLength());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("Function", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(2, functionObject0.getLength());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      NativeString nativeString0 = new NativeString("toString");
      assertNotNull(nativeString0);
      assertFalse(nativeString0.isSealed());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("toString", nativeString0.toString());
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isAccessible());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertEquals(25, methodArray0.length);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      assertNotNull(functionObject0);
      assertFalse(nativeString0.isSealed());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("toString", nativeString0.toString());
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.isSealed());
      assertEquals(25, methodArray0.length);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      
      // Undeclared exception!
      try { 
        functionObject0.createObject((Context) null, nativeString0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.InstantiationException: java.lang.reflect.Method
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, true, true);
      assertNotNull(functionObject0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals(2, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("Function", functionObject0.getFunctionName());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      Scriptable scriptable0 = functionObject0.createObject(context0, nativeBoolean0);
      assertNull(scriptable0);
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertTrue(nativeBoolean0.isExtensible());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertTrue(nativeBoolean0.isEmpty());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertEquals(2, functionObject0.getLength());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("Function", functionObject0.getFunctionName());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, false, false);
      assertNotNull(functionObject0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getFunctionName());
      assertEquals(2, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) nativeBoolean0;
      BaseFunction baseFunction0 = (BaseFunction)functionObject0.call(context0, nativeBoolean0, nativeBoolean0, objectArray0);
      assertNotNull(baseFunction0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals("Function", functionObject0.getFunctionName());
      assertEquals(2, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(baseFunction0.isSealed());
      assertFalse(baseFunction0.hasPrototypeMap());
      assertTrue(baseFunction0.isExtensible());
      assertEquals("function", baseFunction0.getTypeOf());
      assertEquals("Function", baseFunction0.getClassName());
      assertFalse(baseFunction0.avoidObjectDetection());
      assertTrue(baseFunction0.isEmpty());
      assertEquals(1, objectArray0.length);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, true, true);
      assertNotNull(functionObject0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getArity());
      assertEquals("Function", functionObject0.getClassName());
      assertTrue(functionObject0.isExtensible());
      assertEquals("Function", functionObject0.getFunctionName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isEmpty());
      assertTrue(functionObject0.isSealed());
      assertEquals(2, functionObject0.getLength());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeBoolean0, nativeBoolean0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      NativeString nativeString0 = new NativeString("toString");
      assertNotNull(nativeString0);
      assertTrue(nativeString0.isEmpty());
      assertEquals("toString", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertEquals(25, methodArray0.length);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      assertNotNull(functionObject0);
      assertTrue(nativeString0.isEmpty());
      assertEquals("toString", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getArity());
      assertEquals(0, functionObject0.getLength());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.isSealed());
      assertEquals(25, methodArray0.length);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, functionObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      NativeString nativeString0 = new NativeString("toString");
      assertNotNull(nativeString0);
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      assertEquals("toString", nativeString0.toString());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertEquals(25, methodArray0.length);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      assertNotNull(functionObject0);
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      assertEquals("toString", nativeString0.toString());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isBridge());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(0, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertEquals(25, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeString0, nativeString0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      NativeString nativeString0 = new NativeString("toString");
      assertNotNull(nativeString0);
      assertFalse(nativeString0.isSealed());
      assertEquals("toString", nativeString0.toString());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertEquals(25, methodArray0.length);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      assertNotNull(functionObject0);
      assertFalse(nativeString0.isSealed());
      assertEquals("toString", nativeString0.toString());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(method0.isAccessible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isBridge());
      assertFalse(method0.isSynthetic());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(0, functionObject0.getArity());
      assertEquals(25, methodArray0.length);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, nativeString0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"toString\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeString nativeString0 = new NativeString("toString");
      assertNotNull(nativeString0);
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isExtensible());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("toString", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.isSealed());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(6, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.NativeString.toString()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertEquals(6, methodArray0.length);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      assertNotNull(functionObject0);
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isExtensible());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("toString", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.isSealed());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.NativeString.toString()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertTrue(functionObject0.isEmpty());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(6, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      
      Object object0 = functionObject0.call(context0, nativeString0, nativeString0, methodArray0);
      assertEquals("toString", object0);
      assertNotNull(object0);
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isExtensible());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("toString", nativeString0.toString());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.isSealed());
      assertFalse(method0.isVarArgs());
      assertEquals("toString", method0.getName());
      assertEquals("public java.lang.String com.google.javascript.rhino.head.NativeString.toString()", method0.toString());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isSynthetic());
      assertTrue(functionObject0.isEmpty());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(context0.isSealed());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(6, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeCall0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test10()  throws Throwable  {
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      IdFunctionObject idFunctionObject0 = new IdFunctionObject((IdFunctionCall) null, (Object) null, 140, 3);
      assertNotNull(idFunctionObject0);
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(3, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(3, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(140, idFunctionObject0.methodId());
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      
      Class<BoundFunction> class0 = BoundFunction.class;
      IdFunctionObject idFunctionObject1 = (IdFunctionObject)FunctionObject.convertArg(context0, (Scriptable) idFunctionObject0, (Object) idFunctionObject0, (Class<?>) class0);
      assertSame(idFunctionObject0, idFunctionObject1);
      assertSame(idFunctionObject1, idFunctionObject0);
      assertNotNull(idFunctionObject1);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("Function", idFunctionObject0.getClassName());
      assertFalse(idFunctionObject0.avoidObjectDetection());
      assertEquals(3, idFunctionObject0.getLength());
      assertFalse(idFunctionObject0.hasPrototypeMap());
      assertEquals(3, idFunctionObject0.getArity());
      assertFalse(idFunctionObject0.isSealed());
      assertEquals("", idFunctionObject0.getFunctionName());
      assertTrue(idFunctionObject0.isExtensible());
      assertTrue(idFunctionObject0.isEmpty());
      assertEquals("function", idFunctionObject0.getTypeOf());
      assertEquals(140, idFunctionObject0.methodId());
      assertFalse(idFunctionObject1.hasPrototypeMap());
      assertEquals(3, idFunctionObject1.getArity());
      assertFalse(idFunctionObject1.isSealed());
      assertTrue(idFunctionObject1.isExtensible());
      assertEquals("", idFunctionObject1.getFunctionName());
      assertEquals(3, idFunctionObject1.getLength());
      assertFalse(idFunctionObject1.avoidObjectDetection());
      assertEquals("Function", idFunctionObject1.getClassName());
      assertEquals("function", idFunctionObject1.getTypeOf());
      assertEquals(140, idFunctionObject1.methodId());
      assertTrue(idFunctionObject1.isEmpty());
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test11()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(16, methodArray0.length);
      
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toString\" occurs multiple times in class \"java.lang.Boolean\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Method[] methodArray0 = new Method[5];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getParameterTypes");
      assertNull(method0);
      assertEquals(5, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Method> class0 = Method.class;
      NativeString nativeString0 = new NativeString("getReturnType");
      assertNotNull(nativeString0);
      assertEquals("getReturnType", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isEmpty());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getReturnType");
      assertNotNull(method0);
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("getReturnType", method0.getName());
      assertEquals("public java.lang.Class java.lang.reflect.Method.getReturnType()", method0.toString());
      assertEquals(25, methodArray0.length);
      
      FunctionObject functionObject0 = new FunctionObject("getReturnType", method0, nativeString0);
      assertNotNull(functionObject0);
      assertEquals("getReturnType", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isEmpty());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("getReturnType", method0.getName());
      assertEquals("public java.lang.Class java.lang.reflect.Method.getReturnType()", method0.toString());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertEquals("getReturnType", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals(25, methodArray0.length);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      
      Method method1 = (Method)functionObject0.getMethodOrConstructor();
      assertSame(method0, method1);
      assertSame(method1, method0);
      assertNotNull(method1);
      assertEquals("getReturnType", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(nativeString0.isSealed());
      assertTrue(nativeString0.isEmpty());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertEquals("String", nativeString0.getClassName());
      assertTrue(nativeString0.isExtensible());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isAccessible());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals("getReturnType", method0.getName());
      assertEquals("public java.lang.Class java.lang.reflect.Method.getReturnType()", method0.toString());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getLength());
      assertTrue(functionObject0.isExtensible());
      assertEquals(0, functionObject0.getArity());
      assertEquals("getReturnType", functionObject0.getFunctionName());
      assertEquals("function", functionObject0.getTypeOf());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(method1.isSynthetic());
      assertFalse(method1.isVarArgs());
      assertFalse(method1.isBridge());
      assertFalse(method1.isAccessible());
      assertEquals(1, method1.getModifiers());
      assertEquals("getReturnType", method1.getName());
      assertEquals("public java.lang.Class java.lang.reflect.Method.getReturnType()", method1.toString());
      assertEquals(25, methodArray0.length);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertNotNull(nativeBoolean0);
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, true, true);
      assertNotNull(functionObject0);
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("Function", functionObject0.getFunctionName());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertTrue(functionObject0.isSealed());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      
      Constructor constructor0 = (Constructor)functionObject0.getMethodOrConstructor();
      assertNotNull(constructor0);
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals("Function", functionObject0.getFunctionName());
      assertEquals(2, functionObject0.getArity());
      assertTrue(functionObject0.isExtensible());
      assertTrue(functionObject0.isEmpty());
      assertTrue(functionObject0.isSealed());
      assertEquals("function", functionObject0.getTypeOf());
      assertEquals(2, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public com.google.javascript.rhino.head.BaseFunction(com.google.javascript.rhino.head.Scriptable,com.google.javascript.rhino.head.Scriptable)", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertEquals(25, methodArray0.length);
      
      NativeString nativeString0 = new NativeString("toString");
      assertNotNull(nativeString0);
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertTrue(nativeString0.isExtensible());
      assertEquals("toString", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeString0);
      assertNotNull(functionObject0);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertTrue(nativeString0.isExtensible());
      assertEquals("toString", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertEquals("", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getArity());
      assertEquals(25, methodArray0.length);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      
      String string0 = functionObject0.getFunctionName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("toString", method0.getName());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isVarArgs());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isAccessible());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertTrue(nativeString0.isExtensible());
      assertEquals("toString", nativeString0.toString());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals("String", nativeString0.getClassName());
      assertFalse(nativeString0.isSealed());
      assertTrue(functionObject0.isEmpty());
      assertEquals("", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getLength());
      assertFalse(functionObject0.isSealed());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isExtensible());
      assertFalse(functionObject0.hasPrototypeMap());
      assertEquals(0, functionObject0.getArity());
      assertEquals(25, methodArray0.length);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      assertFalse(method0.isAccessible());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals(25, methodArray0.length);
      
      NativeString nativeString0 = new NativeString("RETURN");
      assertNotNull(nativeString0);
      assertEquals("RETURN", nativeString0.toString());
      assertTrue(nativeString0.isExtensible());
      assertEquals("String", nativeString0.getClassName());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      assertNotNull(functionObject0);
      assertFalse(method0.isAccessible());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("RETURN", nativeString0.toString());
      assertTrue(nativeString0.isExtensible());
      assertEquals("String", nativeString0.getClassName());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(0, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertEquals(25, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
      
      String string0 = functionObject0.getFunctionName();
      assertEquals("toString", string0);
      assertNotNull(string0);
      assertFalse(method0.isAccessible());
      assertEquals("toString", method0.getName());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isBridge());
      assertEquals(1, method0.getModifiers());
      assertEquals("public java.lang.String java.lang.reflect.Method.toString()", method0.toString());
      assertFalse(method0.isVarArgs());
      assertEquals("RETURN", nativeString0.toString());
      assertTrue(nativeString0.isExtensible());
      assertEquals("String", nativeString0.getClassName());
      assertEquals("object", nativeString0.getTypeOf());
      assertFalse(nativeString0.hasPrototypeMap());
      assertTrue(nativeString0.isEmpty());
      assertFalse(nativeString0.isSealed());
      assertFalse(nativeString0.avoidObjectDetection());
      assertFalse(functionObject0.hasPrototypeMap());
      assertFalse(functionObject0.isSealed());
      assertTrue(functionObject0.isExtensible());
      assertEquals("toString", functionObject0.getFunctionName());
      assertEquals(0, functionObject0.getArity());
      assertFalse(functionObject0.avoidObjectDetection());
      assertEquals(0, functionObject0.getLength());
      assertEquals("Function", functionObject0.getClassName());
      assertEquals("function", functionObject0.getTypeOf());
      assertTrue(functionObject0.isEmpty());
      assertEquals(25, methodArray0.length);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(3, FunctionObject.JAVA_BOOLEAN_TYPE);
      assertEquals(4, FunctionObject.JAVA_DOUBLE_TYPE);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(0, FunctionObject.JAVA_UNSUPPORTED_TYPE);
      assertEquals(1, FunctionObject.JAVA_STRING_TYPE);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(2, FunctionObject.JAVA_INT_TYPE);
      assertEquals(5, FunctionObject.JAVA_SCRIPTABLE_TYPE);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(6, FunctionObject.JAVA_OBJECT_TYPE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = new Context(contextFactory0);
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      assertNotNull(importerTopLevel0);
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) double0, 4);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals("JavaImporter", importerTopLevel0.getClassName());
      assertFalse(importerTopLevel0.avoidObjectDetection());
      assertFalse(importerTopLevel0.isSealed());
      assertTrue(importerTopLevel0.isEmpty());
      assertTrue(importerTopLevel0.isExtensible());
      assertEquals("object", importerTopLevel0.getTypeOf());
      assertFalse(importerTopLevel0.hasPrototypeMap());
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      
      NativeCall nativeCall0 = new NativeCall();
      assertNotNull(nativeCall0);
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) nativeCall0, 3);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertFalse(nativeCall0.avoidObjectDetection());
      assertEquals("Call", nativeCall0.getClassName());
      assertFalse(nativeCall0.isSealed());
      assertTrue(nativeCall0.isEmpty());
      assertEquals("object", nativeCall0.getTypeOf());
      assertFalse(nativeCall0.hasPrototypeMap());
      assertTrue(nativeCall0.isExtensible());
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      assertNotNull(nativeBoolean0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) 2, 2);
      assertEquals(2, object0);
      assertNotNull(object0);
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isExtensible());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(true);
      assertNotNull(nativeBoolean0);
      assertEquals("object", nativeBoolean0.getTypeOf());
      assertFalse(nativeBoolean0.isSealed());
      assertFalse(nativeBoolean0.avoidObjectDetection());
      assertEquals("Boolean", nativeBoolean0.getClassName());
      assertTrue(nativeBoolean0.isEmpty());
      assertFalse(nativeBoolean0.hasPrototypeMap());
      assertTrue(nativeBoolean0.isExtensible());
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeBoolean0, (Object) nativeBoolean0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test21()  throws Throwable  {
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      assertNotNull(nativeIterator_StopIteration0);
      assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      assertTrue(nativeIterator_StopIteration0.isEmpty());
      assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      assertTrue(nativeIterator_StopIteration0.isExtensible());
      assertFalse(nativeIterator_StopIteration0.isSealed());
      assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      assertEquals(4, ScriptableObject.PERMANENT);
      assertEquals(2, ScriptableObject.DONTENUM);
      assertEquals(0, ScriptableObject.EMPTY);
      assertEquals(13, ScriptableObject.CONST);
      assertEquals(1, ScriptableObject.READONLY);
      
      Context context0 = Context.getContext();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertTrue(context0.isGeneratingSource());
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeIterator_StopIteration0, (Object) context0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enterContext();
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      
      NativeCall nativeCall0 = context0.currentActivationCall;
      assertNull(nativeCall0);
      
      Context context1 = (Context)FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) context0, 6);
      assertSame(context0, context1);
      assertSame(context1, context0);
      assertNotNull(context1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(0, context1.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(context1.isGeneratingDebug());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertFalse(context1.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Context context0 = new Context();
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 4);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertTrue(context0.isGeneratingSource());
      //  // Unstable assertion: assertFalse(context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertFalse(context0.isSealed());
      //  // Unstable assertion: assertEquals(110, Context.VERSION_1_1);
      //  // Unstable assertion: assertEquals(6, Context.FEATURE_E4X);
      //  // Unstable assertion: assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      //  // Unstable assertion: assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      //  // Unstable assertion: assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      //  // Unstable assertion: assertEquals(150, Context.VERSION_1_5);
      //  // Unstable assertion: assertEquals((-1), Context.VERSION_UNKNOWN);
      //  // Unstable assertion: assertEquals(170, Context.VERSION_1_7);
      //  // Unstable assertion: assertEquals(120, Context.VERSION_1_2);
      //  // Unstable assertion: assertEquals(8, Context.FEATURE_STRICT_VARS);
      //  // Unstable assertion: assertEquals(160, Context.VERSION_1_6);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      //  // Unstable assertion: assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      //  // Unstable assertion: assertEquals(0, Context.VERSION_DEFAULT);
      //  // Unstable assertion: assertEquals(11, Context.FEATURE_STRICT_MODE);
      //  // Unstable assertion: assertEquals(140, Context.VERSION_1_4);
      //  // Unstable assertion: assertEquals(180, Context.VERSION_1_8);
      //  // Unstable assertion: assertEquals(130, Context.VERSION_1_3);
      //  // Unstable assertion: assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      //  // Unstable assertion: assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      //  // Unstable assertion: assertEquals(100, Context.VERSION_1_0);
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(9, Context.FEATURE_STRICT_EVAL);
      //  // Unstable assertion: assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      //  // Unstable assertion: assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      //  // Unstable assertion: assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      //  // Unstable assertion: assertNotNull(nativeIterator_StopIteration0);
      //  // Unstable assertion: assertFalse(nativeIterator_StopIteration0.isSealed());
      //  // Unstable assertion: assertFalse(nativeIterator_StopIteration0.hasPrototypeMap());
      //  // Unstable assertion: assertEquals("object", nativeIterator_StopIteration0.getTypeOf());
      //  // Unstable assertion: assertTrue(nativeIterator_StopIteration0.isExtensible());
      //  // Unstable assertion: assertEquals("StopIteration", nativeIterator_StopIteration0.getClassName());
      //  // Unstable assertion: assertFalse(nativeIterator_StopIteration0.avoidObjectDetection());
      //  // Unstable assertion: assertTrue(nativeIterator_StopIteration0.isEmpty());
      //  // Unstable assertion: assertEquals(4, ScriptableObject.PERMANENT);
      //  // Unstable assertion: assertEquals(2, ScriptableObject.DONTENUM);
      //  // Unstable assertion: assertEquals(13, ScriptableObject.CONST);
      //  // Unstable assertion: assertEquals(1, ScriptableObject.READONLY);
      //  // Unstable assertion: assertEquals(8, ScriptableObject.UNINITIALIZED_CONST);
      //  // Unstable assertion: assertEquals(0, ScriptableObject.EMPTY);
      
      NativeCall nativeCall0 = context0.currentActivationCall;
      //  // Unstable assertion: assertNull(nativeCall0);
      
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) nativeIterator_StopIteration0, 2);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TypeError: Cannot find default value for object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test31()  throws Throwable  {
      Class<Synchronizer> class0 = Synchronizer.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      NativeString nativeString0 = new NativeString("call");
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, nativeString0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test32()  throws Throwable  {
      NativeString nativeString0 = new NativeString("toString");
      Class<NativeString> class0 = NativeString.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeString0);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enter();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeIterator_StopIteration0, nativeIterator_StopIteration0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<BaseFunction> class0 = BaseFunction.class;
      FunctionObject functionObject0 = (FunctionObject)ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, false, false);
      // Undeclared exception!
      try { 
        functionObject0.addAsConstructor(nativeBoolean0, nativeBoolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.BaseFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NativeBoolean nativeBoolean0 = new NativeBoolean(false);
      Class<BaseFunction> class0 = BaseFunction.class;
      BaseFunction baseFunction0 = ScriptableObject.buildClassCtor((Scriptable) nativeBoolean0, class0, false, false);
      int int0 = baseFunction0.getLength();
      assertEquals(2, int0);
      assertEquals("Function", baseFunction0.getFunctionName());
  }
}

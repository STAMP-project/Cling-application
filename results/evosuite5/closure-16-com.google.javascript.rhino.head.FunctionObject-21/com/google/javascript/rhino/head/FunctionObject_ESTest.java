/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:24:09 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.BaseFunction;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeError;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.NativeJavaObject;
import com.google.javascript.rhino.head.NativeJavaPackage;
import com.google.javascript.rhino.head.NativeObject;
import com.google.javascript.rhino.head.NativeScript;
import com.google.javascript.rhino.head.NativeWith;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import com.google.javascript.rhino.head.TopLevel;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("./", method0, importerTopLevel0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertEquals("./", functionObject0.getFunctionName());
      assertFalse(boolean0);
      assertEquals(0, functionObject0.getArity());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      TopLevel topLevel0 = new TopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, topLevel0);
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test03()  throws Throwable  {
      Class<NativeWith> class0 = NativeWith.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, functionObject0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, importerTopLevel0, importerTopLevel0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getClassName\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      NativeObject nativeObject0 = new NativeObject();
      // Undeclared exception!
      try { 
        functionObject0.call((Context) null, importerTopLevel0, nativeObject0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"getClassName\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      NativeError nativeError0 = new NativeError();
      functionObject0.call((Context) null, nativeError0, nativeError0, methodArray0);
      assertEquals(7, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = Context.getCurrentContext();
      FunctionObject functionObject0 = new FunctionObject("get", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, importerTopLevel0, methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.makeContext();
      ClassLoader classLoader0 = context0.getApplicationClassLoader();
      NativeJavaPackage nativeJavaPackage0 = new NativeJavaPackage(false, (String) null, classLoader0);
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaPackage0, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"java.lang.reflect.Method\".
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Context context0 = Context.getCurrentContext();
      NativeObject nativeObject0 = new NativeObject();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeObject0, (Object) context0, (Class<?>) class0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<NativeArray> class0 = NativeArray.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "toArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"toArray\" occurs multiple times in class \"com.google.javascript.rhino.head.NativeArray\".
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Method[] methodArray0 = new Method[1];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "W4aqo$20#");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      functionObject0.getMethodOrConstructor();
      assertEquals(6, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<NativeScript> class0 = NativeScript.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeIterator_StopIteration0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(6, methodArray0.length);
      assertNotNull(string0);
      assertEquals(0, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.hasInstance(importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: 'prototype' property of getClassName is not an object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(32767.0);
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) null, (Object) double0, 4);
      assertEquals(32767.0, object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, 3);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Context context0 = new Context();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) 7, 2);
      assertEquals(7, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("./", method0, importerTopLevel0);
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) functionObject0, (Object) "getClassName", 1);
      assertEquals("./", functionObject0.getFunctionName());
      assertEquals(7, methodArray0.length);
      assertEquals("getClassName", object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NativeJavaObject nativeJavaObject0 = new NativeJavaObject();
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      // Undeclared exception!
      try { 
        Context.getContext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No Context associated with current Thread
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Boolean boolean0 = Boolean.valueOf(false);
      Object object0 = FunctionObject.convertArg((Context) null, (Scriptable) importerTopLevel0, (Object) boolean0, 3);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test23()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "get");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = Context.getCurrentContext();
      FunctionObject functionObject0 = new FunctionObject("get", method0, importerTopLevel0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, importerTopLevel0, importerTopLevel0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Double> class0 = Double.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      int int0 = FunctionObject.getTypeTag(class0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "importPackage");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject((String) null, method0, importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"importPackage\" must be static with the signature \"(Context cx, Scriptable thisObj, Object[] args, Function funObj)\" to define a variable arguments function.
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Delegator> class0 = Delegator.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("'kKt@.1Bz", method0, importerTopLevel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<ImporterTopLevel> class0 = ImporterTopLevel.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      NativeJavaMethod nativeJavaMethod0 = new NativeJavaMethod(method0, "getClassName");
      functionObject0.addAsConstructor(nativeJavaMethod0, importerTopLevel0);
      assertEquals(0, functionObject0.getArity());
      assertEquals(7, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<BaseFunction> class0 = BaseFunction.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClassName");
      assertNotNull(method0);
      
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      FunctionObject functionObject0 = new FunctionObject("getClassName", method0, importerTopLevel0);
      Object object0 = functionObject0.getInstanceIdValue(1);
      assertEquals(0, object0);
      assertEquals(11, methodArray0.length);
  }
}

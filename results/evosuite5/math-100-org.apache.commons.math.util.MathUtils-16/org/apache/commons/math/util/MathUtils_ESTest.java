/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 15:13:55 GMT 2019
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(1962L, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MathUtils.subAndCheck((-9223372036854775808L), (-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(4368, (-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathUtils.subAndCheck(32, 32);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-288), 2147483646);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MathUtils.sign((short)4192);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathUtils.sign((short)0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MathUtils.sign((short) (-5946));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MathUtils.sign(542L);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathUtils.sign((long) 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MathUtils.sign((-9223372036854775807L));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MathUtils.sign(14);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MathUtils.sign(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MathUtils.sign((-15630349));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathUtils.sign((-2.2660635F));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MathUtils.sign(0.0F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MathUtils.sign(Float.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathUtils.sign((float) 1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathUtils.sign(2291.621356339);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MathUtils.sign((double) (-23));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathUtils.sign((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathUtils.sign((double) 0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathUtils.sign((byte)69);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MathUtils.sign((byte)0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathUtils.sign((byte) (-14));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathUtils.round((float) 8, 7, 7);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathUtils.round(596.6579F, 0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathUtils.round((float) 32, 2397, 6);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathUtils.round(2.8155475F, 0, 6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathUtils.round((float) 5, 5, 5);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MathUtils.round((-376.0F), 3, 3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathUtils.round((-376.0F), 2, 2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) (-15), (-15), (-15));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((float) 7, (-13), 7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Inexact result from rounding
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MathUtils.round(2905.236F, 1665, 5);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MathUtils.round((float) 32, 32, 2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MathUtils.round((float) 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathUtils.round(Double.NEGATIVE_INFINITY, 320, 320);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathUtils.round(Double.NaN, (int) (byte) (-1), (int) (byte) (-58));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathUtils.nextAfter(8, (-214.3932119));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MathUtils.nextAfter(3.9999999999999996, 1190.1998381180179);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathUtils.round((float) 3, 3, 3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MathUtils.round((float) 1, (-1447), 1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MathUtils.round((float) 8, 8);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathUtils.round((float) 0, 819);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathUtils.mulAndCheck((long) 15, (long) 15);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MathUtils.mulAndCheck(1047L, 0L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(1962L, (-9223372036854775807L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MathUtils.mulAndCheck(0L, (-12798L));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MathUtils.mulAndCheck((-5522L), (-5522L));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MathUtils.mulAndCheck(506L, (-1L));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9223372036854775807L, (long) 8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-15630343), (-15630343));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathUtils.lcm(1024, 1024);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathUtils.indicator((short)3158);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MathUtils.indicator((short) (byte) (-14));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MathUtils.indicator(27L);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MathUtils.indicator((-5492L));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MathUtils.indicator(6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathUtils.indicator((-15630336));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MathUtils.round(Float.NaN, 6, 6);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathUtils.indicator(2291.621356339);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathUtils.indicator((double) Float.NaN);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MathUtils.indicator((-1.0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MathUtils.indicator((byte)0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathUtils.indicator((byte) (-14));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathUtils.hash(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MathUtils.hash((double[]) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MathUtils.gcd(6, (-8));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathUtils.gcd(0, 1039);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(675);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MathUtils.factorial(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = (-309516.83644176);
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-309516.83644176)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, 2.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(16, 15);
      assertEquals(2.772588722239781, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(14, 1);
      assertEquals(2.6390573296152584, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(1, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(11, 11);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((short) (-5946), (short) (-5946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog(31, 1802);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1, (-3679));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(229, 1);
      assertEquals(229L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(819, 819);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-55), (-1797));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-19), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(9223372036854775807L, (-82L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-9223372036854775808L), 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((-2832L), 542L);
      assertEquals((-3374L), long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) 8, (long) 8);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(1785233416, 1785233416);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = MathUtils.addAndCheck((-4), (-4));
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-2147481014), (-3426));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathUtils.log((byte) (-14), (byte) (-14));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathUtils.round(0.0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathUtils.cosh(6.283185307179586);
      assertEquals(267.7467614837482, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(2435, 1328);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(2276.958443463651, 2276.958443463651);
      assertEquals(2276.958443463651, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = MathUtils.sinh((-566.7247938339));
      assertEquals((-6.674530533806157E245), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(1056L, 1056L);
      assertEquals(2112L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = MathUtils.round((float) (-8), (-4), 6);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm((-15630336), 637);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}

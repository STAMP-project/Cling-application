/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 18 04:26:25 GMT 2019
 */

package com.google.javascript.rhino.head;

import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.head.ConsString;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.Delegator;
import com.google.javascript.rhino.head.FunctionObject;
import com.google.javascript.rhino.head.ImporterTopLevel;
import com.google.javascript.rhino.head.JavaAdapter;
import com.google.javascript.rhino.head.NativeArray;
import com.google.javascript.rhino.head.NativeCall;
import com.google.javascript.rhino.head.NativeIterator;
import com.google.javascript.rhino.head.NativeJavaClass;
import com.google.javascript.rhino.head.NativeJavaMethod;
import com.google.javascript.rhino.head.Script;
import com.google.javascript.rhino.head.Scriptable;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FunctionObject_ESTest extends FunctionObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "matches");
      FunctionObject functionObject0 = new FunctionObject("matches", method0, nativeCall0);
      boolean boolean0 = functionObject0.isVarArgsConstructor();
      assertFalse(boolean0);
      assertEquals(68, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      Context context0 = new Context();
      FunctionObject functionObject0 = new FunctionObject("language version", method0, nativeCall0);
      // Undeclared exception!
      try { 
        functionObject0.createObject(context0, nativeCall0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrapped java.lang.ClassCastException: java.lang.String cannot be cast to com.google.javascript.rhino.head.Scriptable
         //
         verifyException("com.google.javascript.rhino.head.Context", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test02()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeCall0);
      Context context0 = Context.getCurrentContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeCall0, nativeCall0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeCall0);
      Context context0 = new Context();
      functionObject0.call(context0, (Scriptable) null, (Scriptable) null, methodArray0);
      assertEquals(9, methodArray0.length);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test04()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeCall0);
      Context context0 = new Context();
      NativeIterator.StopIteration nativeIterator_StopIteration0 = new NativeIterator.StopIteration();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeIterator_StopIteration0, nativeIterator_StopIteration0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test05()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeCall0);
      Context context0 = Context.getContext();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, functionObject0, nativeCall0, context0.emptyArgs);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      Context context0 = new Context();
      FunctionObject functionObject0 = new FunctionObject("error reporter", method0, nativeCall0);
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeCall0, nativeCall0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TypeError: Method \"error reporter\" called on incompatible object.
         //
         verifyException("com.google.javascript.rhino.head.ScriptRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getClass");
      FunctionObject functionObject0 = new FunctionObject("getClass", method0, nativeCall0);
      Context context0 = Context.enter();
      // Undeclared exception!
      try { 
        functionObject0.call(context0, nativeCall0, nativeCall0, methodArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test08()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Context context0 = new Context();
      Class<ConsString> class0 = ConsString.class;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, (Class<?>) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't convert to type \"com.google.javascript.rhino.head.ConsString\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      // Undeclared exception!
      try { 
        FunctionObject.findSingleMethod(methodArray0, "valueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Method \"valueOf\" occurs multiple times in class \"java.lang.String\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Method[] methodArray0 = new Method[4];
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "matches");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "matches");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("matches", method0, nativeCall0);
      functionObject0.getMethodOrConstructor();
      assertEquals(68, methodArray0.length);
      assertEquals(1, functionObject0.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "matches");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject((String) null, method0, nativeCall0);
      String string0 = functionObject0.getFunctionName();
      assertEquals(68, methodArray0.length);
      assertEquals(1, functionObject0.getLength());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "matches");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("matches", method0, nativeCall0);
      String string0 = functionObject0.getFunctionName();
      assertEquals("matches", string0);
      assertEquals(68, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) null, (Object) null, (Class<?>) class0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Class<Boolean> class0 = Boolean.TYPE;
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = new Context(contextFactory0);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaClass0, (Object) null, (Class<?>) class0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test16()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeArray nativeArray0 = new NativeArray(13);
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeArray0, (Object) context0.generateObserverCount, 3);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<String> class0 = String.class;
      Context context0 = Context.getCurrentContext();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) class0, (Class<?>) class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) importerTopLevel0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.FunctionObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Context context0 = Context.getCurrentContext();
      Class class1 = (Class)FunctionObject.convertArg(context0, (Scriptable) null, (Object) class0, (Class<?>) class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  @Ignore
  public void test20()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        FunctionObject.convertArg(context0, (Scriptable) nativeJavaClass0, (Object) class0, 5);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Can't find top level scope for ClassCache.get
         //
         verifyException("com.google.javascript.rhino.head.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeCall0, (Object) "&8kPA;R", (Class<?>) class0);
      assertEquals("&8kPA;R", object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Class<Double> class0 = Double.class;
      Context context0 = Context.enter();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) context0, (Class<?>) class0);
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      NativeJavaClass nativeJavaClass0 = new NativeJavaClass();
      Class<Boolean> class0 = Boolean.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) nativeJavaClass0, (Object) context0, (Class<?>) class0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      Class<Integer> class0 = Integer.TYPE;
      ImporterTopLevel importerTopLevel0 = new ImporterTopLevel();
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) importerTopLevel0, (Object) 10, (Class<?>) class0);
      assertEquals(10, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Delegator delegator0 = new Delegator();
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enterContext();
      Class<Integer> class0 = Integer.class;
      Object object0 = FunctionObject.convertArg(context0, (Scriptable) delegator0, (Object) contextFactory0, (Class<?>) class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  @Ignore
  public void test26()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "getChars");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("getChars", method0, nativeCall0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Method \"getChars\" must be static with the signature \"(Context cx, Scriptable thisObj, Object[] args, Function funObj)\" to define a variable arguments function.
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  @Ignore
  public void test27()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<NativeJavaMethod> class0 = NativeJavaMethod.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "call");
      FunctionObject functionObject0 = null;
      try {
        functionObject0 = new FunctionObject("call", method0, nativeCall0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // Unsupported parameter type \"com.google.javascript.rhino.head.Context\" in method \"call\".
         //
         verifyException("com.google.javascript.rhino.head.DefaultErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaAdapter.runScript((Script) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.JavaAdapter$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "toString");
      FunctionObject functionObject0 = new FunctionObject("toString", method0, nativeCall0);
      // Undeclared exception!
      functionObject0.addAsConstructor(functionObject0, nativeCall0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NativeCall nativeCall0 = new NativeCall();
      Class<String> class0 = String.class;
      Method[] methodArray0 = FunctionObject.getMethodList(class0);
      Method method0 = FunctionObject.findSingleMethod(methodArray0, "matches");
      assertNotNull(method0);
      
      FunctionObject functionObject0 = new FunctionObject("matches", method0, nativeCall0);
      int int0 = functionObject0.getLength();
      assertEquals(68, methodArray0.length);
      assertEquals(1, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 13 16:27:57 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '4';
      charArray0[2] = '(';
      charArray0[3] = 'p';
      charArray0[5] = 'h';
      charArray0[6] = ']';
      charArray0[7] = 'R';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'%', '4', '(', 'p', '\u0000', 'h', ']', 'R'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-858));
      assertEquals((short) (-858), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)3);
      assertEquals((short)3, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((byte)0);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short)3);
      assertEquals((short)3, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Float float0 = new Float((double) (short) (-858));
      assertEquals((-858.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertTrue(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(boolean2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Integer integer0 = Integer.getInteger("KcA~");
      assertNull(integer0);
      
      int int0 = Integer.min(3, 3);
      assertEquals(3, int0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null, 2277);
      assertEquals(2, characterArray0.length);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2277;
      floatArray0[1] = (float) 2277;
      floatArray0[2] = (float) 2277;
      floatArray0[3] = (float) 2277;
      floatArray0[4] = (float) 2277;
      floatArray0[5] = (float) 2277;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2277.0F, 2277.0F, 2277.0F, 2277.0F, 2277.0F, 2277.0F}, floatArray0, 0.01F);
      assertEquals(12, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer((byte)44);
      assertEquals(44, (int)integer0);
      assertNotNull(integer0);
      
      String[] stringArray0 = ArrayUtils.add((String[]) null, "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-617.840738));
      assertArrayEquals(new double[] {(-617.840738), (-617.840738)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short short0 = new Short((short)1803);
      assertEquals((short)1803, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1635);
      assertEquals((short)1635, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      short short2 = (short)0;
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[1] = short0;
      shortArray0[1] = short3;
      shortArray0[2] = short3;
      shortArray0[3] = short0;
      Short short4 = new Short((short) shortArray0[3]);
      assertEquals(8, shortArray0.length);
      assertEquals((short)1803, (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      shortArray0[5] = short3;
      shortArray0[6] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1803, (short)1803, (short)0, (short)1803, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-937);
      intArray0[2] = 20;
      intArray0[3] = 0;
      intArray0[4] = (-228);
      intArray0[5] = 293;
      intArray0[6] = 2136;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2603, (-937));
      assertArrayEquals(new int[] {1615, (-937), 20, 0, (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      intArray0[3] = (-937);
      doubleArray0[1] = 1313.1;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1313.1}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '5';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.indexOf(intArray1, 293, 20);
      assertArrayEquals(new int[] {1615, (-937), 20, (-937), (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse(intArray1);
      assertArrayEquals(new int[] {1615, (-937), 20, (-937), (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int1 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-937), Integer.MAX_VALUE);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, object0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[3];
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '2';
      charArray0[2] = '+';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'(', '2', '+'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '+';
      doubleArray0[1] = 468.188;
      doubleArray0[2] = (double) '2';
      doubleArray0[3] = (-1308.5044);
      doubleArray0[4] = (double) '(';
      int int0 = ArrayUtils.indexOf(doubleArray0, 10.0, (-135), 40.0);
      assertArrayEquals(new double[] {43.0, 468.188, 50.0, (-1308.5044), 40.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (-3256.67));
      assertNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'(', '2', '+'}, charArray0);
      assertArrayEquals(new char[] {'(', '2', '+', '(', '2', '+'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 2842.6897F, 1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1334.8948465842445));
      assertEquals((-1334.8948465842445), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-617.840738));
      assertArrayEquals(new double[] {(-1.0), (-617.840738)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      double double2 = Double.max(3372.777, (double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals(3372.777, double2, 0.01);
      
      charArray0[1] = 'i';
      boolean boolean0 = Double.isFinite(1.5);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2595, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'W', 'i'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = '6';
      charArray1[2] = ']';
      charArray1[3] = '~';
      charArray1[4] = '1';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'~', '6', ']', '~', '1'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)44);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-352);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-352)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[9];
      char char0 = '2';
      Character character0 = Character.valueOf('2');
      assertEquals('2', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('2', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('2');
      assertEquals('2', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char char1 = 'W';
      Character character3 = new Character('W');
      assertEquals('W', (char)character3);
      assertTrue(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('p');
      assertEquals('p', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('X');
      assertEquals('X', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char1));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertEquals('2', (char)character6);
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(char0 == char1);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('i');
      assertEquals('i', (char)character7);
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character3));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf(char0);
      assertEquals('2', (char)character8);
      assertFalse(char0 == char1);
      assertTrue(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character7));
      assertNotNull(character8);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char1);
      assertArrayEquals(new char[] {'2', '2', '2', 'W', 'p', 'X', '2', 'i', 'W'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertFalse(char1 == char0);
      assertNotNull(charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (byte)44;
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)44);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'b';
      floatArray0[3] = (float) (-1);
      floatArray0[0] = (float) (-1);
      floatArray0[5] = (float) 'x';
      floatArray0[6] = (float) 'x';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (-1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 98.0F, (-1.0F), 0.0F, 120.0F, 120.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = (double) (-1.0F);
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (-1.0F), 1.5);
      assertArrayEquals(new double[] {120.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)90, (int) (byte)27);
      assertArrayEquals(new byte[] {(byte)97, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) (byte)27);
      assertEquals(27.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte)90);
      assertEquals(90.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 154L);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-547));
      assertEquals((short) (-547), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1482.0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-275.055F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 94.0F;
      floatArray0[3] = 941.32F;
      floatArray0[4] = 94.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1263.6938F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {(-275.055F), (-1.0F), 94.0F, 941.32F, 94.0F, 1.0F, 1263.6938F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-275.055F), (-1.0F), 94.0F, 941.32F, 94.0F, 1.0F, 1263.6938F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.contains(floatArray1, 941.32F);
      assertArrayEquals(new float[] {(-275.055F), (-1.0F), 94.0F, 941.32F, 94.0F, 1.0F, 1263.6938F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-275.055F), (-1.0F), 94.0F, 941.32F, 94.0F, 1.0F, 1263.6938F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertTrue(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1482.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1482.0), 0.0, (-1482.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      Long long0 = new Long(630L);
      assertEquals(630L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1);
      assertEquals(1L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long((-2110L));
      assertEquals((-2110L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long long3 = Long.getLong("java.lang.Object", long2);
      assertEquals((-2110L), (long)long3);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      Character character0 = new Character('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-1443));
      assertEquals((short) (-1443), (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "We28hUwvnFL.bA;qu";
      stringArray0[1] = "We28hUwvnFL.bA;qu";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'We28hUwvnFL.bA;qu', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, (Object[]) null);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean3 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'Q';
      boolean boolean4 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {']', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 685L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {685L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 685L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {685L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-78));
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78), (byte) (-78)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-78);
      shortArray0[1] = (short) (byte) (-78);
      shortArray0[2] = (short)380;
      shortArray0[3] = (short)39;
      shortArray0[4] = (short) (byte) (-78);
      shortArray0[5] = (short) (byte) (-78);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-78), (int) (byte) (-78));
      assertArrayEquals(new short[] {(short) (-78), (short) (-78), (short)380, (short)39, (short) (-78), (short) (-78)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (-2146142997));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((double[]) null);
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = 'v';
      charArray0[4] = 'c';
      charArray0[5] = '<';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'c', '<', 'c', 'v', 'c', '<'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) 'v';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {60, 118}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, '>', 46);
      assertArrayEquals(new char[] {'c', '<', 'c', 'v', 'c', '<'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {60, 118}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '<';
      floatArray0[1] = (float) 118;
      floatArray0[2] = (float) 'c';
      floatArray0[3] = (float) 118;
      floatArray0[4] = (float) '<';
      floatArray0[6] = (float) '<';
      floatArray0[7] = (float) (-1);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 118, 118);
      assertArrayEquals(new float[] {60.0F, 118.0F, 99.0F, 118.0F, 60.0F, 0.0F, 60.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1727.074);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Boolean boolean2 = new Boolean(";Fysizp@=<");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(";Fysizp@=<");
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.valueOf(";Fysizp@=<");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)68;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)48, (byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)68}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)48;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a8U5";
      stringArray0[1] = "&kUL&Sk\"&4B ^K%";
      stringArray0[2] = "\"Yx#6~/R:f1Wa<0-/";
      stringArray0[3] = "java.lang.Object";
      stringArray0[4] = "";
      stringArray0[5] = "B8['Io";
      stringArray0[6] = "";
      stringArray0[7] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertEquals(9, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte)0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "os.name";
      stringArray0[1] = "os.name";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 98.0F;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (-1133.0958F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 98.0F, 0.0F, (-1133.0958F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[6];
      floatArray2[0] = (Float) 98.0F;
      floatArray2[1] = (Float) 0.0F;
      floatArray2[2] = (Float) 0.0F;
      floatArray2[3] = (Float) 0.0F;
      floatArray2[4] = float0;
      floatArray2[5] = (Float) 0.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (float) floatArray2[5]);
      assertArrayEquals(new float[] {98.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      
      Integer integer0 = Integer.getInteger("os.name");
      assertNull(integer0);
      
      int int0 = Integer.min(2, (byte)0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(float0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = Short.compare((short) (-3175), (short) (-3360));
      assertEquals(185, int0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "y/o[ThvPtM0`b1TT";
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 40.0;
      doubleArray0[2] = (double) 0.0F;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'v');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '?';
      charArray0[2] = 'P';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'7', '?', 'P'}, charArray0);
      assertArrayEquals(new char[] {'7', '?', 'P'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) byteArray0, object1);
      assertEquals(12, byteArray0.length);
      assertEquals(12, objectArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(byteArray0, objectArray0);
      assertNotSame(object1, object0);
      assertNotNull(objectArray0);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'R');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)3200);
      assertEquals((short)3200, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(6, shortArray0.length);
      assertEquals((short)3200, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3200);
      assertEquals((short)3200, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertEquals(6, shortArray0.length);
      assertEquals((short)3200, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-2420));
      assertEquals((short) (-2420), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      int int0 = Short.toUnsignedInt((short) shortArray0[1]);
      assertEquals(6, shortArray0.length);
      assertEquals(3200, int0);
      
      Short short5 = new Short((short) (-541));
      assertEquals((short) (-541), (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)3200, (short)3200, (short)3200, (short)3200, (short) (-2420), (short) (-541)}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 120);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = true;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)120);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)120;
      floatArray0[1] = (float) 10;
      floatArray0[3] = 94.0F;
      floatArray0[4] = (float) (short) (-937);
      floatArray0[5] = (float) (short) (-937);
      floatArray0[6] = (float) (short)120;
      floatArray0[7] = (float) 10;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {120.0F, 10.0F, 0.0F, 94.0F, (-937.0F), (-937.0F), 120.0F, 10.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P`kJu'B^";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "java.lang.Float");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) stringArray1, (-1), (Object) "java.lang.Float");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[2] = integerArray0[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer[] integerArray0 = new Integer[14];
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) integerArray0);
      assertEquals(14, integerArray0.length);
      assertEquals(14, objectArray0.length);
      assertNotSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 453;
      intArray0[2] = 453;
      intArray0[3] = 453;
      intArray0[4] = 453;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {453, 0, 453, 453, 453}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {453, 0, 453, 453, 453}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[3] = 0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)3);
      assertEquals((short)3, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short)3);
      assertEquals((short)3, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertEquals((short)2, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-214));
      assertEquals((-214), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-630));
      assertEquals((-630), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2060));
      assertEquals((-2060), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      Integer integer4 = new Integer((byte) (-97));
      assertEquals((-97), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object1, integer1);
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      Integer integer5 = new Integer((-955));
      assertEquals((-955), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = objectArray0[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-1084);
      doubleArray0[1] = (double) (short) (-1084);
      doubleArray0[2] = (double) (short) (-1084);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (short) (-1084);
      doubleArray0[5] = (double) (short) (-1084);
      doubleArray0[6] = (double) (short) (-1084);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1084.0), (-107), 250.01204371);
      assertArrayEquals(new double[] {(-1084.0), (-1084.0), (-1084.0), (-1.0), (-1084.0), (-1084.0), (-1084.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-107), (-1), (-1248.191680838));
      assertArrayEquals(new double[] {(-1084.0), (-1084.0), (-1084.0), (-1.0), (-1084.0), (-1084.0), (-1084.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1084.0), (-1084.0), (-1084.0), (-1.0), (-1084.0), (-1084.0), (-1084.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1139.13489;
      doubleArray0[1] = 467.1531;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2332.271889244117;
      doubleArray0[4] = 2807.35;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {1139.13489, 467.1531, 0.0, 2332.271889244117, 2807.35}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 453;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {453}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[2] = boolean4;
      boolean boolean5 = Boolean.logicalXor(true, false);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      
      booleanArray0[3] = (Boolean) boolean1;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      
      booleanArray0[5] = boolean7;
      boolean boolean8 = Boolean.logicalXor(boolean1, boolean1);
      assertFalse(boolean8);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean1 == boolean5);
      assertTrue(boolean1 == boolean0);
      
      Boolean boolean9 = Boolean.FALSE;
      assertFalse(boolean9);
      assertTrue(boolean9.equals((Object)boolean8));
      assertTrue(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean5));
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean7));
      assertNotNull(boolean9);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-6354.5F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-6354.5F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-6354.5F);
      doubleArray0[1] = (double) (-6354.5F);
      doubleArray0[2] = (double) (-6354.5F);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 548.909680929151;
      doubleArray0[5] = 3525.99;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, 1.5);
      assertArrayEquals(new double[] {(-6354.5), (-6354.5), (-6354.5), 1.0, 548.909680929151, 3525.99}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      
      long[] longArray3 = ArrayUtils.addAll(longArray0, longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      
      long[] longArray4 = ArrayUtils.toPrimitive(longArray1, 0L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray4.length);
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray2));
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray2);
      assertNotNull(longArray4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (-83), (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)48;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)32, (byte) (-54), (byte)35, (byte)48}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)35;
      longArray0[1] = (long) (byte)32;
      longArray0[2] = (long) (byte) (-28);
      longArray0[3] = (long) (byte)48;
      longArray0[4] = (-691L);
      longArray0[5] = (long) (byte)35;
      longArray0[6] = (long) (byte)32;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {35L, 32L, (-28L), 48L, (-691L), 35L, 32L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, (int) (byte)32);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '.';
      charArray0[3] = ')';
      charArray0[4] = '!';
      charArray0[5] = '(';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'N', '.', '\u0000', ')', '!', '('}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-937);
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)434;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)434);
      assertArrayEquals(new short[] {(short) (-937), (short)100, (short)434}, shortArray0);
      assertArrayEquals(new short[] {(short) (-937), (short)100}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-610), (int) (short)100);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)3);
      assertEquals((short)3, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short)3);
      assertEquals((short)3, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Short short4 = new Short((short)2);
      assertEquals((short)2, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)2, (int) (short)3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-32L);
      longArray0[1] = (-1421L);
      longArray0[2] = (-3886L);
      longArray0[3] = (-861L);
      longArray0[4] = 175L;
      longArray0[5] = (-4743L);
      longArray0[6] = 794L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-32L), (-1421L), (-3886L), (-861L), 175L, (-4743L), 794L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-727.424F);
      floatArray0[2] = (-150.0F);
      floatArray0[3] = (-913.9F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-727.424F), (-150.0F), (-913.9F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-727.424F), (-150.0F), (-913.9F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-1234);
      intArray0[2] = 3;
      intArray0[3] = (-1);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-1), 3, (-1234), 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1725L);
      longArray0[1] = 541L;
      longArray0[2] = (-1422L);
      longArray0[3] = (-3816L);
      longArray0[4] = (-185L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1725L), 541L, (-1422L), (-3816L), (-185L)}, longArray0);
      assertArrayEquals(new long[] {(-1725L), 541L, (-1422L), (-3816L), (-185L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3060);
      intArray0[1] = 36;
      intArray0[2] = (-150);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-3060), 36, (-150)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, (-2307));
      assertArrayEquals(new int[] {(-3060), 36, (-150)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "y/>\"91l)uN-2!Jn";
      stringArray0[1] = "  ";
      stringArray0[2] = "";
      stringArray0[3] = "Qyv ^Uv8G';u";
      stringArray0[4] = "', has a length less than 2";
      stringArray0[5] = ">";
      stringArray0[6] = "2&~<u]|Zi)*!";
      stringArray0[7] = "java.vendor.url";
      stringArray0[8] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, ">");
      assertEquals(10, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)222;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)222, (int) (short)222);
      assertArrayEquals(new short[] {(short)222}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[22];
      charArray0[1] = '1';
      charArray0[17] = 'o';
      boolean boolean0 = ArrayUtils.contains(charArray0, '1');
      assertEquals(22, charArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '1';
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = 690L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 690L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      Float float0 = new Float(690.0);
      assertEquals(690.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      Float float1 = new Float((float) 0L);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      Float float2 = new Float(101.9);
      assertEquals(101.9F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[7] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {690.0F, 0.0F, 690.0F, 690.0F, 690.0F, 690.0F, 690.0F, 101.9F}, floatArray1, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1372;
      shortArray0[1] = (short) (-1104);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1372, (short) (-1104)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)1372, (short) (-1104)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) floatArray0[0]);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte)44);
      assertEquals(44, (int)integer0);
      assertNotNull(integer0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)44}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Integer integer0 = new Integer((-914));
      assertEquals((-914), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {(-914)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[3];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "os.name";
      stringArray0[1] = "os.name";
      stringArray0[2] = "os.name";
      stringArray0[3] = "os.name";
      stringArray0[4] = "os.name";
      stringArray0[5] = "os.name";
      stringArray0[6] = "os.name";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 383L;
      longArray0[1] = 383L;
      longArray0[2] = (-809L);
      longArray0[3] = 383L;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (-83L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {383L, 383L, (-809L), 383L, 1L, 0L, (-83L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2146722745));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      boolean boolean3 = ArrayUtils.contains(floatArray0, 4243.1F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[2];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((int) (byte)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (-870);
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0, (-870));
      assertArrayEquals(new int[] {10, 10, 0, 0, (-870)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, int0);
      
      Integer integer2 = new Integer(1175);
      assertEquals(1175, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '+';
      charArray0[2] = 'x';
      Double double0 = new Double((-95.2877));
      assertEquals((-95.2877), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-95.2877));
      assertNull(doubleArray0);
      
      double double1 = Double.max((-2435.0), (-2435.0));
      assertEquals((-2435.0), double1, 0.01);
      
      boolean boolean0 = Double.isFinite((-2435.0));
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-4), (-2014));
      assertArrayEquals(new char[] {'\u0000', '+', 'x'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 4;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {4.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4.0F, 4.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (-4378), 1);
      assertArrayEquals(new float[] {4.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      Double double0 = new Double((-95.2877));
      assertEquals((-95.2877), (double)double0, 0.01);
      assertNotNull(double0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'b';
      characterArray0[1] = (Character) '+';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '6');
      assertArrayEquals(new char[] {'b', '+'}, charArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3338, 2385);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertTrue(boolean0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2385;
      floatArray0[1] = (float) 2385;
      floatArray0[2] = (float) 3338;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {2385.0F, 2385.0F, 3338.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2385.0F, 2385.0F, 3338.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Short[] shortArray0 = new Short[3];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      int int0 = Short.toUnsignedInt((short)1);
      assertEquals(1, int0);
      
      shortArray0[1] = short2;
      Short short3 = new Short(short0);
      assertEquals((short) (-1), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1731);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1139.13489;
      doubleArray0[1] = 467.1531;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 2586.0F);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = objectArray0[0];
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-29);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 251.880920325;
      doubleArray0[2] = (double) (-3640L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 251.880920325);
      assertArrayEquals(new double[] {(-1.0), 251.880920325, (-3640.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'W';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 87.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 87.0F, 0.0F, 87.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-884.503F);
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-884.503F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-884.503F), 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)11);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte)11);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 2100L, (int) (byte)11);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)11;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 100;
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)11;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {11, (-1), (-1), 100, (-1), 11}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object1);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertArrayEquals(new char[] {'J'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray1);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertArrayEquals(new char[] {'J'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertTrue(boolean2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)222;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)222, (int) (short)222);
      assertArrayEquals(new short[] {(short)222}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '1';
      charArray0[2] = 'o';
      boolean boolean0 = ArrayUtils.contains(charArray0, '1');
      assertArrayEquals(new char[] {'3', '1', 'o'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '1';
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) '3';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)222;
      longArray0[5] = (long) '3';
      longArray0[6] = (long) 'o';
      longArray0[7] = (long) 'o';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {49L, 111L, 51L, (-1L), 222L, 51L, 111L, 111L}, longArray1);
      assertArrayEquals(new long[] {49L, 111L, 51L, (-1L), 222L, 51L, 111L, 111L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 2084322364);
      assertArrayEquals(new char[] {'3', '1', 'o'}, charArray1);
      assertArrayEquals(new char[] {'3', '1', 'o'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1665;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {1665}, intArray0);
      assertArrayEquals(new int[] {1665}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      Short[] shortArray0 = new Short[5];
      short short0 = (short)532;
      Short short1 = new Short((short)532);
      assertEquals((short)532, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      try { 
        Short.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      Integer integer0 = new Integer((byte) (-97));
      assertEquals((-97), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte) (-97));
      assertEquals((-97), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((int) (byte) (-97));
      assertEquals((-97), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Short short0 = new Short((byte) (-97));
      assertEquals((short) (-97), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-97));
      assertEquals((short) (-97), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((byte) (-97));
      assertEquals((short) (-97), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-262));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'b';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'b'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = 690L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 690L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) longArray1, object0);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, objectArray0.length);
      assertNotSame(longArray1, objectArray0);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '9');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1), 360);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) longArray1, 360, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 360, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {(-2075), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2075), 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Double double0 = new Double(495.214711313);
      assertEquals(495.214711313, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(495.214711313);
      assertEquals(495.214711313, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {495.214711313}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-2075));
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertArrayEquals(new double[] {495.214711313}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {495.214711313}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 371, Integer.MAX_VALUE);
      assertNull(byteArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = Boolean.compare(false, true);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean2 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1482L);
      doubleArray0[1] = 251.880920325;
      doubleArray0[2] = (double) (-3650L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 251.880920325);
      assertArrayEquals(new double[] {(-1482.0), 251.880920325, (-3650.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1615);
      assertArrayEquals(new int[] {1615, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2166;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 'q';
      longArray0[4] = 2605L;
      longArray0[5] = (long) 1615;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {2166L, 0L, 2L, 113L, 2605L, 1615L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)1987;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2053;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1661;
      shortArray0[7] = (short)928;
      shortArray0[8] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)121, (short)1987, (short)1, (short)0, (short)2053, (short)0, (short)1661, (short)928, (short)2}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)97;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-762), 157);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)90, (byte)90, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)90, (byte)90, (byte)97}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-937);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-228);
      intArray0[5] = 293;
      intArray0[6] = (-937);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2603, (-937));
      assertArrayEquals(new int[] {1615, (-937), (-1), 0, (-228), 293, (-937)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2136;
      doubleArray0[1] = 1313.1;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {2136.0, 1313.1}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Integer integer0 = new Integer(1615);
      assertEquals(1615, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[9];
      intArray0[5] = 1615;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-937);
      integerArray0[3] = (Integer) 1615;
      Integer integer1 = Integer.getInteger("\" 9vZE?w;:");
      assertNull(integer1);
      
      integerArray0[4] = null;
      integerArray0[5] = (Integer) (-228);
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) (-228);
      integerArray0[8] = (Integer) 1615;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) null);
      assertEquals(9, integerArray0.length);
      assertEquals(10, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object[] objectArray1 = ArrayUtils.removeElement((Object[]) null, object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertNotSame(object3, object0);
      assertNull(objectArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'f');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) booleanArray0, 0, (Object) "R{S>(MZF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1139.13489;
      doubleArray0[1] = 467.1531;
      doubleArray0[2] = 467.1531;
      doubleArray0[3] = 2332.271889244117;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-953.05);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1139.13489, 467.1531, 467.1531, 2332.271889244117, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-953.05)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)6;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-1), (short) (-1), (short)6}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)6);
      assertArrayEquals(new short[] {(short) (-128), (short) (-1), (short) (-1), (short)6}, shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-1), (short) (-1), (short)6}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-882L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-882L));
      assertArrayEquals(new long[] {(-882L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (-882L);
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (double) (-882L);
      doubleArray0[4] = 251.88092032494;
      doubleArray0[5] = (double) (-882L);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-882.0), 251.88092032494, (-882.0), 40.0, (-882.0), 1.5}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-2110);
      intArray0[2] = (int) (short)512;
      intArray0[3] = (int) (short) (-2110);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-2110), 0, 512, (-2110)}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-882.0), 251.88092032494, (-882.0), 40.0, (-882.0), 1.5}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Long[] longArray2 = new Long[6];
      longArray2[0] = (Long) (-882L);
      longArray2[1] = (Long) (-882L);
      longArray2[2] = (Long) (-882L);
      longArray2[3] = (Long) (-882L);
      longArray2[4] = (Long) (-882L);
      longArray2[5] = (Long) (-882L);
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray3.length);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
      assertNotNull(longArray3);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, (-5137));
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)567);
      assertEquals((short)567, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[8];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) short0;
      // Undeclared exception!
      try { 
        ArrayUtils.addAll((Object[]) integerArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot store java.lang.Object in an array of java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-884.503F);
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-884.503F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-884.503F), 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)11);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte)11);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 2100L, (int) (byte)11);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)11;
      shortArray0[1] = (short) (-1911);
      shortArray0[2] = (short)171;
      shortArray0[3] = (short) (-1911);
      shortArray0[4] = (short)1154;
      shortArray0[5] = (short) (-4625);
      shortArray0[6] = (short)579;
      shortArray0[7] = (short)171;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)10);
      assertArrayEquals(new short[] {(short)11, (short) (-1911), (short)171, (short) (-1911), (short)1154, (short) (-4625), (short)579, (short)171}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)36, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      
      ArrayUtils.reverse((double[]) null);
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)0);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double double3 = Double.min((byte)36, (double) doubleArray0[2]);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = Double.min((double) doubleArray0[1], (-1555.685825));
      assertEquals(4, doubleArray0.length);
      assertEquals((-1555.685825), double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      Double double5 = new Double((-1532.1103));
      assertEquals((-1532.1103), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[3] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 605.259429);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1532.1103)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-316);
      shortArray0[1] = (short)2603;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)113;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-316), (short)2603, (short)2, (short)1, (short)113, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-316), (short)2603, (short)2, (short)1, (short)113, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-316), (short)2603, (short)2, (short)1, (short)113, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-316), (short)2603, (short)2, (short)1, (short)113, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(12, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1482.0);
      doubleArray0[1] = (-1248.191680838);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1482.0), (-1248.191680838)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1482.0), (-1248.191680838)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-3640L);
      longArray0[1] = (-691L);
      longArray0[2] = 1208L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      longArray0[5] = 5L;
      longArray0[6] = 3503L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-3640L), (-691L), 1208L, 1L, 1L, 5L, 3503L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1208L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 3503L;
      objectArray0[3] = (Object) 1L;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(8, objectArray1.length);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-1443));
      assertEquals((short) (-1443), (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object1, 0);
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-16), (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -16, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)512;
      shortArray0[1] = (short)512;
      shortArray0[2] = (short)512;
      shortArray0[3] = (short)512;
      shortArray0[4] = (short)512;
      shortArray0[5] = (short)512;
      shortArray0[6] = (short)512;
      shortArray0[7] = (short)512;
      shortArray0[8] = (short) (-2156);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)512, (short)512, (short)512, (short)512, (short)512, (short)512, (short)512, (short)512, (short) (-2156)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {'^', '^'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)512;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {512}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {512}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-316);
      shortArray0[1] = (short)2603;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-316), (short)2603, (short)2, (short)1, (short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-316), (short)2603, (short)2, (short)1, (short)2, (short)0}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)2603;
      doubleArray0[1] = 1.0;
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)short0;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short) (-316);
      intArray0[5] = (int) (short)2;
      intArray0[6] = (int) (short)2;
      intArray0[7] = (int) (short) (-316);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 2, 1, 1, (-316), 2, 2, (-316)}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[6];
      floatArray0[0] = (float) (byte)46;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)46, (byte) (-29), (byte) (-1), (byte)4}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)512;
      doubleArray0[1] = (double) (short)512;
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (short)512;
      doubleArray0[5] = (double) (short)512;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {512.0, 512.0, 40.0, 0.0, 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap((Object[]) null);
      assertNull(map1);
      
      Map<Object, Object> map2 = ArrayUtils.toMap((Object[]) null);
      assertNull(map2);
      
      Map<Object, Object> map3 = ArrayUtils.toMap((Object[]) null);
      assertNull(map3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000', 'b', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 420);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, (-3060));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3060);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-3060)}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object1, 0);
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, 2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte)0);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int2);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'R';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {']', 'R', 'z', 'z', 'z'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-465));
      assertEquals((short) (-465), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)692);
      assertEquals((short)692, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((byte)44);
      assertEquals((short)44, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2, (-1789569706));
      assertArrayEquals(new byte[] {(byte)44}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (short) (-465), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -465, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Short short0 = new Short((short) (-1471));
      assertEquals((short) (-1471), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'K';
      boolean boolean1 = ArrayUtils.contains(intArray0, (-114));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      longArray0[2] = (-130L);
      longArray0[3] = (long) '8';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-540);
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      longArray0[8] = (long) 'K';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 2166);
      assertArrayEquals(new long[] {0L, 0L, (-130L), 56L, 0L, (-540L), 0L, 0L, 75L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3846.1338F));
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)4;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)4, (byte)0, (byte)2, (byte) (-102), (byte) (-1), (byte)2, (byte)4}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2602;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-95L), 2602);
      assertArrayEquals(new long[] {2602L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf((char[]) null, '&', (int) (byte)0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '|';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'3', '|'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('w');
      assertEquals('w', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('k');
      assertEquals('k', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('k');
      assertEquals('k', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      Character character4 = new Character('w');
      assertEquals('w', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      booleanArray0[0] = boolean1;
      Short short0 = new Short((short)553);
      assertEquals((short)553, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)553);
      assertEquals((short)553, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean3 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 14L;
      longArray0[2] = 690L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {690L, 14L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 690L);
      assertNull(floatArray1);
      
      Long long0 = new Long((-1990L));
      assertEquals((-1990L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1990L));
      assertEquals((-1990L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long long3 = new Long(0L);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      Long long4 = new Long((-1460L));
      assertEquals((-1460L), (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      Long long5 = new Long(3395L);
      assertEquals(3395L, (long)long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      
      Long long6 = new Long(690L);
      assertEquals(690L, (long)long6);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertNotNull(long6);
      
      Long long7 = new Long((-1L));
      assertEquals((-1L), (long)long7);
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertNotNull(long7);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Short short0 = new Short((short)615);
      assertEquals((short)615, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-596));
      assertEquals((short) (-596), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-596));
      assertEquals((short) (-596), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      long long0 = Short.toUnsignedLong((short) (-596));
      assertEquals(64940L, long0);
      
      Short[] shortArray0 = new Short[2];
      int int0 = Short.toUnsignedInt((short)615);
      assertEquals(615, int0);
      
      long long1 = Short.toUnsignedLong((short)615);
      assertEquals(615L, long1);
      assertFalse(long1 == long0);
      
      shortArray0[0] = short1;
      long long2 = Short.toUnsignedLong((short)615);
      assertEquals(615L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      int int1 = Short.compare((short) shortArray0[0], (short) (-596));
      assertEquals(2, shortArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      shortArray0[1] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      try { 
        Byte.decode("java.lang.Integer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Integer\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)5;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)5}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ")";
      // Undeclared exception!
      try { 
        ArrayUtils.remove(stringArray0, 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      float[] floatArray0 = new float[2];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(0, 0);
      assertEquals(0.0F, float1, 0.01F);
      
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = float0;
      floatArray1[1] = float0;
      float float2 = Float.min((float) floatArray1[1], 1.0F);
      assertEquals(5, floatArray1.length);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      floatArray1[2] = float0;
      floatArray1[4] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, (-7), 43);
      assertEquals(3, objectArray1.length);
      assertEquals(3, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[1];
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean4 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      boolean boolean5 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1139.13489;
      doubleArray0[1] = 467.1531;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2332.271889244117;
      doubleArray0[4] = 2807.35;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {1139.13489, 467.1531, 0.0, 2332.271889244117, 2807.35}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[2] = 1472.0914F;
      floatArray0[3] = 2481.0F;
      floatArray0[4] = (-858.11F);
      floatArray0[5] = 2321.1782F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1472.0914F, 2481.0F, (-858.11F), 2321.1782F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1472.0914F, 2481.0F, (-858.11F), 2321.1782F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = new Float[2];
      floatArray2[0] = (Float) 2481.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 2481.0F);
      assertArrayEquals(new float[] {2481.0F, 2481.0F}, floatArray3, 0.01F);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      
      Float[] floatArray4 = ArrayUtils.nullToEmpty(floatArray2);
      assertEquals(2, floatArray4.length);
      assertEquals(2, floatArray2.length);
      assertSame(floatArray4, floatArray2);
      assertSame(floatArray2, floatArray4);
      assertNotNull(floatArray4);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertTrue(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertEquals(24, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-809.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-809.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-809.0F), (-809.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-809.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-809.0F), (-809.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      ArrayUtils.reverse((double[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)512;
      shortArray0[1] = (short)57;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)512, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)512, (short)57, (short)512, (short)57}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 10;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-525.980318207343), 2773, 43.0);
      assertArrayEquals(new double[] {10.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-525.980318207343));
      assertArrayEquals(new double[] {10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-937));
      assertNull(shortArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'g';
      charArray1[1] = 'f';
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertArrayEquals(new char[] {'g', 'f'}, charArray1);
      assertArrayEquals(new char[] {'g', 'f', 'g', 'f'}, charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {10.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (-2223), "{}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2223, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-80);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)9, (byte) (-16), (byte)41, (byte) (-26), (byte)57, (byte)8, (byte) (-80)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, objectArray0.length);
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      assertNotNull(map1);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)9, (byte) (-16), (byte)41, (byte) (-26), (byte)57, (byte)8, (byte) (-80)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      
      boolean boolean6 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)9, (byte) (-16), (byte)41, (byte) (-26), (byte)57, (byte)8, (byte) (-80)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      
      Map<Object, Object> map2 = ArrayUtils.toMap(objectArray0);
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      assertEquals(0, objectArray0.length);
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotSame(map2, map1);
      assertNotSame(map2, map0);
      assertNotNull(map2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "r";
      stringArray0[1] = "java.lang.Object";
      stringArray0[2] = "java.lang.Object";
      stringArray0[3] = "P)Zd}`Nu_y$T";
      stringArray0[5] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[7] = "java.lang.Float";
      stringArray0[8] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(18, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertEquals(2, booleanArray2.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1397));
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2136;
      doubleArray0[1] = (double) 2136;
      doubleArray0[2] = (double) 2136;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2136, (double) 2136);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2136, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      byte byte0 = (byte)31;
      Byte byte1 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)31, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      long long0 = Byte.toUnsignedLong((byte) (-55));
      assertEquals(201L, long0);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte) (-37), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'x';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'b', '+', 'x'}, charArray0);
      assertArrayEquals(new char[] {'b', '+', 'x', 'b', '+', 'x'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {120.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '*';
      char[] charArray1 = ArrayUtils.add(charArray0, '*');
      assertArrayEquals(new char[] {'0', '*'}, charArray0);
      assertArrayEquals(new char[] {'0', '*', '*'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/C9@%yZ";
      stringArray0[1] = "hE`0\"m0Iy,HUN";
      stringArray0[2] = "";
      stringArray0[3] = "K;e9I;8";
      stringArray0[4] = "f ";
      stringArray0[5] = "7,<W=";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 10;
      int int0 = ArrayUtils.indexOf(doubleArray0, 7.0, 10, (-1308.5044));
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 35.0);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)120);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-937);
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '(';
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 40.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (-1248.191680838), (int) (short) (-937));
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int2 = ArrayUtils.indexOf(doubleArray1, (double) 173, (int) (short) (-937));
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer((-2582));
      assertEquals((-2582), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = new Integer((-2582));
      assertEquals((-2582), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'E';
      intArray0[2] = (-2144353204);
      intArray0[3] = (int) 'E';
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2144353204), 1365);
      assertArrayEquals(new int[] {1, 69, (-2144353204), 69, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, 69, (-2144353204), 69, (-1)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Map<Object, Object> map1 = ArrayUtils.toMap((Object[]) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      long long0 = Byte.toUnsignedLong((byte) (-1));
      assertEquals(255L, long0);
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)124;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)124}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1665;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {1665}, intArray0);
      assertArrayEquals(new int[] {1665}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)2, (-620));
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)532;
      Short short2 = new Short((short)532);
      assertEquals((short)532, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      try { 
        Short.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((int) (byte) (-97));
      assertEquals((-97), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'b';
      int int0 = ArrayUtils.indexOf(intArray0, 10, (-870));
      assertArrayEquals(new int[] {98, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 1175);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {98, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {98, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-30);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)1, (byte)22, (byte)86, (byte) (-102), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)1, (byte)22, (byte)86, (byte) (-102), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1115.330311375073, 39, (double) 39);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 1, (double) 39);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-901);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-901), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-3846.1338F));
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      int int0 = ArrayUtils.indexOf(charArray0, 'x');
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'b', '+', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '+';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 2603);
      assertArrayEquals(new int[] {98, 43}, intArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Integer integer0 = new Integer(43);
      Object object1 = new Object();
      ArrayUtils.isSameType(integer0, object1);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)4, (int) (byte)4);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)120);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '/';
      charArray0[2] = 'c';
      charArray0[3] = '/';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'\\', '/', 'c', '/', 'm'}, charArray0);
      assertArrayEquals(new char[] {'\\', '/', 'c', '/', 'm', '\\', '/', 'c', '/', 'm'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-937);
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) '\\';
      intArray0[3] = 7;
      intArray0[4] = (int) '/';
      intArray0[5] = (int) 'c';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-937), 109, 92, 7, 47, 99}, intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)31;
      Byte byte1 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)31, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      long long0 = Byte.toUnsignedLong((byte) (-55));
      assertEquals(201L, long0);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-1);
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) byte4, (-3662));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals((-1), int0);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-3662);
      longArray0[1] = (long) byte3;
      longArray0[2] = (long) (byte)31;
      longArray0[3] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-3662L), (-1L), 31L, 31L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) byte3);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(byte3 == byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 120.0F;
      floatArray0[1] = (-3846.1338F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {120.0F, (-3846.1338F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {120.0F, (-3846.1338F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertArrayEquals(new float[] {120.0F, (-3846.1338F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {120.0F, (-3846.1338F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-83L);
      longArray0[1] = (-1241L);
      longArray0[2] = (-1241L);
      longArray0[3] = (-1241L);
      longArray0[4] = (-1241L);
      longArray0[5] = (-1241L);
      longArray0[6] = (-1241L);
      longArray0[7] = (-1241L);
      longArray0[8] = (-1241L);
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '\"';
      charArray0[2] = '5';
      charArray0[3] = '\'';
      int int0 = ArrayUtils.indexOf(charArray0, '', (-290));
      assertArrayEquals(new char[] {'w', '\"', '5', '\''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-882L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-882L));
      assertArrayEquals(new long[] {(-882L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = 2145600113;
      int int1 = ArrayUtils.indexOf(longArray0, (-882L), 2145600113);
      assertArrayEquals(new long[] {(-882L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(int1 == int0);
      assertNotSame(longArray0, longArray1);
      
      Long[] longArray2 = new Long[5];
      longArray2[0] = (Long) (-882L);
      longArray2[1] = (Long) (-882L);
      long long0 = (-540L);
      Long long1 = new Long((-540L));
      assertEquals((-540L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray2[2] = long1;
      long long2 = Long.min((-882L), (long) longArray2[0]);
      assertEquals(5, longArray2.length);
      assertEquals((-882L), long2);
      assertFalse(long2 == long0);
      
      longArray2[3] = (Long) (-882L);
      String string0 = Long.toUnsignedString((long) longArray2[0]);
      assertEquals(5, longArray2.length);
      assertEquals("18446744073709550734", string0);
      assertNotNull(string0);
      
      Long long3 = new Long((-2888));
      assertEquals((-2888L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      Long long4 = Long.getLong((String) null, long3);
      assertEquals((-2888L), (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long4);
      
      try { 
        Long.parseUnsignedLong((String) null, (-2888));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)27;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1242.6186, (int) (byte)97, (double) (byte)90);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.5, (int) (byte)27, 1230.049364);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)27}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) '^';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3238L));
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)64, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 0);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, object0);
      assertEquals(3, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = 'C';
      charArray0[6] = '9';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Q');
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', 'C', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)36;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)73, (int) (byte)36);
      assertArrayEquals(new byte[] {(byte)73, (byte)36}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3060);
      intArray0[1] = 36;
      Character character0 = Character.valueOf('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      char[] charArray0 = new char[11];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertEquals(11, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'l';
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, 1);
      assertArrayEquals(new int[] {108, (-1), Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((-214));
      assertEquals((-214), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-630));
      assertEquals((-630), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2060));
      assertEquals((-2060), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger((String) null);
      assertNull(integer3);
      
      Integer integer4 = new Integer((byte) (-97));
      assertEquals((-97), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object1, integer1);
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      Integer integer5 = new Integer((-955));
      assertEquals((-955), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      int[] intArray0 = new int[3];
      intArray0[0] = (-955);
      intArray0[1] = (-214);
      intArray0[2] = (-2060);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2144578562), 1336);
      assertArrayEquals(new int[] {(-955), (-214), (-2060)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'U');
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2660);
      shortArray0[2] = (short)1921;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2660), (short)1921}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2660), (short)1921, (short) (-1), (short) (-2660), (short)1921}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'D';
      charArray0[2] = '/';
      boolean boolean0 = ArrayUtils.isEquals("java.lang.Object@1d1e4d42", "java.lang.Object@1d1e4d42");
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      String[] stringArray0 = new String[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4995;
      intArray0[1] = 595;
      intArray0[2] = 1360;
      intArray0[3] = 143;
      intArray0[4] = 2939;
      intArray0[5] = (-955);
      intArray0[6] = 1;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {4995, 595, 1360, 143, 2939, (-955), 1}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEquals(object1, object0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1924.152F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1344.0811969991648));
      assertEquals((-1344.0811969991648), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      charArray0[8] = 'e';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 46;
      intArray0[1] = (int) 'e';
      intArray0[2] = (-2417);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {46, 101, (-2417), 0}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(integerArray0);
      
      long[] longArray0 = new long[8];
      charArray0[7] = 'e';
      longArray0[2] = (long) 'e';
      longArray0[3] = (long) 'e';
      longArray0[4] = (long) 'e';
      longArray0[7] = (long) 'e';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Character character0 = Character.valueOf('+');
      assertEquals('+', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2243), (-2243));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = new Float[5];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 11.634258F);
      assertArrayEquals(new float[] {11.634258F, 11.634258F, 11.634258F, 11.634258F, 11.634258F}, floatArray3, 0.01F);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2075);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-2075), (-2075));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      long long0 = (-540L);
      Long long1 = new Long((-98L));
      assertEquals((-98L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long long2 = Long.min((-98L), (-375L));
      assertEquals((-375L), long2);
      assertFalse(long2 == long0);
      
      String string0 = Long.toUnsignedString((long) (-2075));
      assertEquals("18446744073709549541", string0);
      assertNotNull(string0);
      
      Long long3 = new Long((-2888));
      assertEquals((-2888L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      Long long4 = Long.getLong("Array and element cannot both be null", long3);
      assertEquals((-2888L), (long)long4);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      
      try { 
        Long.parseUnsignedLong("0:wt[Wp,&#T-<$", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) '^';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      Float[] floatArray3 = new Float[3];
      floatArray3[0] = (Float) 94.0F;
      floatArray3[1] = (Float) 94.0F;
      floatArray3[2] = (Float) 94.0F;
      float[] floatArray4 = ArrayUtils.toPrimitive(floatArray3, 94.0F);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray4, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(3, floatArray4.length);
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotNull(floatArray4);
      
      Float[] floatArray5 = ArrayUtils.nullToEmpty(floatArray3);
      assertEquals(3, floatArray3.length);
      assertEquals(3, floatArray5.length);
      assertSame(floatArray3, floatArray5);
      assertSame(floatArray5, floatArray3);
      assertNotNull(floatArray5);
      
      Float[] floatArray6 = ArrayUtils.toObject(floatArray1);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray6.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray4);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray6, floatArray3);
      assertNotSame(floatArray6, floatArray5);
      assertNotNull(floatArray6);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Y', (-1));
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(floatArray4, 94.0F, (-1));
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray4, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(3, floatArray4.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(floatArray3.equals((Object)floatArray6));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertSame(floatArray3, floatArray5);
      assertNotSame(floatArray3, floatArray6);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 685L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {685L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 685L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {685L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {685L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {3525.99, 0.0, 685.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Integer integer0 = new Integer((-2582));
      assertEquals((-2582), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = new Integer((-2582));
      assertEquals((-2582), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) 'E';
      intArray0[4] = (-2144353204);
      intArray0[3] = (int) 'E';
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 1365);
      assertArrayEquals(new int[] {1, 69, 0, 69, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, 69, 0, 69, (-1)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-937);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-228);
      intArray0[5] = 293;
      intArray0[6] = 2136;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2603, (-937));
      assertArrayEquals(new int[] {1615, (-937), (-1), 0, (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-937);
      doubleArray0[1] = 1313.1;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-937.0), 1313.1}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '5';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.indexOf(intArray1, 293, (-1));
      assertArrayEquals(new int[] {1615, (-937), (-1), 0, (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)32;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)32);
      assertArrayEquals(new byte[] {(byte)1, (byte)32}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short)36;
      shortArray0[4] = (short) (byte)32;
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte)1;
      shortArray0[7] = (short) (byte)1;
      shortArray0[8] = (short) (byte)1;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)36, (short)32, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = objectArray0[0];
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 3681L;
      longArray0[2] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {1L, 3681L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {1L, 3681L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) false;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-363L);
      longArray0[1] = (-363L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-363L), (-363L)}, longArray0);
      assertArrayEquals(new long[] {(-363L), (-363L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-363L), (-363L)}, longArray0);
      assertArrayEquals(new long[] {(-363L), (-363L), (-363L), (-363L)}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-44), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-44), (byte)0, (byte)0, (byte)0, (byte) (-44), (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double double0 = new Double((byte) (-44));
      assertEquals((-44.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min((byte)0, (byte)0);
      assertEquals(0.0, double1, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Double double0 = new Double((-95.2877));
      assertEquals((-95.2877), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-95.2877));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double1 = Double.max(738.60801715, (-2435.0));
      assertEquals(738.60801715, double1, 0.01);
      
      boolean boolean0 = Double.isFinite((-2435.0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2014), (-4));
      assertArrayEquals(new char[] {'x', 'x', 'x'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(doubleArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, doubleArray0.length);
      assertNotNull(map0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) (-2014);
      floatArray0[2] = (float) 'x';
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) 'x';
      floatArray0[5] = (float) (-4);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-4);
      floatArray1[1] = (float) 'x';
      floatArray1[2] = (float) 4;
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-4.0F), 120.0F, 4.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {120.0F, (-2014.0F), 120.0F, 4.0F, 120.0F, (-4.0F), (-4.0F), 120.0F, 4.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {120.0F, (-2014.0F), 120.0F, 4.0F, 120.0F, (-4.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 98.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {98.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {98.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3238L);
      longArray0[1] = (-3238L);
      int int0 = ArrayUtils.indexOf(longArray0, 685L);
      assertArrayEquals(new long[] {(-3238L), (-3238L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-3238L), (-3238L)}, longArray0);
      assertArrayEquals(new long[] {(-3238L), (-3238L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(12, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray2 = ArrayUtils.subarray((long[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(longArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '>';
      charArray0[2] = 'N';
      charArray0[3] = 'H';
      charArray0[4] = 'f';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'i', '>', 'N', 'H', 'f'}, charArray1);
      assertArrayEquals(new char[] {'i', '>', 'N', 'H', 'f'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '>';
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'H';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {72}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte)0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-24));
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3238L));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1613L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-83L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-1613L), 0L, (-83L)}, longArray0);
      assertArrayEquals(new long[] {(-1613L), 0L, (-83L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Float float0 = new Float(30.13632378921934);
      assertEquals(30.136324F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      objectArray0[1] = (Object) float0;
      boolean boolean0 = Float.isFinite(120.0F);
      assertTrue(boolean0);
      
      floatArray0[2] = float0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s";
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-766));
      assertEquals((-766), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer2 = new Integer((-766));
      assertEquals((-766), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer2);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2360);
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 6);
      assertArrayEquals(new int[] {(-2360), 2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<String, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 5);
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", object0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, Object>("", object0);
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.divideUnsigned(1, 1);
      assertEquals(1, int0);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<String, Object>("", integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry4);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<String, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertEquals(5, abstractMap_SimpleEntryArray0.length);
      assertEquals(10, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleEntryArray1);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(5, abstractMap_SimpleEntryArray0.length);
      assertEquals(10, abstractMap_SimpleEntryArray1.length);
      assertFalse(abstractMap_SimpleEntryArray0.equals((Object)abstractMap_SimpleEntryArray1));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-614);
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short) (-614)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray2 = new Float[5];
      floatArray2[0] = float0;
      floatArray2[1] = float0;
      floatArray2[2] = float0;
      Float float2 = new Float((float) floatArray2[1]);
      assertEquals(5, floatArray2.length);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray2[3] = float2;
      Float float3 = new Float((double) floatArray2[1]);
      assertEquals(5, floatArray2.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray2[4] = float3;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray3, 0.01F);
      assertEquals(5, floatArray3.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 453;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 453;
      objectArray0[1] = (Object) 453;
      objectArray0[2] = (Object) 453;
      objectArray0[2] = (Object) 453;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 453);
      assertEquals(9, objectArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 453;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 453, 453);
      assertArrayEquals(new double[] {453.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      short[] shortArray0 = new short[2];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '5'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2559;
      intArray0[1] = (-1496);
      intArray0[2] = (-578);
      intArray0[3] = (-3487);
      intArray0[4] = (-1496);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = 1325;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {2559, (-1496), (-578), (-3487), (-1496), Integer.MAX_VALUE, Integer.MAX_VALUE, 1325}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(46);
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = Long.max(1325, (-3487));
      assertEquals(1325L, long0);
      
      Long long1 = new Long(Integer.MAX_VALUE);
      assertEquals(2147483647L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long((-1496));
      assertEquals((-1496L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long long3 = new Long((-1496));
      assertEquals((-1496L), (long)long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 3292L);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {2559, (-1496), (-578), (-3487), (-1496), Integer.MAX_VALUE, Integer.MAX_VALUE, 1325}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {2559, (-1496), (-578), (-3487), (-1496), Integer.MAX_VALUE, Integer.MAX_VALUE, 1325}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1727.074);
      doubleArray0[2] = (double) 1;
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0, 1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) integerArray0, (Object) "-;)-JDQ[");
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'J'}, charArray1);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) 1;
      floatArray0[2] = 2957.9F;
      int int0 = ArrayUtils.indexOf(floatArray0, 293.0F);
      assertArrayEquals(new float[] {74.0F, 1.0F, 2957.9F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0, 1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0, 1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) "-;)-JDQ[", (-1811));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray3 = ArrayUtils.subarray(doubleArray0, (-1), 1);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((String[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2144571410);
      intArray0[1] = 2397;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte byte0 = (byte)44;
      Integer integer0 = new Integer((byte)44);
      assertEquals(44, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '.';
      charArray0[4] = '!';
      charArray0[5] = '(';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'N', '.', '\u0000', '\u0000', '!', '('}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = (double) '(';
      int int0 = ArrayUtils.indexOf(doubleArray0, 746.4, 10, (double) 10);
      assertEquals(21, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 10);
      assertEquals(21, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-937);
      shortArray0[1] = (short)100;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, 2);
      assertArrayEquals(new char[] {'N', '.', '\u0000', '\u0000', '!', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = 690L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-40L));
      assertArrayEquals(new long[] {690L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 453;
      intArray0[1] = 453;
      intArray0[2] = 453;
      intArray0[3] = 453;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {453, 453, 453, 453, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2067;
      shortArray0[1] = (short)2067;
      shortArray0[2] = (short)2067;
      shortArray0[3] = (short)2067;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2067, (short)2067, (short)2067, (short)2067}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '@');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2067, 2151);
      assertArrayEquals(new short[] {(short)2067, (short)2067, (short)2067, (short)2067}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      Integer integer0 = new Integer((byte)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((int) (byte) (-97));
      assertEquals((-97), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b');
      assertArrayEquals(new char[] {'b', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1496.792);
      assertEquals(1496.792, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte) (-97));
      assertEquals((-97.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2599.92006475823));
      assertArrayEquals(new double[] {1496.792, (-97.0), 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[1], 0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 453;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {453}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'K';
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2236L;
      longArray0[1] = (-95L);
      longArray0[2] = (long) '8';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1210L, 3786);
      assertArrayEquals(new long[] {2236L, (-95L), 56L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'8', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[2] = 979L;
      longArray0[3] = (-3344L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-2075));
      assertArrayEquals(new long[] {0L, 0L, 979L, (-3344L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1364.9F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertArrayEquals(new int[] {(-2075), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2075), (-1), (-1), (-1), (-1)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)14, (byte)0, (byte)14, (byte)0, (byte)35, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'd');
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[0] = 120.0F;
      floatArray0[1] = (-3846.1338F);
      floatArray0[2] = (-2414.8599F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2414.8599F));
      assertEquals(12, floatArray0.length);
      assertEquals(11, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-102);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte) (-88), (byte) (-29), (byte) (-1), (byte)4, (byte)30, (byte) (-29), (byte)46, (byte) (-102)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) longArray0, object0);
      assertEquals(0, longArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotSame(longArray0, objectArray0);
      assertNotNull(objectArray0);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '9');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-228);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      char[] charArray1 = ArrayUtils.add(charArray0, '*');
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertArrayEquals(new char[] {'0', '0', '*'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "hE`0\"m0Iy,HUN";
      stringArray0[2] = "";
      stringArray0[3] = "K;e9I;8";
      stringArray0[4] = "f ";
      stringArray0[5] = "7,<W=";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int0 = ArrayUtils.indexOf(charArray1, '~', 2534);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertArrayEquals(new char[] {'0', '0', '*'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)9}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-975);
      intArray0[2] = 13;
      intArray0[3] = 0;
      intArray0[4] = (-228);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'P');
      assertArrayEquals(new char[] {'@', '@', '@', '@'}, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', '@'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2067), 13);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-382), (-382));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(453);
      assertEquals(453, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(4, integerArray0.length);
      assertEquals(453, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1335);
      assertEquals(1335, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(4, integerArray0.length);
      assertEquals(453, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {453, 453, 1335, 453}, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long[] longArray0 = null;
      int int0 = 3454;
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 3454, (long) 3454);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3454, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-174);
      doubleArray0[1] = (-3256.67);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-3256.67);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-3256.67);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-4220));
      assertArrayEquals(new double[] {(-174.0), (-3256.67), 1.0, (-3256.67), 1.0, (-3256.67)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 131.57;
      doubleArray1[1] = (double) (short) (-174);
      doubleArray1[3] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 2278.8176478, (int) (short) (-4220));
      assertArrayEquals(new double[] {131.57, (-174.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals((-1), int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-3256.67);
      objectArray0[1] = (Object) (-3256.67);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (-174.0);
      objectArray0[4] = (Object) 131.57;
      objectArray0[5] = (Object) (-1.0);
      objectArray0[6] = (Object) (-174.0);
      objectArray0[7] = (Object) (-3256.67);
      objectArray0[8] = (Object) 131.57;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(18, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-174);
      intArray0[5] = (-1);
      intArray0[6] = (int) (short) (-174);
      intArray0[7] = (int) (short) (-174);
      intArray0[8] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-174), (-1), (-174), (-174), (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-174), (-1), (-174), (-174), (-1)}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 10;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 35.0);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1730));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[20];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[3] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), 0);
      assertArrayEquals(new int[] {(-1), 0, 0, (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)512;
      doubleArray0[1] = (double) (short)512;
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (short)512;
      doubleArray0[5] = (double) (short)512;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {512.0, 512.0, 40.0, 0.0, 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)8;
      doubleArray0[2] = (double) (short)8;
      doubleArray0[3] = (double) (short)8;
      doubleArray0[4] = (double) (short)8;
      doubleArray0[5] = (double) (short)8;
      int int0 = ArrayUtils.indexOf(doubleArray0, 8.0, 848, 0.9505422078506571);
      assertArrayEquals(new double[] {0.0, 8.0, 8.0, 8.0, 8.0, 8.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.9505422078506571);
      assertArrayEquals(new double[] {0.0, 8.0, 8.0, 8.0, 8.0, 8.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 8.0, 8.0, 8.0, 8.0, 8.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (short)220, 848);
      assertNull(shortArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 8.0, 8.0, 8.0, 8.0, 8.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 8.0, 8.0, 8.0, 8.0, 8.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 848;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {848}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 171;
      intArray0[4] = (-540);
      intArray0[5] = 0;
      intArray0[6] = (-5277);
      intArray0[7] = 2155;
      intArray0[8] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 171, 0, (-540), 0, (-5277), 2155, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-540);
      longArray0[1] = (long) 0;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 171;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertArrayEquals(new long[] {(-540L), 0L, (-1L), 171L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      char[] charArray0 = new char[5];
      charArray0[1] = 'R';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'z';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'R', 'h', 'h', 'z'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-462));
      assertEquals((short) (-462), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)692);
      assertEquals((short)692, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((byte)44);
      assertEquals((short)44, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      int int0 = Short.compare((byte)44, (short)692);
      assertEquals((-648), int0);
      
      Float float0 = new Float((double) (byte)44);
      assertEquals(44.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      short[] shortArray0 = new short[1];
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) short0, 17);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte)0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "os.name";
      stringArray0[1] = "os.name";
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'os.name', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = 19;
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 19, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Double double0 = new Double((-95.2877));
      assertEquals((-95.2877), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double((-95.2877));
      assertEquals((-95.2877), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1564.6658723751382));
      assertArrayEquals(new double[] {(-95.2877), (-95.2877), (-95.2877), (-95.2877), (-95.2877), (-95.2877)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double double2 = Double.max(2789.534, (-2331.37191735));
      assertEquals(2789.534, double2, 0.01);
      
      boolean boolean0 = Double.isFinite((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-2014), (-3059));
      assertNull(charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3059);
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) (-2014);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3059.0F), 4.0F, (-2014.0F), (-3059.0F), 4.0F, (-2014.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3059.0F), 4.0F, (-2014.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object4, (-1));
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int0);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertNotSame(object4, object3);
      assertNotSame(object4, object1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1698;
      String[] stringArray0 = new String[1];
      boolean boolean2 = ArrayUtils.contains(intArray0, (int) (short)1698);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)31;
      Byte byte1 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)31, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      long long0 = Byte.toUnsignedLong((byte) (-55));
      assertEquals(201L, long0);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      int int0 = Byte.toUnsignedInt((byte) (-55));
      assertEquals(201, int0);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer(1118);
      assertEquals(1118, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte) (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (double) (-2075);
      doubleArray0[3] = (-1343.05052373);
      doubleArray0[4] = 618.6706413812207;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2075);
      floatArray0[1] = (float) (-2075);
      floatArray0[2] = (float) (-2075);
      floatArray0[3] = (float) (-2075);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {(-2075.0F), (-2075.0F), (-2075.0F), (-2075.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2075.0F), (-2075.0F), (-2075.0F), (-2075.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1921.0F);
      assertArrayEquals(new float[] {(-2075.0F), (-2075.0F), (-2075.0F), (-2075.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '@');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = new Boolean(",");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ' ';
      intArray0[1] = (int) ' ';
      intArray0[2] = (int) ' ';
      intArray0[3] = (int) ' ';
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {32, 32, 32, 32}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) characterArray0);
      assertEquals(2, characterArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) ' ';
      longArray0[2] = (long) 32;
      longArray0[3] = 1L;
      longArray0[4] = (long) 32;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {32L, 1L, 32L, 32L, 32L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 32;
      integerArray0[1] = (Integer) 32;
      integerArray0[2] = (Integer) 32;
      integerArray0[3] = (Integer) 32;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = Boolean.compare(true, false);
      assertEquals(1, int0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = Boolean.logicalAnd(true, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      booleanArray0[0] = boolean1;
      Short short0 = new Short((short)553);
      assertEquals((short)553, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)553);
      assertEquals((short)553, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      int int0 = Boolean.compare((boolean) boolean1, false);
      assertEquals(1, int0);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      
      Short short2 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      boolean boolean3 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      boolean boolean4 = ArrayUtils.isSameLength((Object[]) booleanArray0, (Object[]) integerArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)553);
      assertNull(floatArray0);
      
      boolean boolean5 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, (int) (short)553, 1339);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1343.05052373);
      doubleArray0[1] = 1139.13489;
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 618.6706413812207, 618.6706413812207);
      assertArrayEquals(new double[] {(-1343.05052373), 1139.13489, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1921.0F;
      floatArray0[1] = 120.0F;
      floatArray0[2] = 1921.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {1921.0F, 120.0F, 1921.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1921.0F, 120.0F, 1921.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = new Float[5];
      floatArray2[0] = (Float) 1921.0F;
      floatArray2[1] = (Float) 120.0F;
      floatArray2[2] = (Float) 1921.0F;
      floatArray2[3] = (Float) 120.0F;
      floatArray2[4] = (Float) 1921.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (float) floatArray2[0]);
      assertArrayEquals(new float[] {1921.0F, 120.0F, 1921.0F, 120.0F, 1921.0F}, floatArray3, 0.01F);
      assertEquals(5, floatArray3.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1343.05052373), 1139.13489, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1343.05052373), 1139.13489, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-937);
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {1615, (-937), (-1), 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-937);
      longArray0[1] = (-261L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2166;
      longArray0[4] = (long) (-937);
      longArray0[5] = (long) (-937);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-937L), (-261L), 0L, 2166L, (-937L), (-937L), (-1L), (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-83), 11);
      assertArrayEquals(new long[] {(-937L), (-261L), 0L, 2166L, (-937L), (-937L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-937L), (-261L), 0L, 2166L, (-937L), (-937L), (-1L), (-1L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)4;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)18;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)18, (byte)100, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)18}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)18}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(' ');
      assertEquals(' ', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('V');
      assertEquals('V', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('Y');
      assertEquals('Y', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character character4 = new Character('V');
      assertEquals('V', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) ' ';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'V';
      doubleArray0[3] = (double) ' ';
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, (-2134918666));
      assertArrayEquals(new double[] {32.0, 89.0, 86.0, 32.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)512;
      shortArray0[1] = (short)512;
      shortArray0[3] = (short)512;
      shortArray0[4] = (short)512;
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, shortArray0);
      assertArrayEquals(new short[] {(short)512, (short)512, (short)0, (short)512, (short)512}, shortArray0);
      assertArrayEquals(new short[] {(short)512, (short)512, (short)0, (short)512, (short)512}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)512;
      intArray0[1] = (int) (short)512;
      intArray0[2] = (int) (short)512;
      intArray0[3] = (int) (short)512;
      intArray0[4] = (int) (short) (-2110);
      intArray0[5] = (int) (short)512;
      intArray0[6] = (int) (short)512;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {512, 512, 512, 512, (-2110), 512, 512}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)23, (-2157));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[2] = '|';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '|';
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '|';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {124}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)44);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (float) 'l';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-1));
      assertArrayEquals(new float[] {107.0F, 108.0F, 108.0F, 108.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4519;
      boolean boolean0 = ArrayUtils.contains(intArray0, 4519);
      assertArrayEquals(new int[] {4519}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      intArray0[0] = (int) (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)64);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 4519;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 4519;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.add(longArray0, (-405L));
      assertArrayEquals(new long[] {4519L, 0L, 0L, 4519L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {4519L, 0L, 0L, 4519L, 0L, 0L, (-405L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1311.63F;
      floatArray0[1] = 1729.64F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 0L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1311.63F, 1729.64F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Integer integer0 = new Integer((byte)64);
      assertEquals(64, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "");
      assertEquals("64", string0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.5";
      stringArray0[1] = "7}";
      stringArray0[2] = "y/o[ThvPtM0`b1TT";
      stringArray0[3] = "os.name";
      stringArray0[4] = "Array and elemenm cannot both be null";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Byte byte0 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = '\u0089';
      charArray0[2] = 'S';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 2239);
      assertArrayEquals(new char[] {'j', '\u0089', 'S', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertArrayEquals(new char[] {'j', '\u0089', 'S', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000', 'j', '\u0089', 'S', '\u0000'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(7, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'j', '\u0089', 'S', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray3 = ArrayUtils.addAll(charArray1, charArray1);
      assertArrayEquals(new char[] {'j', '\u0089', 'S', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000', '\u0089', 'S', '\u0000'}, charArray3);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(6, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
      
      char[] charArray4 = Character.toChars(1);
      assertArrayEquals(new char[] {'\u0001'}, charArray4);
      assertEquals(1, charArray4.length);
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray0));
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray0);
      assertNotNull(charArray4);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray2);
      assertArrayEquals(new char[] {'j', '\u0089', 'S', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0089', 'S', '\u0000', 'j', '\u0089', 'S', '\u0000'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(7, charArray2.length);
      assertFalse(boolean1);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray4));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray4));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray4));
      assertFalse(charArray2.equals((Object)charArray3));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray4);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray4);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray4);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Integer[] integerArray0 = new Integer[2];
      String string0 = "user.home";
      try { 
        Integer.decode("user.home");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"user.home\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 532L;
      longArray0[1] = (-112L);
      longArray0[3] = 0L;
      longArray0[4] = 2897L;
      longArray0[5] = 1L;
      longArray0[6] = (-1482L);
      longArray0[7] = 2014L;
      longArray0[8] = (-3640L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2014L);
      assertArrayEquals(new long[] {532L, (-112L), 0L, 0L, 2897L, 1L, (-1482L), 2014L, (-3640L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(7, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2897L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-112L);
      doubleArray0[3] = (double) 7;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 251.880920325);
      assertArrayEquals(new double[] {2897.0, 0.0, (-112.0), 7.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '0';
      charArray0[2] = 'F';
      charArray0[3] = 'f';
      charArray0[4] = 'Z';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'A', '0', 'F', 'f', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Short short0 = new Short((short) (-3482));
      assertEquals((short) (-3482), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[13];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertEquals(13, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-3482));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 10;
      int int0 = ArrayUtils.indexOf(doubleArray0, 7.0, 10, (-1308.5044));
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 35.0);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 10.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)120);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-937);
      longArray0[1] = (long) '(';
      longArray0[2] = (-1L);
      longArray0[3] = (-663L);
      longArray0[4] = (long) '(';
      longArray0[5] = (long) (short)120;
      longArray0[6] = (long) (short) (-937);
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)1247, (-1342));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(10);
      assertEquals(10, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1538);
      assertEquals(1538, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(4);
      assertEquals(4, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1342));
      assertEquals((-1342), (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-880));
      assertEquals((-880), (int)integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = (-1);
      Short short0 = new Short((short)1637);
      assertEquals((short)1637, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, (-1), 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-350));
      assertEquals((short) (-350), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-350)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      longArray0[1] = 0L;
      longArray0[2] = 685L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {685L, 0L, (-225L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 685L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0L);
      assertArrayEquals(new double[] {3525.99, 0.0, 685.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3525.99, 0.0, 685.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = 'k';
      charArray0[2] = 'A';
      charArray0[3] = 'J';
      charArray0[4] = '&';
      charArray0[5] = '+';
      charArray0[6] = 'G';
      charArray0[7] = 'Q';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-857));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -857, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1249.0));
      assertEquals((-1249.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1249.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3050.08348));
      assertEquals((-3050.08348), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3050.08348));
      assertEquals((-3050.08348), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-3050.08348), (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1249.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double double6 = Double.sum((double) doubleArray0[3], (double) doubleArray0[3]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-6100.16696), double6, 0.01);
      
      double double7 = Double.max((-3050.08348), (double) doubleArray0[5]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1249.0), double7, 0.01);
      assertNotEquals(double7, double6, 0.01);
      
      Double double8 = new Double((double) doubleArray0[2]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-3050.08348), (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double4, 0.01);
      assertNotNull(double8);
      
      doubleArray0[6] = double8;
      double double9 = Double.max((-3050.08348), (double) doubleArray0[5]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1249.0), double9, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      
      double double10 = Double.sum(0.0, (double) doubleArray0[4]);
      assertEquals(8, doubleArray0.length);
      assertEquals((-3050.08348), double10, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      
      doubleArray0[7] = doubleArray0[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-6354.5F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-6354.5F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-6354.5F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-6354.5F);
      doubleArray0[1] = (double) (-6354.5F);
      doubleArray0[2] = (double) (-6354.5F);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-6354.5), (-6354.5), (-6354.5), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(13, booleanArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[3] = 2.0F;
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, object1, 0);
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object2);
      assertNotSame(object1, object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte)0);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-3256.67);
      doubleArray0[3] = 1046.808890893049;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2554.667991483189;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 1.0, (-3256.67), 1046.808890893049, (-1.0), 0.0, 0.0, 2554.667991483189}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      int int3 = 2;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2143711167));
      assertEquals((-2143711167), (int)integer1);
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int3, integer0);
      assertEquals(3, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)integer1));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) '^';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {94.0F, 94.0F, 94.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3238L));
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-18), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1482L);
      doubleArray0[1] = 251.880920325;
      doubleArray0[2] = (double) (-3640L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 251.880920325);
      assertArrayEquals(new double[] {(-1482.0), 251.880920325, (-3640.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)86;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)122, (int) (byte)86);
      assertArrayEquals(new byte[] {(byte)0, (byte)86}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, (int) (byte)86);
      assertArrayEquals(new byte[] {(byte)0, (byte)86}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-2524));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int[] intArray0 = new int[36];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 62;
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertArrayEquals(new int[] {62}, intArray1);
      assertEquals(36, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {62}, intArray1);
      assertEquals(36, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(boolean1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      ArrayUtils.reverse((double[]) null);
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min(2650.090319070849, 2789.776063859207);
      assertEquals(2650.090319070849, double1, 0.01);
      
      double double2 = Double.min((byte)0, (byte)0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      doubleArray0[0] = double0;
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (byte)0;
      floatArray3[1] = (float) (byte)0;
      floatArray3[2] = (float) (byte)0;
      floatArray3[3] = (float) (byte)0;
      floatArray3[4] = (float) (byte)0;
      floatArray3[5] = (float) (byte)0;
      floatArray3[6] = (float) (byte)0;
      floatArray3[7] = (float) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray3, 0.0F, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertEquals(8, floatArray3.length);
      assertEquals(0, int0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4519;
      boolean boolean0 = ArrayUtils.contains(intArray0, 4519);
      assertArrayEquals(new int[] {4519}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4519, 134);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)9);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)9}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2339, 2339);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2339;
      floatArray0[1] = (float) 2339;
      floatArray0[2] = (float) 2339;
      floatArray0[3] = (float) 2339;
      floatArray0[4] = (float) 2339;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2339.0F;
      objectArray0[1] = (Object) 2339.0F;
      objectArray0[2] = (Object) 2339.0F;
      objectArray0[3] = (Object) 2339.0F;
      objectArray0[4] = (Object) 2339.0F;
      objectArray0[5] = (Object) 2339.0F;
      Integer integer0 = Integer.getInteger("java.lang.Integer");
      assertNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 2339);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'Z';
      charArray0[2] = '5';
      charArray0[3] = '(';
      int int0 = ArrayUtils.indexOf(charArray0, '5');
      assertArrayEquals(new char[] {'V', 'Z', '5', '('}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(2, int0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("{}");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'n';
      charArray0[2] = '\"';
      charArray0[3] = 'i';
      charArray0[4] = '1';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '1');
      assertArrayEquals(new char[] {' ', 'n', '\"', 'i', '1'}, charArray0);
      assertArrayEquals(new char[] {' ', 'n', '\"', 'i'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ' ';
      doubleArray0[1] = (double) '1';
      doubleArray0[2] = (double) 'i';
      doubleArray0[3] = (double) 'n';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {32.0, 49.0, 105.0, 110.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)53;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)53}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)53}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'S';
      charArray0[2] = ';';
      charArray0[3] = 'E';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'\u0000', 'S', ';', 'E'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'S', ';', 'E'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = Double.valueOf((double) 0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2952.4615346);
      assertEquals(2952.4615346, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1853.2697);
      assertEquals(1853.2697, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1501.7824471105491);
      assertEquals(1501.7824471105491, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3725.38);
      assertEquals(3725.38, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1921.9369805336);
      assertEquals(1921.9369805336, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-937);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-228);
      intArray0[5] = 293;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 293;
      floatArray0[1] = (float) (-228);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-738.2156F), 2116);
      assertArrayEquals(new float[] {293.0F, (-228.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) integer0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1230.049364, 0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'S', 'S'}, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Short short0 = new Short((short)567);
      assertEquals((short)567, (short)short0);
      assertNotNull(short0);
      
      Object[] objectArray0 = new Object[3];
      int int0 = Short.compare((short)567, (short) (-6));
      assertEquals(573, int0);
      
      long long0 = Short.toUnsignedLong((short)567);
      assertEquals(567L, long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'k');
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Short short0 = new Short((short) (-1429));
      assertEquals((short) (-1429), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1364.9F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)27;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0, (byte)27}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 3681L;
      longArray0[2] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, (long[]) null);
      assertArrayEquals(new long[] {1L, 3681L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)44);
      assertArrayEquals(new byte[] {(byte)44}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer((byte)44);
      assertEquals(44, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'j';
      charArray0[2] = 'y';
      charArray0[3] = 'K';
      charArray0[4] = 'i';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'P', 'j', 'y', 'K', 'i'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 619.6;
      doubleArray0[1] = (double) (byte)44;
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) 'P';
      doubleArray0[4] = (double) (byte)44;
      doubleArray0[5] = (double) 'P';
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) (byte)44;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {619.6, 44.0, 121.0, 80.0, 44.0, 80.0, (-1.0), 44.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {619.6, 44.0, 121.0, 80.0, 44.0, 80.0, (-1.0), 44.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-6354.5F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-6354.5F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-6354.5F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-6354.5F);
      doubleArray0[1] = (double) (-6354.5F);
      doubleArray0[2] = (double) (-6354.5F);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 548.909680929151;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2131457650;
      intArray0[1] = 4;
      intArray0[2] = (-937);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-937), 4, 2131457650}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Character character0 = Character.valueOf('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'D', 'D'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1416, 1739);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(12, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1416;
      floatArray0[1] = 1.0F;
      floatArray0[3] = (float) 1739;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1416.0F, 1.0F, 0.0F, 1739.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)64);
      assertEquals((short)64, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)3);
      assertEquals((short)3, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)64;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('Y');
      assertEquals('Y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'6', 'Y'}, charArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 2241, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)3);
      assertEquals((short)3, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-952));
      assertEquals((short) (-952), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1342);
      assertEquals((short)1342, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short)3941);
      assertEquals((short)3941, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1342);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1139.13489;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3038.8580346695107), (-3038.8580346695107));
      assertArrayEquals(new double[] {1139.13489, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-861L));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-284));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) "-;)-JDQ[");
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2748;
      shortArray0[1] = (short) (-448);
      shortArray0[2] = (short)2441;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-467);
      shortArray0[6] = (short)2496;
      shortArray0[7] = (short)512;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)2496, (short) (-615));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2496, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 1101);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-12);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-12);
      longArray0[3] = (long) (byte) (-12);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-691L));
      assertArrayEquals(new long[] {(-12L), 0L, (-12L), (-12L)}, longArray0);
      assertArrayEquals(new long[] {(-12L), 0L, (-12L), (-12L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0, 4926.33F);
      assertArrayEquals(new float[] {4926.33F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 2166;
      intArray0[6] = 0;
      intArray0[7] = (-83);
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertArrayEquals(new int[] {0, 2, 0, 0, 0, 2166, 0, (-83)}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 690L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '9');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 690.0;
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) null, (-353));
      assertEquals(1, doubleArray1.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte)0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "os.name";
      stringArray0[1] = "os.name";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-1465L);
      longArray0[4] = (-83L);
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = '6';
      charArray0[3] = ' ';
      charArray0[4] = '=';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'S', 'S', '6', ' ', '='}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', '6', ' ', '=', 'S', 'S', '6', ' ', '='}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Short[] shortArray1 = new Short[9];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short) shortArray1[0]);
      assertEquals(9, shortArray1.length);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short) shortArray1[1]);
      assertEquals(9, shortArray1.length);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray1[2] = short2;
      Short short3 = new Short((byte)0);
      assertEquals((short)0, (short)short3);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray1[3] = short3;
      Short short4 = new Short((short) shortArray1[2]);
      assertEquals(9, shortArray1.length);
      assertEquals((short)0, (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray1[4] = short4;
      Short short5 = new Short((short)2301);
      assertEquals((short)2301, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertNotNull(short5);
      
      shortArray1[5] = short5;
      shortArray1[6] = short3;
      Short short6 = new Short((short) (-459));
      assertEquals((short) (-459), (short)short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertNotNull(short6);
      
      shortArray1[7] = short6;
      Short short7 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertNotNull(short7);
      
      shortArray1[8] = short7;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)2301, (short)0, (short) (-459), (short) (-1)}, shortArray2);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((int) (byte) (-97));
      assertEquals((-97), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'b';
      int int0 = ArrayUtils.indexOf(intArray0, 10, (-870));
      assertArrayEquals(new int[] {98}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      Integer integer3 = new Integer(1175);
      assertEquals(1175, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      String[] stringArray0 = ArrayUtils.subarray((String[]) null, 10, (int) 0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {389.148, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)64;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)64}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-1763), 0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.5";
      stringArray0[1] = "7}";
      stringArray0[2] = "y/o[ThvPtM0`b1TT";
      stringArray0[3] = "os.name";
      stringArray0[4] = "Array and elemenm cannot both be null";
      boolean boolean0 = ArrayUtils.isNotEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-95L);
      longArray0[1] = 756L;
      longArray0[2] = (-83L);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '5';
      int int0 = ArrayUtils.indexOf(intArray0, 53, 53);
      assertArrayEquals(new int[] {53}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {53}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(4006);
      assertEquals(4006, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 4006;
      doubleArray0[2] = 389.148;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 4006;
      doubleArray0[5] = 0.0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.0, 0.0);
      assertArrayEquals(new double[] {0.0, 4006.0, 389.148, 0.0, 4006.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Long long0 = new Long(4006);
      assertEquals(4006L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(630L);
      assertEquals(630L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = Long.getLong("6.0", long1);
      assertEquals(630L, (long)long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {630L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 4519;
      boolean boolean0 = ArrayUtils.contains(intArray0, 4519);
      assertArrayEquals(new int[] {4519}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)64);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 4519;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[0] = (long) 4519;
      longArray0[4] = (long) 4519;
      longArray0[5] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.add(longArray0, (-405L));
      assertArrayEquals(new long[] {4519L, 0L, 0L, 0L, 4519L, 0L}, longArray0);
      assertArrayEquals(new long[] {4519L, 0L, 0L, 0L, 4519L, 0L, (-405L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1311.63F;
      floatArray0[1] = 1729.64F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 4519L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1311.63F, 1729.64F, 0.0F, 4519.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Integer integer0 = new Integer((-1259));
      assertEquals((-1259), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "");
      assertEquals("-1259", string0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 94;
      Integer integer0 = new Integer(94);
      assertEquals(94, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(94, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(496);
      assertEquals(496, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(94, (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(94, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(94);
      assertEquals(94, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1900));
      assertEquals((-1900), (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 1, integer6);
      assertEquals(6, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2075);
      objectArray0[1] = (Object) (-2075);
      objectArray0[2] = (Object) (-2075);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-2075);
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) (-2075);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertEquals(5, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-2075), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2075), 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-2075)}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(intArray0, intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), (-1));
      assertArrayEquals(new int[] {0, 0, 0, 0, (-2075)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-2110);
      doubleArray0[1] = (double) (short)512;
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (short)512;
      doubleArray0[5] = (double) (short)512;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-2110.0), 512.0, 40.0, 0.0, 512.0, 512.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = '\"';
      charArray0[5] = 'n';
      charArray0[6] = '1';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '5');
      assertArrayEquals(new char[] {'i', '1', 'n', 'n', '\"', 'n', '1'}, charArray0);
      assertArrayEquals(new char[] {'i', '1', 'n', 'n', '\"', 'n', '1'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'n';
      doubleArray0[1] = (double) '1';
      doubleArray0[2] = (double) 'n';
      doubleArray0[3] = (double) '1';
      doubleArray0[4] = (double) 'n';
      doubleArray0[5] = (double) '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {110.0, 49.0, 110.0, 49.0, 110.0, 49.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-59);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-59));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)53, (byte) (-59), (byte)53, (byte) (-59)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-59), (byte)53, (byte) (-59)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Integer[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = (-975);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-228);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'O');
      assertArrayEquals(new char[] {'@', '@', '@', '@'}, charArray0);
      assertArrayEquals(new char[] {'@', '@', '@', '@'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2067), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Integer integer0 = new Integer((byte)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = Long.max(67L, 0);
      assertEquals(67L, long0);
      
      Long long1 = new Long(3497L);
      assertEquals(3497L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[5];
      Long long2 = new Long((byte) (-12));
      assertEquals((-12L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 522L);
      assertArrayEquals(new long[] {522L, (-12L), 522L, 522L, 522L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Integer integer0 = new Integer((-2582));
      assertEquals((-2582), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = new Integer((-2582));
      assertEquals((-2582), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte byte0 = (byte) (-111);
      Byte byte1 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[2] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)10);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)10, (byte) (-111)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte) (-111);
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-111), (short) (-111), (short) (-111), (short) (-111), (short) (-111)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 1.5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, int0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      Long[] longArray3 = new Long[4];
      Long long0 = new Long(57L);
      assertEquals(57L, (long)long0);
      assertNotNull(long0);
      
      longArray3[0] = long0;
      Long long1 = Long.getLong("9[qko6", 1L);
      assertEquals(1L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray3[1] = long1;
      Long long2 = new Long((-4683L));
      assertEquals((-4683L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray3[2] = long2;
      Long long3 = new Long((-123L));
      assertEquals((-123L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray3[3] = long3;
      long[] longArray4 = ArrayUtils.toPrimitive(longArray3, (-123L));
      assertArrayEquals(new long[] {57L, 1L, (-4683L), (-123L)}, longArray4);
      assertEquals(4, longArray3.length);
      assertEquals(4, longArray4.length);
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray2));
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray2);
      assertNotNull(longArray4);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 1576L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), 1576L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 1576L;
      longArray1[4] = 14L;
      longArray1[5] = 0L;
      longArray1[6] = 1576L;
      boolean boolean1 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 1576L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 1576L, 14L, 0L, 1576L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(boolean1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {(-1L), 1576L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) 0;
      int[] intArray0 = new int[1];
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)24;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Integer integer0 = new Integer((-2582));
      assertEquals((-2582), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = new Integer((-2582));
      assertEquals((-2582), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte byte0 = (byte) (-111);
      Byte byte1 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)10);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte) (-111);
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-111), (short) (-111), (short)0, (short) (-111), (short) (-111)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((String[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 756L;
      longArray0[2] = (-83L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {756L, 0L, (-83L)}, longArray0);
      assertArrayEquals(new long[] {756L, 0L, (-83L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1615;
      intArray0[1] = 1615;
      intArray0[2] = 20;
      intArray0[3] = 1615;
      intArray0[4] = (-228);
      intArray0[5] = 293;
      intArray0[6] = 2136;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2603, 1615);
      assertArrayEquals(new int[] {1615, 1615, 20, 1615, (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      intArray0[3] = 1615;
      doubleArray0[1] = 1313.1;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1313.1}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '5';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'4', '5'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.indexOf(intArray1, 293, 20);
      assertArrayEquals(new int[] {1615, 1615, 20, 1615, (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals((-1), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse(intArray1);
      assertArrayEquals(new int[] {1615, 1615, 20, 1615, (-228), 293, 2136}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'('}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 10;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)8);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 10);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 1615, '(');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1615, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 378.4985771;
      byteArray0[5] = (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 378.4985771}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)436;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (-4918.3F);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (-982.0F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-982.0F), (-1.0F), (-1.0F), (-1.0F), (-4918.3F), (-1.0F), 436.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, " in an array of ");
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>("5v+m", " in an array of ");
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry1, "java.lang.Integer");
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Object, String>(" in an array of ", "5v+m");
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry1, "~D%cJW");
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0, "java.lang.Integer");
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry1, "path.separator");
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry5));
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[6] = abstractMap_SimpleEntry6;
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry2);
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry4));
      assertNotNull(abstractMap_SimpleEntry7);
      
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry7;
      AbstractMap.SimpleEntry<Object, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.toArray(abstractMap_SimpleEntryArray0);
      assertEquals(8, abstractMap_SimpleEntryArray0.length);
      assertEquals(8, abstractMap_SimpleEntryArray1.length);
      assertSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 453;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {453}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'K';
      charArray0[2] = 'F';
      charArray0[3] = '`';
      charArray0[4] = 'q';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'8', 'K', 'F', '`', 'q'}, charArray0);
      assertArrayEquals(new char[] {'8', 'K', 'F', '`', 'q', '8', 'K', 'F', '`', 'q'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'b';
      charArray0[2] = 'x';
      int int0 = ArrayUtils.indexOf(charArray0, 'x');
      assertArrayEquals(new char[] {'\u0000', 'b', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) '\u0000';
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 'b';
      floatArray0[6] = (float) 'x';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 2);
      assertArrayEquals(new float[] {120.0F, 2.0F, 0.0F, 2.0F, 2.0F, 98.0F, 120.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1248.191680838));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer integer0 = Integer.valueOf(1426);
      assertEquals(1426, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) integer0, (-353));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 82.7111F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 82.7111F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '.';
      charArray0[3] = 'N';
      charArray0[4] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '.');
      assertArrayEquals(new char[] {'N', '.', '\u0000', 'N', '!', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) '!', (-68));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Short short0 = new Short((short)278);
      assertEquals((short)278, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)278);
      assertEquals((short)278, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)278);
      assertEquals((short)278, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[5];
      floatArray2[0] = float0;
      floatArray2[1] = float0;
      floatArray2[2] = float0;
      floatArray2[4] = float0;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (float) 0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F)}, floatArray3, 0.01F);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)871);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)871}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)871}, shortArray1);
      assertArrayEquals(new short[] {(short)871}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)871;
      intArray0[1] = (int) (byte)0;
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)0, 871);
      assertArrayEquals(new int[] {871, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(shortArray1, (short)871);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)871}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, int2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[14];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Y4Kt:95z?/,MA[i=+{");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      int int3 = Boolean.compare(true, false);
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)871;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 871.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1727.074);
      doubleArray0[2] = (double) 1;
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 0);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0, 1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) integerArray0, (Object) "-;)-JDQ[");
      assertArrayEquals(new int[] {1, 0, 1}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) 1;
      floatArray0[2] = 2957.9F;
      int int0 = ArrayUtils.indexOf(floatArray0, 293.0F);
      assertArrayEquals(new float[] {74.0F, 1.0F, 2957.9F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0, 1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1727.074), 1.0, 0.0, 0.0, 1.0, (-1727.074), 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      boolean boolean3 = ArrayUtils.isNotEmpty(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(boolean3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Double double0 = new Double(2807.35);
      assertEquals(2807.35, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte) (-1));
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "p";
      stringArray0[2] = "";
      stringArray0[3] = "JT";
      stringArray0[4] = "~Au)Zx";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(10, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1074);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1074, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) null);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 0);
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '{', 0);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '5');
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, 3, "java.util.prefs.PreferencesFactory");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(0, (-956.252F));
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = Float.min((-956.252F), 3074.9673F);
      assertEquals((-956.252F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 0.0F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) floatArray1, 697, (-584));
      assertEquals(0, floatArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotSame(floatArray1, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertEquals(12, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(389.148);
      assertEquals(389.148, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-284));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)171;
      shortArray0[1] = (short) (-648);
      shortArray0[2] = (short) (-1911);
      shortArray0[3] = (short)1154;
      shortArray0[4] = (short)10;
      shortArray0[5] = (short)171;
      shortArray0[6] = (short)579;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)579);
      assertArrayEquals(new short[] {(short)171, (short) (-648), (short) (-1911), (short)1154, (short)10, (short)171, (short)579}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      shortArray1[1] = (short) (-2110);
      shortArray1[2] = (short)512;
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, (short[]) null);
      assertArrayEquals(new short[] {(short)1, (short) (-2110), (short)512}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short) (-2110), (short)512}, shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)512;
      longArray0[2] = (long) (short)512;
      longArray0[3] = (long) (short) (-2110);
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short) (-2110);
      longArray0[7] = (long) (short) (-2110);
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (short)1);
      assertArrayEquals(new long[] {1L, 512L, (-2110L), 1L, 1L, (-2110L), (-2110L)}, longArray1);
      assertArrayEquals(new long[] {1L, 512L, 512L, (-2110L), 1L, 1L, (-2110L), (-2110L)}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-2307);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 36.0F, (-2307.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) "0ggmLgZ.O9", (-3060));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 439, 439);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[7];
      floatArray2[0] = (Float) 0.0F;
      floatArray2[1] = (Float) 0.0F;
      floatArray2[2] = float0;
      floatArray2[3] = float0;
      floatArray2[4] = (Float) 0.0F;
      floatArray2[5] = (Float) 0.0F;
      floatArray2[6] = float0;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (float) 439);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertEquals(7, floatArray3.length);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals("gLt\"X", "gLt\"X");
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      int[] intArray0 = new int[17];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(17, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object0;
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-128);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-1), (short) (-1), (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)0);
      assertArrayEquals(new short[] {(short) (-128), (short) (-1), (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte)0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-24));
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-3238L));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1), (int) (byte) (-24));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.indexOf((byte[]) null, (byte)11, (int) (byte) (-24));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (int) (byte)0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "', has a length less than 2";
      stringArray0[1] = ".G:";
      stringArray0[2] = "', has a length less than 2";
      stringArray0[3] = "', has a length less than 2";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, object0);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2339, 2339);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2339;
      floatArray0[1] = (float) 2339;
      floatArray0[2] = (float) 2339;
      floatArray0[3] = (float) 2339;
      floatArray0[4] = (float) 2339;
      floatArray0[5] = (float) 2339;
      floatArray0[6] = (float) 2339;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2339.0F, 2339.0F, 2339.0F, 2339.0F, 2339.0F, 2339.0F, 2339.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object0;
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1139.13489;
      doubleArray0[1] = 467.1531;
      doubleArray0[3] = 2332.271889244117;
      doubleArray0[4] = 2807.35;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {1139.13489, 467.1531, 0.0, 2332.271889244117, 2807.35}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(map0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 94;
      Integer integer0 = new Integer(94);
      assertEquals(94, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(94, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(496);
      assertEquals(496, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(94, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(94, (int)integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(94);
      assertEquals(94, (int)integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2138749811);
      assertEquals(2138749811, (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 1, integer6);
      assertEquals(6, integerArray0.length);
      assertEquals(7, integerArray1.length);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      Integer integer0 = new Integer((byte)44);
      assertEquals(44, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[7];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)44);
      assertArrayEquals(new int[] {44, 44, 44, 44, 44, 44, 44}, intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[3];
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = '[';
      charArray0[2] = 'R';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {']', '[', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)692);
      assertEquals((short)692, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)2701);
      assertEquals((short)2701, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Float float0 = new Float(1896.7220691632458);
      assertEquals(1896.722F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[2];
      Float float1 = new Float((-95.69096785819));
      assertEquals((-95.69097F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-95.69097F), 1896.722F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Short short0 = new Short((short) (-1471));
      assertEquals((short) (-1471), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)3);
      assertEquals((short)3, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Short short3 = new Short((short)3);
      assertEquals((short)3, (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      
      Float float0 = new Float((-32.0));
      assertEquals((-32.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-135);
      shortArray0[1] = (short) (-135);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-135);
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-135), (short) (-135), (short)3, (short) (-135)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-135), (short) (-135), (short)3, (short) (-135)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = (-602);
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-602), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -602, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-135));
      assertEquals((short) (-135), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)64);
      assertEquals((short)64, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)3);
      assertEquals((short)3, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short)2);
      assertEquals((short)2, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short) (-135), (short)2}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-151);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)19;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, 1323);
      assertArrayEquals(new short[] {(short) (-151), (short)1, (short)19}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)19}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1323;
      doubleArray0[1] = (double) (short)19;
      doubleArray0[2] = 113.0;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short) (-151);
      doubleArray0[5] = (double) (short) (-151);
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)19;
      doubleArray0[8] = (double) (short)19;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2019.388479, (int) (short)19);
      assertArrayEquals(new double[] {1323.0, 19.0, 113.0, 1.0, (-151.0), (-151.0), 1.0, 19.0, 19.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)19;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (-1);
      intArray0[5] = (int) (short)1;
      intArray0[6] = 356;
      intArray0[7] = (int) (short) (-151);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {1, (-1), 19, 1, (-1), 1, 356, (-151)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2339, 2339);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2339;
      floatArray0[1] = (float) 2339;
      floatArray0[2] = (float) 2339;
      floatArray0[3] = (float) 2339;
      floatArray0[4] = (float) 2339;
      floatArray0[5] = (float) 2339;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = (-1);
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = (-228);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short[] shortArray1 = new Short[8];
      Short short0 = new Short((short)17009);
      assertEquals((short)17009, (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      shortArray1[1] = shortArray1[0];
      Short short1 = new Short((short) shortArray1[0]);
      assertEquals(8, shortArray1.length);
      assertEquals((short)17009, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[2] = short1;
      Short short2 = new Short((short)17009);
      assertEquals((short)17009, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray1[3] = short2;
      Short short3 = new Short((short) shortArray1[2]);
      assertEquals(8, shortArray1.length);
      assertEquals((short)17009, (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray1[4] = short3;
      Short short4 = new Short((short) shortArray1[3]);
      assertEquals(8, shortArray1.length);
      assertEquals((short)17009, (short)short4);
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray1[5] = short4;
      shortArray1[6] = short4;
      Short short5 = new Short((short) shortArray1[5]);
      assertEquals(8, shortArray1.length);
      assertEquals((short)17009, (short)short5);
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short3));
      assertNotNull(short5);
      
      shortArray1[7] = short5;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertArrayEquals(new short[] {(short)17009, (short)17009, (short)17009, (short)17009, (short)17009, (short)17009, (short)17009, (short)17009}, shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 839.3;
      doubleArray0[2] = (double) (short)shortArray1[0];
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) (short)17009;
      doubleArray0[6] = (double) (-228);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-228), 3);
      assertArrayEquals(new double[] {(-1.0), 839.3, 17009.0, 0.0, 0.0, 17009.0, (-228.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3108.9656);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1139.13489;
      doubleArray0[3] = 467.1531;
      doubleArray0[4] = 2418.13115;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 2962.187465;
      doubleArray0[7] = 3.0;
      doubleArray0[8] = 10.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3108.9656), 1.0, 1139.13489, 467.1531, 2418.13115, 1.0, 2962.187465, 3.0, 10.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, 2);
      assertArrayEquals(new byte[] {(byte)90}, byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte)97, (byte)27, (byte)1}, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      Float float0 = new Float((float) 2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (byte)90);
      assertEquals(90.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(14, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(14, objectArray1.length);
      assertFalse(boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(objectArray1, objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(14, objectArray1.length);
      assertTrue(boolean2);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'd';
      doubleArray0[1] = (double) 'd';
      doubleArray0[2] = (double) 'd';
      doubleArray0[3] = (double) 'd';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 36);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'K';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'q';
      charArray1[1] = 'q';
      charArray1[2] = 'q';
      charArray1[3] = '`';
      charArray1[4] = 'F';
      charArray1[5] = 'F';
      charArray1[6] = 'F';
      charArray1[7] = 'K';
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertArrayEquals(new char[] {'q', 'q', 'q', '`', 'F', 'F', 'F', 'K'}, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(16, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-128);
      doubleArray0[1] = (double) (byte) (-114);
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = (double) (byte)6;
      doubleArray0[4] = (double) 'F';
      doubleArray0[5] = (double) '`';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-114.0));
      assertArrayEquals(new double[] {(-128.0), (-114.0), 113.0, 6.0, 70.0, 96.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (-60), 10);
      assertNull(shortArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[1] = "org.apache.commons.lang3.builder.ToStringStyle";
      stringArray0[2] = "aYX>M|RSi}U";
      stringArray0[3] = "_,z";
      stringArray0[4] = "";
      stringArray0[5] = "O";
      stringArray0[6] = "java.class.path";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertArrayEquals(new char[] {'F'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertSame(charArray0, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) 'F';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {70, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'F';
      doubleArray0[3] = (double) 70;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {70.0, 0.0, 70.0, 70.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-1727.074);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1727.074), 0, (double) 0);
      assertArrayEquals(new double[] {1.0, (-1727.074), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)248;
      shortArray0[2] = (short) (-559);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-2467);
      shortArray0[5] = (short)2067;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2067, (short) (-2467), (short)5, (short) (-559), (short)248, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-2467);
      shortArray1[1] = (short)248;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short) (-559);
      shortArray1[4] = (short)5;
      shortArray1[5] = (short)2067;
      shortArray1[6] = (short)2067;
      shortArray1[7] = (short)248;
      shortArray1[8] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)2496, (int) (short)5);
      assertArrayEquals(new short[] {(short) (-2467), (short)248, (short)0, (short) (-559), (short)5, (short)2067, (short)2067, (short)248, (short)0}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals((-1), int1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      int[] intArray0 = new int[5];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[8] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) null, 1);
      assertEquals(2, characterArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3525.99;
      doubleArray0[2] = (double) 690L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      objectArray0[2] = object0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) '9';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {57, 57}, intArray0);
      assertArrayEquals(new int[] {57, 57}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {57, 57}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(intArray0, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (long) '9';
      longArray0[3] = (-363L);
      longArray0[4] = (long) 57;
      longArray0[5] = (long) '9';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 57L, (-363L), 57L, 57L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 57L, (-363L), 57L, 57L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, 57L, (-363L), 57L, 57L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 57L, (-363L), 57L, 57L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 57L, (-363L), 57L, 57L}, longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-97);
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(2837);
      assertEquals(2837, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (-1616), 2470);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-887));
      assertEquals((-887), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer3;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(4, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertArrayEquals(new char[] {'F'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[5] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 124.0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Integer integer0 = Integer.valueOf((-353));
      assertEquals((-353), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) doubleArray0[4], 1426);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'F';
      intArray0[1] = (-353);
      intArray0[2] = (-1);
      intArray0[3] = (int) 'F';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {70, (-353), (-1), 70}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1343.05052373);
      doubleArray0[1] = 1139.13489;
      doubleArray0[2] = (-0.2031768835116421);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 606.7290568703354, 606.7290568703354);
      assertArrayEquals(new double[] {(-1343.05052373), 1139.13489, (-0.2031768835116421)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1921.0F;
      floatArray0[1] = 120.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1343.05052373), 1139.13489, (-0.2031768835116421)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1343.05052373), 1139.13489, (-0.2031768835116421)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      char[] charArray0 = new char[6];
      int[] intArray0 = new int[5];
      intArray0[0] = 453;
      intArray0[1] = 453;
      intArray0[2] = 453;
      intArray0[3] = 453;
      intArray0[4] = 453;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {453, 453, 453, 453, 453}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertEquals(12, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertEquals(12, charArray2.length);
      assertTrue(boolean1);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse((double[]) null);
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = 'v';
      charArray0[4] = 'c';
      charArray0[5] = '<';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'c', '<', 'c', 'v', 'c', '<'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) 'v';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {60, 118}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, '>', 46);
      assertArrayEquals(new char[] {'c', '<', 'c', 'v', 'c', '<'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {60, 118}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '<';
      floatArray0[1] = (float) 118;
      floatArray0[2] = (float) 'c';
      int int1 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {60.0F, 118.0F, 99.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int2 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) "1.6", 46);
      assertArrayEquals(new int[] {60, 118}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, 118, 118);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2075);
      objectArray0[1] = (Object) (-2075);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-2075);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) (-2075);
      ArrayUtils.isSameLength(objectArray0, objectArray1);
      ArrayUtils.nullToEmpty(intArray0);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-2075)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-363L);
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)871);
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)871;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)0;
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)0, 871);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(shortArray1, (short)871);
      assertEquals(0, int2);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Y4Kt:95z?/,MA[i=+{");
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(false);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("Y4Kt:95z?/,MA[i=+{");
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("Y6;u].y6o|rjkC) o");
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("Y6;u].y6o|rjkC) o");
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("Y6;u].y6o|rjkC) o");
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("Y4Kt:95z?/,MA[i=+{");
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Short short0 = new Short((short)567);
      Integer[] integerArray0 = new Integer[6];
      Object[] objectArray0 = new Object[3];
      Short.compare((short)2055, (short)2055);
      ArrayUtils.toMap((Object[]) null);
      objectArray0[1] = (Object) short0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3081);
      intArray0[1] = 48;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[4] = 0;
      intArray0[5] = (-2690);
      intArray0[6] = (-458);
      intArray0[7] = 2284;
      ArrayUtils.add(intArray0, (-2690));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = 0L;
      longArray0[3] = (long) 48;
      longArray0[4] = (long) 48;
      ArrayUtils.isNotEmpty(longArray0);
      char[] charArray0 = new char[22];
      charArray0[0] = 'g';
      charArray0[1] = '7';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'g';
      ArrayUtils.reverse(charArray0);
      assertEquals(22, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (float) 1;
      floatArray0[4] = 2336.7073F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      
      Float[] floatArray2 = new Float[2];
      floatArray2[0] = (Float) 0.0F;
      floatArray2[1] = (Float) 0.0F;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 120.0F);
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray3, 0.01F);
      
      long[] longArray0 = new long[1];
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(4, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 154L);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte)0);
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-547));
      shortArray0[1] = short1;
      Short short2 = new Short((byte)0);
      shortArray0[2] = short2;
      shortArray0[3] = short2;
      Short short3 = new Short((short)108);
      shortArray0[4] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)0);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 40.0;
      doubleArray0[1] = 40.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      ArrayUtils.reverse(doubleArray0);
      ArrayUtils.addAll(shortArray0, shortArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)512;
      intArray0[1] = (int) (short) (-2110);
      ArrayUtils.isEmpty(intArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2110);
      doubleArray1[1] = 2210.88657009296;
      doubleArray1[2] = 40.0;
      doubleArray1[3] = 113.0;
      Short[] shortArray1 = new Short[5];
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      shortArray1[0] = short1;
      Short short2 = new Short((short) (-1));
      shortArray1[1] = short2;
      Short short3 = new Short((short) (-2110));
      shortArray1[2] = short3;
      short short4 = (short)36;
      Short short5 = new Short((short)36);
      shortArray1[3] = short5;
      Short short6 = new Short(short0);
      shortArray1[4] = short6;
      ArrayUtils.toPrimitive(shortArray1, (short)2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) short4;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 40.0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 40.0;
      objectArray0[6] = (Object) short0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Short short0 = new Short((short)17);
      short[] shortArray1 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)17;
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)44);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '|';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.isSameLength(intArray0, intArray0);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1727.074);
      ArrayUtils.indexOf(doubleArray0, (-120.45992546), 64, (-1968.068873));
      ArrayUtils.nullToEmpty((byte[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'f';
      ArrayUtils.addAll(charArray0, charArray0);
      ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      ArrayUtils.toObject(intArray0);
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'f', 'L'}, charArray0);
      
      int[] intArray1 = new int[3];
      intArray1[0] = Integer.MAX_VALUE;
      intArray1[1] = (int) 'f';
      intArray1[2] = (int) 'f';
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = (-2075);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2075);
      ArrayUtils.addAll(intArray0, (int[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      Double double0 = new Double((byte) (-1));
      Double double1 = new Double((-2075));
      Double[] doubleArray0 = new Double[19];
      doubleArray0[0] = double1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }
}
